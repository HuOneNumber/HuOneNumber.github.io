<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>别着急，慢慢来</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-08T13:05:20.481Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>胡倚豪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>09-代理与反射</title>
    <link href="http://example.com/2021/04/08/note/JavaScript/09-%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <id>http://example.com/2021/04/08/note/JavaScript/09-%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84/</id>
    <published>2021-04-08T12:55:46.535Z</published>
    <updated>2021-04-08T13:05:20.481Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 6新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。具体地说，可以给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。在对目标对象的各种操作影响目标对象之前，可以在代理对象中对这些操作加以控制。</p><blockquote><p><strong>注意</strong>在ES6之前，ECMAScript中并没有类似代理的特性。由于代理是一种新的基础性语言能力，很多转译程序都不能把代理行为转换为之前的ECMAScript代码。为此，代理和反射只在百分之百支持它们的平台上有用。可以检测代理是否存在，不存在则提供后备代码。不过这会导致代码冗余，因此并不推荐。</p></blockquote><h2 id="9-1-代理基础"><a href="#9-1-代理基础" class="headerlink" title="9.1　代理基础"></a>9.1　代理基础</h2><p>代理是目标对象的抽象。从很多方面看，代理类似C++指针但有重大区别，因为它可以用作目标对象的替身，但又完全独立于目标对象。目标对象可以直接被操作，但直接操作会绕过代理施予的行为，也可以通过代理来操作。</p><h3 id="9-1-1-创建空代理"><a href="#9-1-1-创建空代理" class="headerlink" title="9.1.1　创建空代理"></a>9.1.1　创建空代理</h3><p>最简单的代理是空代理，即除了作为一个抽象的目标对象，什么也不做。默认情况下，在代理对象上执行的所有操作都会无障碍地传播到目标对象。因此，在任何可以使用目标对象的地方，都可以通过同样的方式来使用与之关联的代理对象。</p><p>代理是使用<code>Proxy</code>构造函数创建的。这个构造函数接收两个参数：目标对象和处理程序对象。缺少其中任何一个参数都会抛出<code>TypeError</code>。要创建空代理，可以传一个简单的对象字面量作为处理程序对象，从而让所有操作畅通无阻地抵达目标对象。</p><p>如下面的代码所示，在代理对象上执行的任何操作实际上都会应用到目标对象。唯一可感知的不同就是代码中操作的是代理对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  id: <span class="string">&#x27;target&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="comment">// id属性会访问同一个值</span></span><br><span class="line"><span class="built_in">console</span>.log(target.id);  <span class="comment">// target</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id);   <span class="comment">// target</span></span><br><span class="line"><span class="comment">// 给目标属性赋值会反映在两个对象上，因为两个对象访问的是同一个值</span></span><br><span class="line">target.id = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(target.id); <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id);  <span class="comment">// foo</span></span><br><span class="line"><span class="comment">// 给代理属性赋值会反映在两个对象上，因为这个赋值会转移到目标对象</span></span><br><span class="line">proxy.id = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(target.id); <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.id);  <span class="comment">// bar</span></span><br><span class="line"><span class="comment">// hasOwnProperty()方法在两个地方，都会应用到目标对象</span></span><br><span class="line"><span class="built_in">console</span>.log(target.hasOwnProperty(<span class="string">&#x27;id&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.hasOwnProperty(<span class="string">&#x27;id&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Proxy.prototype是undefined，因此不能使用instanceof操作符</span></span><br><span class="line"><span class="built_in">console</span>.log(target <span class="keyword">instanceof</span> <span class="built_in">Proxy</span>); <span class="comment">// TypeError: Function has non-object prototype &#x27;undefined&#x27; in instanceof check</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy <span class="keyword">instanceof</span> <span class="built_in">Proxy</span>);  <span class="comment">// TypeError: Function has non-object prototype &#x27;undefined&#x27; in instanceof check</span></span><br><span class="line"><span class="comment">// 严格相等可以用来区分代理和目标</span></span><br><span class="line"><span class="built_in">console</span>.log(target === proxy); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="9-1-2-定义捕获器"><a href="#9-1-2-定义捕获器" class="headerlink" title="9.1.2　定义捕获器"></a>9.1.2　定义捕获器</h3><p>使用代理的主要目的是可以定义<strong>捕获器</strong>（trap）。捕获器就是在处理程序对象中定义的“基本操作的拦截器”。每个处理程序对象可以包含零个或多个捕获器，每个捕获器都对应一种基本操作，可以直接或间接在代理对象上调用。每次在代理对象上调用这些基本操作时，代理可以在这些操作传播到目标对象之前先调用捕获器函数，从而拦截并修改相应的行为。</p><blockquote><p><strong>注意</strong>捕获器（trap）是从操作系统中借用的概念。在操作系统中，捕获器是程序流中的一个同步中断，可以暂停程序流，转而执行一段子例程，之后再返回原始程序流。</p></blockquote><p>例如，可以定义一个<code>get()</code>捕获器，在ECMAScript操作以某种形式调用<code>get()</code>时触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="comment">// 捕获器在处理程序对象中以方法名为键</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;handler override&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure><p>这样，当通过代理对象执行<code>get()</code>操作时，就会触发定义的<code>get()</code>捕获器。当然，<code>get()</code>不是ECMAScript对象可以调用的方法。这个操作在JavaScript代码中可以通过多种形式触发并被<code>get()</code>捕获器拦截到。<code>proxy[property]</code>、<code>proxy.property</code>或<code>Object.create(proxy)[property]</code>等操作都会触发基本的<code>get()</code>操作以获取属性。所有这些操作只要也只能发生在代理对象上，就会触发<code>get()</code>捕获器，否则在目标对象上执行这些操作仍然会产生正常的行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="comment">// 捕获器在处理程序对象中以方法名为键</span></span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;handler override&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(target.foo);                    <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);                     <span class="comment">// handler override</span></span><br><span class="line"><span class="built_in">console</span>.log(target[<span class="string">&#x27;foo&#x27;</span>]);                 <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy[<span class="string">&#x27;foo&#x27;</span>]);                  <span class="comment">// handler override</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.create(target)[<span class="string">&#x27;foo&#x27;</span>]);  <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.create(proxy)[<span class="string">&#x27;foo&#x27;</span>]);   <span class="comment">// handler override</span></span><br></pre></td></tr></table></figure><h3 id="9-1-3-捕获器参数和反射API"><a href="#9-1-3-捕获器参数和反射API" class="headerlink" title="9.1.3　捕获器参数和反射API"></a>9.1.3　捕获器参数和反射API</h3><p>所有捕获器都可以访问相应的参数，基于这些参数可以重建被捕获方法的原始行为。比如，<code>get()</code>捕获器会接收到目标对象、要查询的属性和代理对象三个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">trapTarget, property, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(trapTarget === target);</span><br><span class="line">    <span class="built_in">console</span>.log(property);</span><br><span class="line">    <span class="built_in">console</span>.log(receiver === proxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.foo;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>有了这些参数，就可以重建被捕获方法的原始行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">trapTarget, property, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> trapTarget[property];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);  <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>所有捕获器都可以基于自己的参数重建原始操作，但并非所有捕获器行为都像<code>get()</code>那么简单。因此，无法如法炮制。实际上，开发者可以通过调用全局<code>Reflect</code>对象上（封装了原始行为）的同名方法来轻松重建。<br>处理程序对象中所有可以捕获的方法都有对应的反射（Reflect）API方法。这些方法与捕获器拦截的方法具有相同的名称和函数签名，而且也具有与被拦截方法相同的行为。因此，使用反射API也可以像下面这样定义出空代理对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);   <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo);  <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>甚至还可以写得更简洁一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  get: <span class="built_in">Reflect</span>.get</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);  <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>事实上，如果真想创建一个可以捕获所有方法，然后将每个方法转发给对应反射API的空代理，那么甚至不需要定义处理程序对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, <span class="built_in">Reflect</span>);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);   <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo);  <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>反射API为开发者准备好了样板代码，在此基础上开发者可以用最少的代码修改捕获的方法。比如，下面的代码在某个属性被访问时，会对返回的值进行一番修饰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  baz: <span class="string">&#x27;qux&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">trapTarget, property, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> decoration = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (property === <span class="string">&#x27;foo&#x27;</span>) &#123;</span><br><span class="line">      decoration = <span class="string">&#x27;!!!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments) + decoration;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);   <span class="comment">// bar!!!</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo);  <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.baz);   <span class="comment">// qux</span></span><br><span class="line"><span class="built_in">console</span>.log(target.baz);  <span class="comment">// qux</span></span><br></pre></td></tr></table></figure><h3 id="9-1-4-捕获器不变式"><a href="#9-1-4-捕获器不变式" class="headerlink" title="9.1.4　捕获器不变式"></a>9.1.4　捕获器不变式</h3><p>使用捕获器几乎可以改变所有基本方法的行为，但也不是没有限制。根据ECMAScript规范，每个捕获的方法都知道目标对象上下文、捕获函数签名，而捕获处理程序的行为必须遵循“捕获器不变式”（trap invariant）。捕获器不变式因方法不同而异，但通常都会防止捕获器定义出现过于反常的行为。</p><p>比如，如果目标对象有一个不可配置且不可写的数据属性，那么在捕获器返回一个与该属性不同的值时，会抛出<code>TypeError</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(target, <span class="string">&#x27;foo&#x27;</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;qux&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);  <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h3 id="9-1-5-可撤销代理"><a href="#9-1-5-可撤销代理" class="headerlink" title="9.1.5　可撤销代理"></a>9.1.5　可撤销代理</h3><p>对于使用<code>new Proxy()</code>创建的普通代理来说，这种联系会在代理对象的生命周期内一直持续存在。</p><p>有时候可能需要中断代理对象与目标对象之间的联系。<code>revocable()</code>方法支持撤销代理对象与目标对象的关联。撤销代理的操作是不可逆的。而且，撤销函数（<code>revoke()</code>）是幂等的，调用多少次的结果都一样。撤销代理之后再调用代理会抛出<code>TypeError</code>。</p><p>撤销函数和代理对象是在实例化时同时生成的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;intercepted&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; proxy, revoke &#125; = <span class="built_in">Proxy</span>.revocable(target, handler);</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);   <span class="comment">// intercepted</span></span><br><span class="line"><span class="built_in">console</span>.log(target.foo);  <span class="comment">// bar</span></span><br><span class="line">revoke();</span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);   <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h3 id="9-1-6-实用反射API"><a href="#9-1-6-实用反射API" class="headerlink" title="9.1.6　实用反射API"></a>9.1.6　实用反射API</h3><p>某些情况下应该优先使用反射API，这是有一些理由的。</p><ol><li><strong>反射API与对象API</strong></li></ol><p>在使用反射API时，要记住：</p><ul><li>反射API并不限于捕获处理程序；</li><li>大多数反射API方法在<code>Object</code>类型上有对应的方法。</li></ul><p>通常，<code>Object</code>上的方法适用于通用程序，而反射方法适用于细粒度的对象控制与操作。</p><ol start="2"><li><strong>状态标记</strong></li></ol><p>很多反射方法返回称作“状态标记”的布尔值，表示意图执行的操作是否成功。有时候，状态标记比那些返回修改后的对象或者抛出错误（取决于方法）的反射API方法更有用。例如，可以使用反射API对下面的代码进行重构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始代码</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(o, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;failure&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在定义新属性时如果发生问题，<code>Reflect.defineProperty()</code>会返回<code>false</code>，而不是抛出错误。因此使用这个反射方法可以这样重构上面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构后的代码</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Reflect</span>.defineProperty(o, <span class="string">&#x27;foo&#x27;</span>, &#123;<span class="attr">value</span>: <span class="string">&#x27;bar&#x27;</span>&#125;)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;failure&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下反射方法都会提供状态标记：</p><ul><li> <code>Reflect.defineProperty()</code></li><li> <code>Reflect.preventExtensions()</code></li><li> <code>Reflect.setPrototypeOf()</code></li><li> <code>Reflect.set()</code></li><li> <code>Reflect.deleteProperty()</code></li></ul><ol start="3"><li><strong>用一等函数替代操作符</strong></li></ol><p>以下反射方法提供只有通过操作符才能完成的操作。</p><ul><li><code>Reflect.get()</code>：可以替代对象属性访问操作符。</li><li><code>Reflect.set()</code>：可以替代<code>=</code>赋值操作符。</li><li><code>Reflect.has()</code>：可以替代<code>in</code>操作符或<code>with()</code>。</li><li><code>Reflect.deleteProperty()</code>：可以替代<code>delete</code>操作符。</li><li><code>Reflect.construct()</code>：可以替代<code>new</code>操作符。</li></ul><ol start="4"><li><strong>安全地应用函数</strong></li></ol><p>在通过<code>apply</code>方法调用函数时，被调用的函数可能也定义了自己的<code>apply</code>属性（虽然可能性极小）。为绕过这个问题，可以使用定义在<code>Function</code>原型上的<code>apply</code>方法，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply.call(myFunc, thisVal, argumentList);</span><br></pre></td></tr></table></figure><p>使用<code>Reflect.apply</code>更方便：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Reflect</span>.apply(myFunc, thisVal, argumentsList);</span><br></pre></td></tr></table></figure><h3 id="9-1-7-代理另一个代理"><a href="#9-1-7-代理另一个代理" class="headerlink" title="9.1.7　代理另一个代理"></a>9.1.7　代理另一个代理</h3><p>代理可以拦截反射API的操作，而这意味着完全可以创建一个代理，通过它去代理另一个代理。这样就可以在一个目标对象之上构建多层拦截网：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> firstProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;first proxy&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> secondProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(firstProxy, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;second proxy&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(secondProxy.foo);</span><br><span class="line"><span class="comment">// second proxy</span></span><br><span class="line"><span class="comment">// first proxy</span></span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><h3 id="9-1-8-代理的问题与不足"><a href="#9-1-8-代理的问题与不足" class="headerlink" title="9.1.8　代理的问题与不足"></a>9.1.8　代理的问题与不足</h3><p>代理是在ECMAScript现有基础之上构建起来的一套新API。虽然很大程度上，代理作为对象的虚拟层可以正常使用。但在某些情况下，代理也不能与现在的ECMAScript机制很好地协同。</p><h4 id="9-1-8-1-代理中的this？"><a href="#9-1-8-1-代理中的this？" class="headerlink" title="9.1.8.1   代理中的this？"></a><strong>9.1.8.1   代理中的</strong><code>this</code>？</h4><p>代理潜在的一个问题来源是<code>this</code>值，<code>this</code>通常指向调用这个方法的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  <span class="function"><span class="title">thisValEqualsProxy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> === proxy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(target.thisValEqualsProxy());  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.thisValEqualsProxy());   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这样完全没有问题：调用代理上的任何方法，比如<code>proxy.outerMethod()</code>，而这个方法进而又会调用另一个方法，如<code>this.innerMethod()</code>，实际上都会调用<code>proxy.innerMethod()</code>。多数情况下，这是符合预期的行为。可是，如果目标对象依赖于对象标识，那就可能碰到意料之外的问题。<br>还记得第6章中通过<code>WeakMap</code>保存私有变量的例子吧，以下是它的简化版：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">userId</span>)</span> &#123;</span><br><span class="line">    wm.set(<span class="built_in">this</span>, userId);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">id</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    wm.set(<span class="built_in">this</span>, userId);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">id</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> wm.get(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这个实现依赖<code>User</code>实例的对象标识，在这个实例被代理的情况下就会出问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.id); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">const</span> userInstanceProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(userInstanceProxy.id); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这是因为<code>User</code>实例一开始使用目标对象作为<code>WeakMap</code>的键，代理对象却尝试从<strong>自身</strong>取得这个实例。要解决这个问题，就需要重新配置代理，把代理<code>User</code>实例改为代理<code>User</code>类本身。之后再创建代理的实例就会以代理实例作为<code>WeakMap</code>的键了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UserClassProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;&#125;);</span><br><span class="line"><span class="keyword">const</span> proxyUser = <span class="keyword">new</span> UserClassProxy(<span class="number">456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(proxyUser.id);</span><br></pre></td></tr></table></figure><h4 id="9-1-8-2代理与内部槽位"><a href="#9-1-8-2代理与内部槽位" class="headerlink" title="9.1.8.2代理与内部槽位"></a>9.1.8.2<strong>代理与内部槽位</strong></h4><p>代理与内置引用类型（比如<code>Array</code>）的实例通常可以很好地协同，但有些内置类型（比如<code>Date</code>）可能会依赖代理无法控制的机制，结果导致在代理上调用某些方法会出错。</p><p>根据ECMAScript规范，<code>Date</code>类型方法的执行依赖<code>this</code>值上的内部槽位<code>[[NumberDate]]</code>。代理对象上不存在这个内部槽位，而且这个内部槽位的值也不能通过普通的<code>get()</code>和<code>set()</code>操作访问到，于是代理拦截后本应转发给目标对象的方法会抛出<code>TypeError</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(proxy <span class="keyword">instanceof</span> <span class="built_in">Date</span>);  <span class="comment">// true</span></span><br><span class="line">proxy.getDate();  <span class="comment">// TypeError: &#x27;this&#x27; is not a Date object</span></span><br></pre></td></tr></table></figure><h2 id="9-2-代理捕获器与反射方法"><a href="#9-2-代理捕获器与反射方法" class="headerlink" title="9.2　代理捕获器与反射方法"></a>9.2　代理捕获器与反射方法</h2><p>代理可以捕获13种不同的基本操作。这些操作有各自不同的反射API方法、参数、关联ECMAScript操作和不变式。</p><p>对于在代理对象上执行的任何一种操作，只会有一个捕获处理程序被调用。不会存在重复捕获的情况。</p><p>只要在代理上调用，所有捕获器都会拦截它们对应的反射API操作。</p><h3 id="9-2-1get"><a href="#9-2-1get" class="headerlink" title="9.2.1get()"></a>9.2.1<code>get()</code></h3><p><code>get()</code>捕获器会在获取属性值的操作中被调用。对应的反射API方法为<code>Reflect.get()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;get()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.foo;  <span class="comment">// get()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：无限制。</li><li>拦截的操作<ul><li><code>proxy.property</code></li><li><code>proxy[property]</code></li><li><code>Object.create(proxy)[property]</code></li><li><code>Reflect.get(proxy, property, receiver)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>property</code>：引用的目标对象上的字符串键属性。</li><li><code>receiver</code>：代理对象或继承代理对象的对象。</li></ul></li><li>捕获器不变式<ul><li>如果<code>target.property</code>不可写且不可配置，则处理程序返回的值必须与<code>target.property</code>匹配。</li><li>如果<code>target.property</code>不可配置且<code>[[Get]]</code>特性为<code>undefined</code>，处理程序的返回值也必须是<code>undefined</code>。<blockquote><p><strong>注意</strong>严格来讲，property参数除了字符串键，也可能是符（symbol）键。后面几处也一样。</p></blockquote><h3 id="9-2-2set"><a href="#9-2-2set" class="headerlink" title="9.2.2set()"></a>9.2.2<code>set()</code></h3></li></ul></li></ol><p><code>set()</code>捕获器会在设置属性值的操作中被调用。对应的反射API方法为<code>Reflect.set()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;set()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.foo = <span class="string">&#x27;bar&#x27;</span>;  <span class="comment">// set()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：<code>true</code>表示成功；<code>false</code>表示失败，严格模式下会抛出<code>TypeError</code>。</li><li>拦截的操作<ul><li><code>proxy.property = value</code></li><li><code>proxy[property] = value</code></li><li><code>Object.create(proxy)[property] = value</code></li><li><code>Reflect.set(proxy, property, value, receiver)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>property</code>：引用的目标对象上的字符串键属性。</li><li><code>value</code>：要赋给属性的值。</li><li><code>receiver</code>：接收最初赋值的对象。</li></ul></li><li>捕获器不变式<ul><li>如果<code>target.property</code>不可写且不可配置，则不能修改目标属性的值。</li><li>如果<code>target.property</code>不可配置且<code>[[Set]]</code>特性为<code>undefined</code>，则不能修改目标属性的值。</li><li>在严格模式下，处理程序中返回<code>false</code>会抛出<code>TypeError</code>。</li></ul></li></ol><h3 id="9-2-3has"><a href="#9-2-3has" class="headerlink" title="9.2.3has()"></a>9.2.3<code>has()</code></h3><p><code>has()</code>捕获器会在<code>in</code>操作符中被调用。对应的反射API方法为<code>Reflect.has()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;has()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.has(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> proxy;</span><br><span class="line"><span class="comment">// has()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回布尔值，表示属性是否存在。返回非布尔值会被转型为布尔值。</li><li>拦截的操作<ul><li><code>property in proxy</code></li><li><code>property in Object.create(proxy)</code></li><li><code>with(proxy) &#123;(property);&#125;</code></li><li><code>Reflect.has(proxy, property)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>property</code>：引用的目标对象上的字符串键属性。</li></ul></li><li>捕获器不变式<ul><li>如果<code>target.property</code>存在且不可配置，则处理程序必须返回<code>true</code>。</li><li>如果<code>target.property</code>存在且目标对象不可扩展，则处理程序必须返回<code>true</code>。<h3 id="9-2-4defineProperty"><a href="#9-2-4defineProperty" class="headerlink" title="9.2.4defineProperty()"></a>9.2.4<code>defineProperty()</code></h3></li></ul></li></ol><p><code>defineProperty()</code>捕获器会在<code>Object.defineProperty()</code>中被调用。对应的反射API方法为<code>Reflect.defineProperty()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">defineProperty</span>(<span class="params">target, property, descriptor</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;defineProperty()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.defineProperty(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(proxy, <span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// defineProperty()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回布尔值，表示属性是否成功定义。返回非布尔值会被转型为布尔值。</li><li>拦截的操作<ul><li><code>Object.defineProperty(proxy, property, descriptor)</code></li><li><code>Reflect.defineProperty(proxy, property, descriptor)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>property</code>：引用的目标对象上的字符串键属性。</li><li><code>descriptor</code>：包含可选的<code>enumerable</code>、<code>configurable</code>、<code>writable</code>、<code>value</code>、<code>get</code>和<code>set</code>定义的对象。</li></ul></li><li>捕获器不变式<ul><li>如果目标对象不可扩展，则无法定义属性。</li><li>如果目标对象有一个可配置的属性，则不能添加同名的不可配置属性。</li><li>如果目标对象有一个不可配置的属性，则不能添加同名的可配置属性。<h3 id="9-2-5getOwnPropertyDescriptor"><a href="#9-2-5getOwnPropertyDescriptor" class="headerlink" title="9.2.5getOwnPropertyDescriptor()"></a>9.2.5<code>getOwnPropertyDescriptor()</code></h3></li></ul></li></ol><p><code>getOwnPropertyDescriptor()</code>捕获器会在<code>Object.getOwnPropertyDescriptor()</code>中被调用。对应的反射API方法为<code>Reflect.getOwnPropertyDescriptor()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">getOwnPropertyDescriptor</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getOwnPropertyDescriptor()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getOwnPropertyDescriptor(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(proxy, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">// getOwnPropertyDescriptor()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：属性不存在时返回<code>undefined</code>，否则必须返回对象。</li><li>拦截的操作<ul><li><code>Object.getOwnPropertyDescriptor(proxy, property)</code></li><li><code>Reflect.getOwnPropertyDescriptor(proxy, property)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>property</code>：引用的目标对象上的字符串键属性。</li></ul></li><li>捕获器不变式<ul><li>如果自有的<code>target.property</code>存在且不可配置，则处理程序必须返回一个表示该属性存在的对象。</li><li>如果自有的<code>target.property</code>存在且可配置，则处理程序必须返回表示该属性可配置的对象。</li><li>如果自有的<code>target.property</code>存在且<code>target</code>不可扩展，则处理程序必须返回一个表示该属性存在的对象。</li><li>如果<code>target.property</code>不存在且<code>target</code>不可扩展，则处理程序必须返回<code>undefined</code>表示该属性不存在。</li><li>如果<code>target.property</code>不存在，则处理程序不能返回表示该属性可配置的对象。<h3 id="9-2-6deleteProperty"><a href="#9-2-6deleteProperty" class="headerlink" title="9.2.6deleteProperty()"></a>9.2.6<code>deleteProperty()</code></h3></li></ul></li></ol><p><code>deleteProperty()</code>捕获器会在<code>delete</code>操作符中被调用。对应的反射API方法为<code>Reflect.deleteProperty()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deleteProperty()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">delete</span> proxy.foo  <span class="comment">// deleteProperty()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回布尔值，表示删除属性是否成功。返回非布尔值会被转型为布尔值。</li><li>拦截的操作<ul><li><code>delete proxy.property</code></li><li><code>delete proxy[property]</code></li><li><code>Reflect.deleteProperty(proxy, property)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>property</code>：引用的目标对象上的字符串键属性。</li></ul></li><li>捕获器不变式<ul><li>如果自有的<code>target.property</code>存在且不可配置，则处理程序不能删除这个属性。<h3 id="9-2-7ownKeys"><a href="#9-2-7ownKeys" class="headerlink" title="9.2.7ownKeys()"></a>9.2.7<code>ownKeys()</code></h3></li></ul></li></ol><p><code>ownKeys()</code>捕获器会在<code>Object.keys()</code>及类似方法中被调用。对应的反射API方法为<code>Reflect.ownKeys()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ownKeys()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.ownKeys(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.keys(proxy);  <span class="comment">// ownKeys()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：<code>ownKeys()</code>必须返回包含字符串或符号的可枚举对象。</li><li>拦截的操作<ul><li><code>Object.getOwnPropertyNames(proxy)</code></li><li><code>Object.getOwnPropertySymbols(proxy)</code></li><li><code>Object.keys(proxy)</code></li><li><code>Reflect.ownKeys(proxy)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li></ul></li><li>捕获器不变式<ul><li>返回的可枚举对象必须包含<code>target</code>的所有不可配置的自有属性。</li><li>如果<code>target</code>不可扩展，则返回可枚举对象必须准确地包含自有属性键。<h3 id="9-2-8getPrototypeOf"><a href="#9-2-8getPrototypeOf" class="headerlink" title="9.2.8getPrototypeOf()"></a>9.2.8<code>getPrototypeOf()</code></h3></li></ul></li></ol><p><code>getPrototypeOf()</code>捕获器会在<code>Object.getPrototypeOf()</code>中被调用。对应的反射API方法为<code>Reflect.getPrototypeOf()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">getPrototypeOf</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;getPrototypeOf()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.getPrototypeOf(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(proxy);  <span class="comment">// getPrototypeOf()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：<code>getPrototypeOf()</code>必须返回对象或<code>null</code>。</li><li>拦截的操作<ul><li><code>Object.getPrototypeOf(proxy)</code></li><li><code>Reflect.getPrototypeOf(proxy)</code></li><li><code>proxy.__proto__</code></li><li><code>Object.prototype.isPrototypeOf(proxy)</code></li><li><code>proxy instanceof Object</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li></ul></li><li>捕获器不变式<ul><li>如果<code>target</code>不可扩展，则<code>Object.getPrototypeOf(proxy)</code>唯一有效的返回值就是<code>Object.getPrototypeOf(target)</code>的返回值。<h3 id="9-2-9setPrototypeOf"><a href="#9-2-9setPrototypeOf" class="headerlink" title="9.2.9setPrototypeOf()"></a>9.2.9<code>setPrototypeOf()</code></h3></li></ul></li></ol><p><code>setPrototypeOf()</code>捕获器会在<code>Object.setPrototypeOf()</code>中被调用。对应的反射API方法为<code>Reflect.setPrototypeOf()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">setPrototypeOf</span>(<span class="params">target, prototype</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setPrototypeOf()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.setPrototypeOf(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(proxy, <span class="built_in">Object</span>);  <span class="comment">// setPrototypeOf()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回布尔值，表示原型赋值是否成功。返回非布尔值会被转型为布尔值。</li><li>拦截的操作<ul><li><code>Object.setPrototypeOf(proxy)</code></li><li><code>Reflect.setPrototypeOf(proxy)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>prototype</code>：<code>target</code>的替代原型，如果是顶级原型则为<code>null</code>。</li></ul></li><li>捕获器不变式<ul><li>若<code>target</code>不可扩展，则唯一有效的<code>prototype</code>参数就是<code>Object.getPrototypeOf(target)</code>的返回值。<h3 id="9-2-10isExtensible"><a href="#9-2-10isExtensible" class="headerlink" title="9.2.10isExtensible()"></a>9.2.10<code>isExtensible()</code></h3></li></ul></li></ol><p><code>isExtensible()</code>捕获器会在<code>Object.isExtensible()</code>中被调用。对应的反射API方法为<code>Reflect.isExtensible()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">isExtensible</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;isExtensible()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.isExtensible(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(proxy);</span><br><span class="line"><span class="comment">// isExtensible()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回布尔值，表示<code>target</code>是否可扩展。返回非布尔值会被转型为布尔值。</li><li>拦截的操作<ul><li><code>Object.isExtensible(proxy)</code></li><li><code>Reflect.isExtensible(proxy)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li></ul></li><li>捕获器不变式<ul><li>如果<code>target</code>可扩展，则处理程序必须返回<code>true</code>。</li><li>如果<code>target</code>不可扩展，则处理程序必须返回<code>false</code>。<h3 id="9-2-11preventExtensions"><a href="#9-2-11preventExtensions" class="headerlink" title="9.2.11preventExtensions()"></a>9.2.11<code>preventExtensions()</code></h3></li></ul></li></ol><p><code>preventExtensions()</code>捕获器会在<code>Object.preventExtensions()</code>中被调用。对应的反射API方法为<code>Reflect.preventExtensions()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">preventExtensions</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;preventExtensions()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.preventExtensions(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(proxy);</span><br><span class="line"><span class="comment">// preventExtensions()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回布尔值，表示<code>target</code>是否已经不可扩展。返回非布尔值会被转型为布尔值。</li><li>拦截的操作<ul><li><code>Object.preventExtensions(proxy)</code></li><li><code>Reflect.preventExtensions(proxy)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li></ul></li><li>捕获器不变式<ul><li>如果<code>Object.isExtensible(proxy)</code>是<code>false</code>，则处理程序必须返回<code>true</code>。<h3 id="9-2-12apply"><a href="#9-2-12apply" class="headerlink" title="9.2.12apply()"></a>9.2.12<code>apply()</code></h3></li></ul></li></ol><p><code>apply()</code>捕获器会在调用函数时中被调用。对应的反射API方法为<code>Reflect.apply()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = <span class="function">() =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">target, thisArg, ...argumentsList</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;apply()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy();  <span class="comment">// apply()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：返回值无限制。</li><li>拦截的操作<ul><li><code>proxy(...argumentsList)</code></li><li><code>Function.prototype.apply(thisArg, argumentsList)</code></li><li><code>Function.prototype.call(thisArg, ...argumentsList)</code></li><li><code>Reflect.apply(target, thisArgument, argumentsList)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标对象。</li><li><code>thisArg</code>：调用函数时的<code>this</code>参数。</li><li><code>argumentsList</code>：调用函数时的参数列表</li></ul></li><li>捕获器不变式<ul><li><code>target</code>必须是一个函数对象。<h3 id="9-2-13construct"><a href="#9-2-13construct" class="headerlink" title="9.2.13construct()"></a>9.2.13<code>construct()</code></h3></li></ul></li></ol><p><code>construct()</code>捕获器会在<code>new</code>操作符中被调用。对应的反射API方法为<code>Reflect.construct()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTarget = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myTarget, &#123;</span><br><span class="line">  <span class="function"><span class="title">construct</span>(<span class="params">target, argumentsList, newTarget</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;construct()&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.construct(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> proxy;</span><br><span class="line"><span class="comment">// construct()</span></span><br></pre></td></tr></table></figure><ol><li>返回值：必须返回一个对象。</li><li>拦截的操作<ul><li><code>new proxy(...argumentsList)</code></li><li><code>Reflect.construct(target, argumentsList, newTarget)</code></li></ul></li><li>捕获器处理程序参数<ul><li><code>target</code>：目标构造函数。</li><li><code>argumentsList</code>：传给目标构造函数的参数列表。</li><li><code>newTarget</code>：最初被调用的构造函数。</li></ul></li><li>捕获器不变式<ul><li><code>target</code>必须可以用作构造函数。<h2 id="9-3-代理模式"><a href="#9-3-代理模式" class="headerlink" title="9.3　代理模式"></a>9.3　代理模式</h2></li></ul></li></ol><p>使用代理可以在代码中实现一些有用的编程模式。</p><h3 id="9-3-1-跟踪属性访问"><a href="#9-3-1-跟踪属性访问" class="headerlink" title="9.3.1　跟踪属性访问"></a>9.3.1　跟踪属性访问</h3><p>通过捕获<code>get</code>、<code>set</code>和<code>has</code>等操作，可以知道对象属性什么时候被访问、被查询。把实现相应捕获器的某个对象代理放到应用中，可以监控这个对象何时在何处被访问过：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Jake&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Getting <span class="subst">$&#123;property&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Setting <span class="subst">$&#123;property&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.name;     <span class="comment">// Getting name</span></span><br><span class="line">proxy.age = <span class="number">27</span>; <span class="comment">// Setting age=27</span></span><br></pre></td></tr></table></figure><h3 id="9-3-2-隐藏属性"><a href="#9-3-2-隐藏属性" class="headerlink" title="9.3.2　隐藏属性"></a>9.3.2　隐藏属性</h3><p>代理的内部实现对外部代码是不可见的，因此要隐藏目标对象上的属性也轻而易举。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hiddenProperties = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> targetObject = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="number">2</span>,</span><br><span class="line">  baz: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(targetObject, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hiddenProperties.includes(property)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hiddenProperties.includes(property)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.has(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// get()</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.foo);  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.bar);  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.baz);  <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// has()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> proxy);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span> <span class="keyword">in</span> proxy);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;baz&#x27;</span> <span class="keyword">in</span> proxy);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="9-3-3-属性验证"><a href="#9-3-3-属性验证" class="headerlink" title="9.3.3　属性验证"></a>9.3.3　属性验证</h3><p>因为所有赋值操作都会触发<code>set()</code>捕获器，所以可以根据所赋的值决定是允许还是拒绝赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">  onlyNumbersGoHere: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.onlyNumbersGoHere = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.onlyNumbersGoHere);  <span class="comment">// 1</span></span><br><span class="line">proxy.onlyNumbersGoHere = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.onlyNumbersGoHere);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="9-3-4-函数与构造函数参数验证"><a href="#9-3-4-函数与构造函数参数验证" class="headerlink" title="9.3.4　函数与构造函数参数验证"></a>9.3.4　函数与构造函数参数验证</h3><p>跟保护和验证对象属性类似，也可对函数和构造函数参数进行审查。比如，可以让函数只接收某种类型的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">median</span>(<span class="params">...nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> nums.sort()[<span class="built_in">Math</span>.floor(nums.length / <span class="number">2</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(median, &#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">target, thisArg, argumentsList</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> argumentsList) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Non-number argument provided&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(...arguments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy(<span class="number">4</span>, <span class="string">&#x27;7&#x27;</span>, <span class="number">1</span>));<span class="comment">//Error: Non-number argument provided</span></span><br></pre></td></tr></table></figure><p>类似地，可以要求实例化时必须给构造函数传参：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id_ = id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;</span><br><span class="line">  <span class="function"><span class="title">construct</span>(<span class="params">target, argumentsList, newTarget</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argumentsList[<span class="number">0</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;User cannot be instantiated without id&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.construct(...arguments);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> proxy(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> proxy();  <span class="comment">// Error: User cannot be instantiated without id</span></span><br></pre></td></tr></table></figure><h3 id="9-3-5-数据绑定与可观察对象"><a href="#9-3-5-数据绑定与可观察对象" class="headerlink" title="9.3.5　数据绑定与可观察对象"></a>9.3.5　数据绑定与可观察对象</h3><p>通过代理可以把运行时中原本不相关的部分联系到一起。这样就可以实现各种模式，从而让不同的代码互操作。</p><p>比如，可以将被代理的类绑定到一个全局实例集合，让所有创建的实例都被添加到这个集合中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = [];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name_ = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(User, &#123;</span><br><span class="line">  <span class="function"><span class="title">construct</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUser = <span class="built_in">Reflect</span>.construct(...arguments);</span><br><span class="line">    userList.push(newUser);</span><br><span class="line">    <span class="keyword">return</span> newUser;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> proxy(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> proxy(<span class="string">&#x27;Jacob&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> proxy(<span class="string">&#x27;Jingleheimerschmidt&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(userList); <span class="comment">// [User &#123;&#125;, User &#123;&#125;, User&#123;&#125;]</span></span><br></pre></td></tr></table></figure><p>另外，还可以把集合绑定到一个事件分派程序，每次插入新实例时都会发送消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emit</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(newValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(userList, &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">target, property, value, receiver</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      emit(<span class="built_in">Reflect</span>.get(target, property, receiver));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.push(<span class="string">&#x27;John&#x27;</span>);  <span class="comment">// John</span></span><br><span class="line">proxy.push(<span class="string">&#x27;Jacob&#x27;</span>); <span class="comment">// Jacob</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ECMAScript 6新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。具体地说，可以给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。在对目标对象的各种操作影响目标对象之前，可以在代理对象中对这些操作加以控制。&lt;/p&gt;
&lt;bl</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript高级程序设计(第四版)" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    <category term="09-代理与反射" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/09-%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>08-对象、类与面向对象编程</title>
    <link href="http://example.com/2021/04/07/note/JavaScript/08-%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2021/04/07/note/JavaScript/08-%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2021-04-07T14:21:33.811Z</published>
    <updated>2021-04-07T14:34:46.927Z</updated>
    
    <content type="html"><![CDATA[<p>ECMA-262将对象定义为一组属性的无序集合。严格来说，这意味着对象就是一组没有特定顺序的值。对象的每个属性或方法都由一个名称来标识，这个名称映射到一个值。</p><h2 id="8-1-理解对象"><a href="#8-1-理解对象" class="headerlink" title="8.1　理解对象"></a>8.1　理解对象</h2><p>创建自定义对象的通常方式是创建<code>Object</code>的一个新实例，然后再给它添加属性和方法，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">person.age = <span class="number">29</span>;</span><br><span class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>早期JavaScript开发者频繁使用这种方式创建新对象。现在对象字面量创建更流行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  age: <span class="number">29</span>,</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="8-1-1-属性的类型"><a href="#8-1-1-属性的类型" class="headerlink" title="8.1.1　属性的类型"></a>8.1.1　属性的类型</h3><p>ECMA-262使用一些内部特性来描述属性的特征。这些特性是由为JavaScript实现引擎的规范定义的。因此，开发者不能在JavaScript中直接访问这些特性。为了将某个特性标识为内部特性，规范会用两个中括号把特性的名称括起来，比如<code>[[Enumerable]]</code>。</p><p>属性分两种：数据属性和访问器属性。</p><h4 id="8-1-1-1-数据属性"><a href="#8-1-1-1-数据属性" class="headerlink" title="8.1.1.1   数据属性"></a><strong>8.1.1.1   数据属性</strong></h4><p>数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据属性有4个特性描述它们的行为。</p><ol><li><code>[[Configurable]]</code>：表示属性是否可以通过<code>delete</code>删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。默认情况下，所有直接定义在对象上的属性的这个特性都是<code>true</code>。</li><li><code>[[Enumerable]]</code>：表示属性是否可以通过<code>for-in</code>循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是<code>true</code>。</li><li><code>[[Writable]]</code>：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是<code>true</code>。</li><li><code>[[Value]]</code>：包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性的默认值为<code>undefined</code>。</li></ol><p>要修改属性的默认特性，就必须使用<code>Object.defineProperty()</code>方法。这个方法接收3个参数：要给其添加属性的对象、属性的名称和一个描述符对象。最后一个参数，即描述符对象上的属性可以包含：<code>configurable</code>、<code>enumerable</code>、<code>writable</code>和<code>value</code>，跟相关特性的名称一一对应。根据要修改的特性，可以设置其中一个或多个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line">person.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p>在非严格模式下尝试给这个属性重新赋值会被忽略。在严格模式下，尝试修改只读属性的值会抛出错误。<br>类似的规则也适用于创建不可配置的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p>非严格模式下对这个属性调用<code>delete</code>没有效果，严格模式下会抛出错误。此外，一个属性被定义为不可配置之后，就不能再变回可配置的了。再次调用<code>Object.defineProperty()</code>并修改任何非<code>writable</code>属性会导致错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 抛出错误</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  value: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>因此，虽然可以对同一个属性多次调用<code>Object.defineProperty()</code>，但在把<code>configurable</code>设置为<code>false</code>之后就会受限制。<br>在调用<code>Object.defineProperty()</code>定义一个新的属性特性，<code>configurable</code>、<code>enumerable</code>和<code>writable</code>的值如果不指定，则都默认为<code>false</code>。多数情况下，可能都不需要<code>Object.defineProperty()</code>提供的这些强大的设置，但要理解JavaScript对象，就要理解这些概念。</p><h4 id="8-1-1-2-访问器属性"><a href="#8-1-1-2-访问器属性" class="headerlink" title="8.1.1.2   访问器属性"></a><strong>8.1.1.2   访问器属性</strong></h4><p>访问器属性不包含数据值。相反，它们包含一个获取（getter）函数和一个设置（setter）函数，不过这两个函数不是必需的。在读取访问器属性时，会调用获取函数，这个函数的责任就是返回一个有效的值。在写入访问器属性时，会调用设置函数并传入新值，这个函数必须决定对数据做出什么修改。访问器属性有4个特性描述它们的行为。</p><ol><li><code>[[Configurable]]</code>：表示属性是否可以通过<code>delete</code>删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。默认情况下，所有直接定义在对象上的属性的这个特性都是<code>true</code>。</li><li><code>[[Enumerable]]</code>：表示属性是否可以通过<code>for-in</code>循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是<code>true</code>。</li><li><code>[[Get]]</code>：获取函数，在读取属性时调用。默认值为<code>undefined</code>。</li><li><code>[[Set]]</code>：设置函数，在写入属性时调用。默认值为<code>undefined</code>。</li></ol><p>访问器属性是不能直接定义的，必须使用<code>Object.defineProperty()</code>。访问器属性的典型使用场景，即设置一个属性值会导致一些其他变化发生。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象，包含伪私有成员year_和公共成员edition</span></span><br><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">  year_: <span class="number">2017</span>,</span><br><span class="line">  edition: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.year_;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.year_ = newValue;</span><br><span class="line">      <span class="built_in">this</span>.edition += newValue - <span class="number">2017</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.year = <span class="number">2018</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book.edition); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>获取函数和设置函数不一定都要定义。只定义获取函数意味着属性是只读的，尝试修改属性会被忽略。在严格模式下，尝试写入只定义了获取函数的属性会抛出错误。类似地，只有一个设置函数的属性是不能读取的，非严格模式下读取会返回<code>undefined</code>，严格模式下会抛出错误。<br>在不支持<code>Object.defineProperty()</code>的浏览器中没有办法修改<code>[[Configurable]]</code>或<code>[[Enumerable]]</code>。</p><blockquote><p><strong>注意</strong>在ECMAScript 5以前，开发者会使用两个非标准的访问创建访问器属性：<code>__defineGetter__()</code>和<code>__defineSetter__()</code>。</p></blockquote><h3 id="8-1-2-定义多个属性"><a href="#8-1-2-定义多个属性" class="headerlink" title="8.1.2　定义多个属性"></a>8.1.2　定义多个属性</h3><p>在一个对象上同时定义多个属性的可能性是非常大的。为此，ECMAScript提供了<code>Object.defineProperties()</code>方法。这个方法可以通过多个描述符一次性定义多个属性。它接收两个参数：要为之添加或修改属性的对象和另一个描述符对象，其属性与要添加或修改的属性一一对应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">  year_: &#123;</span><br><span class="line">    value: <span class="number">2017</span></span><br><span class="line">  &#125;,</span><br><span class="line">  edition: &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  year: &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.year_;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.year_ = newValue;</span><br><span class="line">        <span class="built_in">this</span>.edition += newValue - <span class="number">2017</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-1-3-读取属性的特性"><a href="#8-1-3-读取属性的特性" class="headerlink" title="8.1.3　读取属性的特性"></a>8.1.3　读取属性的特性</h3><p>使用<code>Object.getOwnPropertyDescriptor()</code>方法可以取得指定属性的属性描述符。这个方法接收两个参数：属性所在的对象和要取得其描述符的属性名。返回值是一个对象，对于访问器属性包含<code>configurable</code>、<code>enumerable</code>、<code>get</code>和<code>set</code>属性，对于数据属性包含<code>configurable</code>、<code>enumerable</code>、<code>writable</code>和<code>value</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">  year_: &#123;</span><br><span class="line">    value: <span class="number">2017</span></span><br><span class="line">  &#125;,</span><br><span class="line">  edition: &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  year: &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.year_;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.year_ = newValue;</span><br><span class="line">        <span class="built_in">this</span>.edition += newValue - <span class="number">2017</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">&quot;year_&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value);          <span class="comment">// 2017</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.configurable);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.get);     <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">&quot;year&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value);          <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.enumerable);     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.get);     <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><p>ECMAScript 2017新增了<code>Object.getOwnPropertyDescriptors()</code>静态方法。这个方法实际上会在每个自有属性上调用<code>Object.getOwnPropertyDescriptor()</code>并在一个新对象中返回它们。对于前面的例子，使用这个静态方法会返回如下对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//book属性定义同上</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptors(book));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   edition: &#123;</span></span><br><span class="line"><span class="comment">//     configurable: false,</span></span><br><span class="line"><span class="comment">//     enumerable: false,</span></span><br><span class="line"><span class="comment">//     value: 1,</span></span><br><span class="line"><span class="comment">//     writable: false</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   year: &#123;</span></span><br><span class="line"><span class="comment">//     configurable: false,</span></span><br><span class="line"><span class="comment">//     enumerable: false,</span></span><br><span class="line"><span class="comment">//     get: f(),</span></span><br><span class="line"><span class="comment">//     set: f(newValue),</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   year_: &#123;</span></span><br><span class="line"><span class="comment">//     configurable: false,</span></span><br><span class="line"><span class="comment">//     enumerable: false,</span></span><br><span class="line"><span class="comment">//     value: 2017,</span></span><br><span class="line"><span class="comment">//     writable: false</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-1-4-合并对象"><a href="#8-1-4-合并对象" class="headerlink" title="8.1.4　合并对象"></a>8.1.4　合并对象</h3><p>“合并”（merge）两个对象就是把源对象所有的本地属性一起复制到目标对象上，这种操作也被称为“混入”（mixin），因为目标对象通过混入源对象的属性得到了增强。</p><p>ECMAScript 6专门为合并对象提供了<code>Object.assign()</code>方法。这个方法接收一个目标对象和一个或多个源对象作为参数，然后将每个源对象中可枚举（<code>Object.propertyIsEnumerable()</code>返回<code>true</code>）和自有（<code>Object.hasOwnProperty()</code>返回<code>true</code>）属性复制到目标对象。以字符串和符号为键的属性会被复制。对每个符合条件的属性，这个方法会使用源对象上的<code>[[Get]]</code>取得属性的值，然后使用目标对象上的<code>[[Set]]</code>设置属性的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dest, src, result;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dest = &#123;&#125;;</span><br><span class="line">src = &#123; <span class="attr">id</span>: <span class="string">&#x27;src&#x27;</span> &#125;;</span><br><span class="line">result = <span class="built_in">Object</span>.assign(dest, src);</span><br><span class="line"><span class="comment">// Object.assign修改目标对象，也会返回修改后的目标对象</span></span><br><span class="line"><span class="built_in">console</span>.log(dest === result); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(dest !== src);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(result);          <span class="comment">// &#123; id: src &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(dest);            <span class="comment">// &#123; id: src &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多个源对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dest = &#123;&#125;;</span><br><span class="line">result = <span class="built_in">Object</span>.assign(dest, &#123; <span class="attr">a</span>: <span class="string">&#x27;foo&#x27;</span> &#125;, &#123; <span class="attr">b</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &#123; a: foo, b: bar &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取函数与设置函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dest = &#123;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">a</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Invoked dest setter with param <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">src = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">a</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Invoked src getter&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(dest, src);</span><br><span class="line"><span class="comment">// 调用src的获取方法</span></span><br><span class="line"><span class="comment">// 调用dest的设置方法并传入参数&quot;foo&quot;</span></span><br><span class="line"><span class="comment">// 因为这里的设置函数不执行赋值操作，所以实际上并没有把值转移过来</span></span><br><span class="line"><span class="built_in">console</span>.log(dest); <span class="comment">// &#123; set a(val) &#123;...&#125; &#125;</span></span><br></pre></td></tr></table></figure><p><code>Object.assign()</code>实际上对每个源对象执行的是浅复制。如果多个源对象都有相同的属性，则使用最后一个复制的值。此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目标对象。也就是说，不能在两个对象间转移获取函数和设置函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dest, src, result;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dest = &#123; <span class="attr">id</span>: <span class="string">&#x27;dest&#x27;</span> &#125;;</span><br><span class="line">result = <span class="built_in">Object</span>.assign(dest, &#123; <span class="attr">id</span>: <span class="string">&#x27;src1&#x27;</span>, <span class="attr">a</span>: <span class="string">&#x27;foo&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;src2&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// Object.assign会覆盖重复的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &#123; id: src2, a: foo, b: bar &#125;</span></span><br><span class="line"><span class="comment">// 可以通过目标对象上的设置函数观察到覆盖的过程：</span></span><br><span class="line">dest = &#123;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">id</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(dest, &#123; <span class="attr">id</span>: <span class="string">&#x27;first&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;second&#x27;</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">&#x27;third&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// second</span></span><br><span class="line"><span class="comment">// third</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dest = &#123;&#125;;</span><br><span class="line">src = &#123; <span class="attr">a</span>: &#123;&#125; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(dest, src);</span><br><span class="line"><span class="comment">// 浅复制意味着只会复制对象的引用</span></span><br><span class="line"><span class="built_in">console</span>.log(dest);              <span class="comment">// &#123; a :&#123;&#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(dest.a === src.a);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果赋值期间出错，则操作会中止并退出，同时抛出错误。<code>Object.assign()</code>没有“回滚”之前赋值的概念，因此这个方法可能只会完成部分复制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dest, src, result;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">dest = &#123;&#125;;</span><br><span class="line">src = &#123;</span><br><span class="line">  a: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">b</span>() &#123;</span><br><span class="line">    <span class="comment">// Object.assign()在调用这个获取函数时会抛出错误</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  c: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.assign(dest, src);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line"><span class="comment">// Object.assign()没办法回滚已经完成的修改</span></span><br><span class="line"><span class="comment">// 因此在抛出错误之前，目标对象上已经完成的修改会继续存在：</span></span><br><span class="line"><span class="built_in">console</span>.log(dest); <span class="comment">// &#123; a: foo &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-1-5-对象标识及相等判定"><a href="#8-1-5-对象标识及相等判定" class="headerlink" title="8.1.5　对象标识及相等判定"></a>8.1.5　对象标识及相等判定</h3><p>在ECMAScript 6之前，有些特殊情况即使是<code>===</code>操作符也无能为力：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这些是===符合预期的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span> === <span class="number">2</span>);   <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 这些情况在不同JavaScript引擎中表现不同，但仍被认为相等</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === -<span class="number">0</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">0</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">0</span> === <span class="number">0</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 要确定NaN的相等性，必须使用极为讨厌的isNaN()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>为此，ECMAScript 6规范新增了<code>Object.is()</code>，这个方法与<code>===</code>很像，但同时也考虑到了上述边界情形。这个方法必须接收两个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">true</span>, <span class="number">1</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;));   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>));   <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的0、-0、+0相等/不等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>));   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">0</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(-<span class="number">0</span>, <span class="number">0</span>));    <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的NaN相等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要检查超过两个值，递归地利用相等性传递即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursivelyCheckEqual</span>(<span class="params">x, ...rest</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.is(x, rest[<span class="number">0</span>]) &amp;&amp;</span><br><span class="line">         (rest.length &lt; <span class="number">2</span> || recursivelyCheckEqual(...rest));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-6-增强的对象语法"><a href="#8-1-6-增强的对象语法" class="headerlink" title="8.1.6　增强的对象语法"></a>8.1.6　增强的对象语法</h3><p>本节介绍的所有对象语法同样适用于ECMAScript 6的类。</p><h4 id="8-1-6-1-属性值简写"><a href="#8-1-6-1-属性值简写" class="headerlink" title="8.1.6.1   属性值简写"></a><strong>8.1.6.1   属性值简写</strong></h4><p>在给对象添加变量的时候，经常会发现属性名和变量名是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: name</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;Matt&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>而简写属性名只要使用变量名（不用再写冒号）就会自动被解释为同名的属性键。如果没有找到同名变量，则会抛出<code>ReferenceError</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;Matt&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>代码压缩程序会在不同作用域间保留属性名，以防止找不到引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = makePerson(<span class="string">&#x27;Matt&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);  <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><p>在这里，即使参数标识符只限定于函数作用域，编译器也会保留初始的<code>name</code>标识符。如果使用Google Closure编译器压缩，那么函数参数会被缩短，而属性名不变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePerson</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: a</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = makePerson(<span class="string">&quot;Matt&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><h4 id="8-1-6-2-可计算属性"><a href="#8-1-6-2-可计算属性" class="headerlink" title="8.1.6.2   可计算属性"></a><strong>8.1.6.2   可计算属性</strong></h4><p>在引入可计算属性之前，如果想使用变量的值作为属性，那么必须先声明对象，然后使用中括号语法来添加属性。也就是说，不能在对象字面量中直接动态命名属性。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[nameKey] = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;Matt&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>有了可计算属性，就可以在对象字面量中完成动态属性赋值。中括号包围的对象属性键告诉运行时将其作为JavaScript表达式而不是字符串来求值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [nameKey]: <span class="string">&#x27;Matt&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;Matt&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>因为被当作JavaScript表达式求值，所以可计算属性可以是复杂的表达式，在实例化时再求值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ageKey = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> uniqueToken = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueKey</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;key&#125;</span>_<span class="subst">$&#123;uniqueToken++&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [getUniqueKey(nameKey)]: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  [getUniqueKey(ageKey)]: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person);  <span class="comment">// &#123; name_0: &#x27;Matt&#x27;, age_1: 27 &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>可计算属性表达式中抛出任何错误都会中断对象创建。如果表达式抛出错误，那么之前完成的计算是不能回滚的。</p><h4 id="8-1-6-3-简写方法名"><a href="#8-1-6-3-简写方法名" class="headerlink" title="8.1.6.3   简写方法名"></a><strong>8.1.6.3   简写方法名</strong></h4></blockquote><p>在给对象定义方法时，之前通常都要写一个方法名、冒号，然后再引用一个匿名函数表达式，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.sayName(<span class="string">&#x27;Matt&#x27;</span>); <span class="comment">// My name is Matt</span></span><br></pre></td></tr></table></figure><p>新的简写方法的语法遵循同样的模式，但开发者要放弃给函数表达式命名（不过给作为方法的函数命名通常没什么用）。相应地，这样也可以明显缩短方法声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.sayName(<span class="string">&#x27;Matt&#x27;</span>); <span class="comment">// My name is Matt</span></span><br></pre></td></tr></table></figure><p>简写方法名对获取函数和设置函数也是适用的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name_: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name_;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name_ = name;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;<span class="built_in">this</span>.name_&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">person.sayName(); <span class="comment">// My name is Matt</span></span><br></pre></td></tr></table></figure><p>简写方法名与可计算属性键相互兼容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> methodKey = <span class="string">&#x27;sayName&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  [methodKey](name) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.sayName(<span class="string">&#x27;Matt&#x27;</span>); <span class="comment">// My name is Matt</span></span><br></pre></td></tr></table></figure><h3 id="8-1-7-对象解构"><a href="#8-1-7-对象解构" class="headerlink" title="8.1.7　对象解构"></a>8.1.7　对象解构</h3><p>对象解构语法，可以在一条语句中使用嵌套数据实现一个或多个赋值操作。简单地说，对象解构就是使用与对象匹配的结构来实现对象属性赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用对象解构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> personName = person.name,</span><br><span class="line">    personAge = person.age;</span><br><span class="line"><span class="built_in">console</span>.log(personName); <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(personAge);  <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>使用解构，可以在一个类似对象字面量的结构中，声明多个变量，同时执行多个赋值操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用对象解构</span><br><span class="line">let person &#x3D; &#123;</span><br><span class="line">  name: &#39;Matt&#39;,</span><br><span class="line">  age: 27</span><br><span class="line">&#125;;</span><br><span class="line">let &#123; name: personName, age: personAge &#125; &#x3D; person;</span><br><span class="line">console.log(personName);  &#x2F;&#x2F; Matt</span><br><span class="line">console.log(personAge);   &#x2F;&#x2F; 27</span><br></pre></td></tr></table></figure><p>如果想让变量直接使用属性的名称，那么还可以使用简写语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name);  <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(age);   <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>解构赋值不一定与对象的属性匹配。赋值的时候可以忽略某些属性，而如果引用的属性不存在，则该变量的值就是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, job &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name);  <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(job);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>也可以在解构赋值的同时定义默认值，这适用于前面刚提到的引用的属性不存在于源对象中的情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, job=<span class="string">&#x27;Software engineer&#x27;</span> &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(job);  <span class="comment">// Software engineer</span></span><br></pre></td></tr></table></figure><p>解构在内部使用函数<code>ToObject()</code>（不能在运行时环境中直接访问）把源数据结构转换为对象。这意味着在对象解构的上下文中，原始值会被当成对象。这也意味着（根据<code>ToObject()</code>的定义），<code>null</code>和<code>undefined</code>不能被解构，否则会抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; length &#125; = <span class="string">&#x27;foobar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(length);        <span class="comment">// 6</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">constructor</span>: c &#125; = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c === <span class="built_in">Number</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> &#123; _ &#125; = <span class="literal">null</span>;           <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">let</span> &#123; _ &#125; = <span class="literal">undefined</span>;      <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>解构并不要求变量必须在解构表达式中声明。但如果是给事先声明的变量赋值，则赋值表达式必须包含在一对括号中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> personName, personAge;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line">(&#123;<span class="attr">name</span>: personName, <span class="attr">age</span>: personAge&#125; = person);</span><br><span class="line"><span class="built_in">console</span>.log(personName, personAge); <span class="comment">// Matt, 27</span></span><br></pre></td></tr></table></figure><h4 id="8-1-7-1-嵌套解构"><a href="#8-1-7-1-嵌套解构" class="headerlink" title="8.1.7.1   嵌套解构"></a><strong>8.1.7.1   嵌套解构</strong></h4><p>解构对于引用嵌套的属性或赋值目标没有限制。为此，可以通过解构来复制对象属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  job: &#123;</span><br><span class="line">    title: <span class="string">&#x27;Software engineer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> personCopy = &#123;&#125;;</span><br><span class="line">　</span><br><span class="line">(&#123;</span><br><span class="line">  name: personCopy.name,</span><br><span class="line">  job: personCopy.job</span><br><span class="line">&#125; = person);</span><br><span class="line"><span class="comment">// 因为一个对象的引用被赋值给personCopy，所以修改person.job对象的属性也会影响personCopy</span></span><br><span class="line">person.job.title = <span class="string">&#x27;Hacker&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// &#123; name: &#x27;Matt&#x27;, job: &#123; title: &#x27;Hacker&#x27; &#125; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(personCopy);<span class="comment">//&#123; name: &#x27;Matt&#x27;, job: &#123; title: &#x27;Hacker&#x27; &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>解构赋值可以使用嵌套结构，以匹配嵌套的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  job: &#123;</span><br><span class="line">    title: <span class="string">&#x27;Software engineer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 声明title变量并将person.job.title的值赋给它</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">job</span>: &#123; title &#125; &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(title); <span class="comment">// Software engineer</span></span><br></pre></td></tr></table></figure><p>源对象的外层属性没有定义的情况下不能使用嵌套解构，会抛出错误，而不是赋值为undefined。目标对象的外层属性没有定义也同样会抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  job: &#123;</span><br><span class="line">    title: <span class="string">&#x27;Software engineer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> personCopy = &#123;&#125;;</span><br><span class="line"><span class="comment">// foo在源对象上是undefined</span></span><br><span class="line">(&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: personCopy.bar</span><br><span class="line">  &#125;</span><br><span class="line">&#125; = person);</span><br><span class="line"><span class="comment">// TypeError: Cannot destructure property &#x27;bar&#x27; of &#x27;undefined&#x27; or &#x27;null&#x27;.</span></span><br><span class="line"><span class="comment">// job在目标对象上是undefined</span></span><br><span class="line">(&#123;</span><br><span class="line">  job: &#123;</span><br><span class="line">    title: personCopy.job.title</span><br><span class="line">  &#125;</span><br><span class="line">&#125; = person);</span><br><span class="line"><span class="comment">// TypeError: Cannot set property &#x27;title&#x27; of undefined</span></span><br></pre></td></tr></table></figure><h4 id="8-1-7-2-部分解构"><a href="#8-1-7-2-部分解构" class="headerlink" title="8.1.7.2   部分解构"></a><strong>8.1.7.2   部分解构</strong></h4><p>涉及多个属性的解构赋值是一个输出无关的顺序化操作。如果一个解构表达式涉及多个赋值，开始的赋值成功而后面的赋值出错，则整个解构赋值只会完成一部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> personName, personBar, personAge;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// person.foo是undefined，因此会抛出错误</span></span><br><span class="line">  (&#123;<span class="attr">name</span>: personName, <span class="attr">foo</span>: &#123; <span class="attr">bar</span>: personBar &#125;, <span class="attr">age</span>: personAge&#125; = person);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(personName, personBar, personAge);</span><br><span class="line"><span class="comment">// Matt, undefined, undefined</span></span><br></pre></td></tr></table></figure><h4 id="8-1-7-3-参数上下文匹配"><a href="#8-1-7-3-参数上下文匹配" class="headerlink" title="8.1.7.3   参数上下文匹配"></a><strong>8.1.7.3   参数上下文匹配</strong></h4><p>在函数参数列表中也可以进行解构赋值。对参数的解构赋值不会影响<code>arguments</code>对象，但可以在函数签名中声明在函数体内使用局部变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">  age: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson</span>(<span class="params">foo, &#123;name, age&#125;, bar</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printPerson2</span>(<span class="params">foo, &#123;name: personName, age: personAge&#125;, bar</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(personName, personAge);</span><br><span class="line">&#125;</span><br><span class="line">printPerson(<span class="string">&#x27;1st&#x27;</span>, person, <span class="string">&#x27;2nd&#x27;</span>);</span><br><span class="line"><span class="comment">// [&#x27;1st&#x27;, &#123; name: &#x27;Matt&#x27;, age: 27 &#125;, &#x27;2nd&#x27;]</span></span><br><span class="line"><span class="comment">// &#x27;Matt&#x27;, 27</span></span><br><span class="line">printPerson2(<span class="string">&#x27;1st&#x27;</span>, person, <span class="string">&#x27;2nd&#x27;</span>);</span><br><span class="line"><span class="comment">// [&#x27;1st&#x27;, &#123; name: &#x27;Matt&#x27;, age: 27 &#125;, &#x27;2nd&#x27;]</span></span><br><span class="line"><span class="comment">// &#x27;Matt&#x27;, 27</span></span><br></pre></td></tr></table></figure><h2 id="8-2-创建对象"><a href="#8-2-创建对象" class="headerlink" title="8.2　创建对象"></a>8.2　创建对象</h2><p>虽然使用<code>Object</code>构造函数或对象字面量可以方便地创建对象，但不足在于创建具有同样接口的多个对象需要重复编写很多代码。</p><h3 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1　概述"></a>8.2.1　概述</h3><p>ECMAScript 5.1并没有正式支持面向对象的结构，比如类或继承。但是，巧妙地运用原型式继承可以成功地模拟同样的行为。</p><p>ECMAScript 6开始正式支持类和继承。不过，ES6的类是封装了ES5.1构造函数加原型继承的语法糖而已。</p><blockquote><p><strong>注意</strong>在介绍ES6的类之前，下面会循序渐进地介绍被类取代的那些底层概念。当然采用面向对象编程模式的JavaScript代码还是应该使用ECMAScript 6的类。</p></blockquote><h3 id="8-2-2-工厂模式"><a href="#8-2-2-工厂模式" class="headerlink" title="8.2.2　工厂模式"></a>8.2.2　工厂模式</h3><p>工厂模式是一种设计模式，用于抽象创建特定对象的过程。下面的例子展示了一种按照特定接口创建对象的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.age = age;</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = createPerson(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = createPerson(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br></pre></td></tr></table></figure><p>这种工厂模式虽然可以解决创建多个类似对象的问题，但没有解决对象标识问题（即新创建的对象是什么类型）。</p><h3 id="8-2-3-构造函数模式"><a href="#8-2-3-构造函数模式" class="headerlink" title="8.2.3　构造函数模式"></a>8.2.3　构造函数模式</h3><p>ECMAScript中的构造函数是用于创建特定类型对象的。比如像<code>Object</code>和<code>Array</code>这样的原生构造函数。当然也可以自定义构造函数，以函数的形式为自己的对象类型定义属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line">person1.sayName();  <span class="comment">// Nicholas</span></span><br><span class="line">person2.sayName();  <span class="comment">// Greg</span></span><br></pre></td></tr></table></figure><p>实际上，<code>Person()</code>内部的代码跟<code>createPerson()</code>基本是一样的，只是有如下区别。</p><ul><li>没有显式地创建对象。</li><li>属性和方法直接赋值给了<code>this</code>。</li><li>没有<code>return</code>。</li></ul><p>按照惯例，构造函数名称的首字母都是要大写的，非构造函数则以小写字母开头。有助于区分构造函数和普通函数。</p><p>要创建<code>Person</code>的实例，应使用<code>new</code>操作符。以这种方式调用构造函数会执行如下操作。</p><ol><li>在内存中创建一个新对象。</li><li>这个新对象内部的<code>[[Prototype]]</code>特性被赋值为构造函数的<code>prototype</code>属性。</li><li>构造函数内部的<code>this</code>被赋值为这个新对象。</li><li>执行构造函数内部的代码（给新对象添加属性）。</li><li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</li></ol><p><code>person1</code>和<code>person2</code>分别保存着<code>Person</code>的不同实例。这两个对象都有一个<code>constructor</code>属性指向<code>Person</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1.constructor == Person);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.constructor == Person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>constructor</code>本来是用于标识对象类型的。不过，一般将<code>instanceof</code>操作符用于确定对象类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>定义自定义构造函数可以确保实例被标识为特定类型，构造函数不一定要写成函数声明的形式。赋值给变量的函数表达式也可以表示构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">person1.sayName();  <span class="comment">// Nicholas</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在实例化时，如果不想传参数，那么构造函数后面的括号可加可不加。只要有<code>new</code>操作符，就可以调用相应的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&quot;Jake&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person;</span><br><span class="line">person1.sayName();  <span class="comment">// Jake</span></span><br><span class="line">person2.sayName();  <span class="comment">// Jake</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="8-2-3-1-构造函数也是函数"><a href="#8-2-3-1-构造函数也是函数" class="headerlink" title="8.2.3.1   构造函数也是函数"></a><strong>8.2.3.1   构造函数也是函数</strong></h4><p>构造函数与普通函数唯一的区别就是调用方式不同。除此之外，构造函数也是函数。并没有把某个函数定义为构造函数的特殊语法。任何函数只要使用<code>new</code>操作符调用就是构造函数，而不使用<code>new</code>操作符调用的函数就是普通函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作为构造函数</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">person.sayName();    <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="comment">// 作为函数调用</span></span><br><span class="line">Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>, <span class="string">&quot;Doctor&quot;</span>);   <span class="comment">// 添加到window对象</span></span><br><span class="line"><span class="built_in">window</span>.sayName();    <span class="comment">// &quot;Greg&quot;</span></span><br><span class="line"><span class="comment">// 在另一个对象的作用域中调用</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Person.call(o, <span class="string">&quot;Kristen&quot;</span>, <span class="number">25</span>, <span class="string">&quot;Nurse&quot;</span>);</span><br><span class="line">o.sayName();   <span class="comment">// &quot;Kristen&quot;</span></span><br></pre></td></tr></table></figure><p>在调用一个函数而没有明确设置<code>this</code>值的情况下（即没有作为对象的方法调用，或者没有使用<code>call()</code>/<code>apply()</code>调用），<code>this</code>始终指向<code>Global</code>对象（在浏览器中就是<code>window</code>对象）。<br>通过<code>call()</code>或<code>apply()</code>调用函数，将特定对象指定为作用域。这里的调用将<code>Person()</code>内部的<code>this</code>值指向对象<code>o</code>。</p><h4 id="8-2-3-2-构造函数的问题"><a href="#8-2-3-2-构造函数的问题" class="headerlink" title="8.2.3.2   构造函数的问题"></a><strong>8.2.3.2   构造函数的问题</strong></h4><p>构造函数的主要问题在于，其定义的方法会在每个实例上都创建一遍。因此对前面的例子而言，<code>person1</code>和<code>person2</code>都有名为<code>sayName()</code>的方法，但这两个方法不是同一个<code>Function</code>的实例。</p><p>ECMAScript中的函数是对象，因此每次定义函数时，都会初始化一个对象。逻辑上讲，这个构造函数实际上是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sayName = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;console.log(this.name)&quot;</span>); <span class="comment">// 逻辑等价</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样理解这个构造函数可以更清楚地知道，每个<code>Person</code>实例都会有自己的<code>Function</code>实例用于显示<code>name</code>属性。<br>以这种方式创建函数会带来不同的作用域链和标识符解析。但创建新<code>Function</code>实例的机制是一样的。因此不同实例上的函数虽然同名却不相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>但都是做一样的事，所以没必要定义两个不同的<code>Function</code>实例。况且，<code>this</code>对象可以把函数与对象的绑定推迟到运行时。<br>可以把函数定义转移到构造函数外部，来解决这个问题，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.sayName = sayName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line">person1.sayName();  <span class="comment">// Nicholas</span></span><br><span class="line">person2.sayName();  <span class="comment">// Greg</span></span><br></pre></td></tr></table></figure><p>在构造函数内部，<code>sayName</code>属性中包含的只是一个指向外部函数的指针，所以<code>person1</code>和<code>person2</code>共享了定义在全局作用域上的<code>sayName()</code>函数。这样解决了相同逻辑的函数重复定义的问题，但因为那个函数实际上只能在一个对象上调用。如果这个对象需要多个方法，那么就要在全局作用域中定义多个函数。这会导致自定义类型引用的代码不能很好地聚集一起。这个新问题可以通过原型模式来解决。</p><h3 id="8-2-4-原型模式"><a href="#8-2-4-原型模式" class="headerlink" title="8.2.4　原型模式"></a>8.2.4　原型模式</h3><p>每个函数都会创建一个<code>prototype</code>属性，这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法。这个对象也就是通过调用构造函数创建的对象的原型。使用原型对象的好处是，在它上面定义的属性和方法可以被对象实例共享。原来在构造函数中直接赋给对象实例的值，可以直接赋值给它们的原型，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName(); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName(); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>使用函数表达式也可以：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.sayName();   <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person2.sayName();   <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.sayName == person2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="8-2-4-1-理解原型"><a href="#8-2-4-1-理解原型" class="headerlink" title="8.2.4.1   理解原型"></a><strong>8.2.4.1   理解原型</strong></h4><p>只要创建一个函数，就会按照特定的规则为这个函数创建一个<code>prototype</code>属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为<code>constructor</code>的属性，指回与之关联的构造函数。<code>Person.prototype.constructor</code>指向<code>Person</code>。然后，因构造函数而异，可能会给原型对象添加其他属性和方法。</p><p>在自定义构造函数时，原型对象默认只会获得<code>constructor</code>属性，其他的所有方法都继承自<code>Object</code>。每次调用构造函数创建一个新实例，这个实例的内部<code>[[Prototype]]</code>指针就会被赋值为构造函数的原型对象。脚本中没有访问这个<code>[[Prototype]]</code>特性的标准方式，但大部分会通过在每个对象上暴露<code>__proto__</code>属性来实现，通过这个属性可以访问对象的原型。关键在于理解这一点：实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数可以是函数表达式,也可以是函数声明，因此以下两种形式都可以：</span></span><br><span class="line"><span class="comment"> *   function Person() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *   let Person = function() &#123;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明之后，构造函数就有了一个与之关联的原型对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype);  <span class="comment">// Object</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   constructor: f Person(),</span></span><br><span class="line"><span class="comment">//   __proto__: Object</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如前所述，构造函数有一个prototype属性,引用其原型对象，而这个原型对象也有一个</span></span><br><span class="line"><span class="comment"> constructor属性，引用这个构造函数，两者循环引用：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">// true</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正常的原型链都会终止于Object的原型对象</span></span><br><span class="line"><span class="comment"> * Object原型的原型是null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype);   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   constructor: f Object(),</span></span><br><span class="line"><span class="comment">//   toString: ...</span></span><br><span class="line"><span class="comment">//   hasOwnProperty: ...</span></span><br><span class="line"><span class="comment">//   isPrototypeOf: ...</span></span><br><span class="line"><span class="comment">//   ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">　</span><br><span class="line">　</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(),</span><br><span class="line">    person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造函数、原型对象和实例</span></span><br><span class="line"><span class="comment"> * 是3个完全不同的对象：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 !== Person);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 !== Person.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype !== Person);  <span class="comment">// true</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 实例通过__proto__链接到原型对象，</span></span><br><span class="line"><span class="comment">  * 它实际上指向隐藏特性[[Prototype]]</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * 构造函数通过prototype属性链接到原型对象</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * 实例与构造函数没有直接联系，与原型对象有直接联系</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === Person.prototype);   <span class="comment">// true</span></span><br><span class="line">conosle.log(person1.__proto__.constructor === Person); <span class="comment">// true</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同一个构造函数创建的两个实例</span></span><br><span class="line"><span class="comment"> * 共享同一个原型对象：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="comment">// true</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * instanceof检查实例的原型链中是否包含指定构造函数的原型。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true </span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/04/07/tJNo94D86LqK71p.png"                      alt="010.png"                ></p><p><strong>图　8-1</strong></p><p>虽然不是所有实现都对外暴露了<code>[[Prototype]]</code>，但原型可以使用<code>isPrototypeOf()</code>方法确定一个实例的原型链中指向它。本质上，<code>isPrototypeOf()</code>会在传入参数的<code>[[Prototype]]</code>指向调用它的对象时返回<code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person1));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Object</code>类型有一个方法叫<code>Object.getPrototypeOf()</code>，返回参数的内部特性<code>[[Prototype]]</code>的值，可以方便地取得一个对象的原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Obj ect.getPrototypeOf(person1) == Person.prototype);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person1).name); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p><code>Object</code>类型还有一个<code>setPrototypeOf()</code>方法，可以向实例的私有特性<code>[[Prototype]]</code>写入一个新值。这样就可以重写一个对象的原型继承关系：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> biped = &#123;</span><br><span class="line">  numLegs: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Matt&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(person, biped);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);                              <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(person.numLegs);                           <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === biped);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>警告</strong><code>Object.setPrototypeOf()</code>可能会严重影响代码性能。</p></blockquote><p>为避免使用<code>Object.setPrototypeOf()</code>可能造成的性能下降，可以通过<code>Object.create()</code>来创建一个新对象，同时为其指定原型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> biped = &#123;</span><br><span class="line">  numLegs: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person = <span class="built_in">Object</span>.create(biped);</span><br><span class="line">person.name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);                              <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(person.numLegs);                           <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === biped);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="8-2-4-2-原型层级"><a href="#8-2-4-2-原型层级" class="headerlink" title="8.2.4.2   原型层级"></a><strong>8.2.4.2   原型层级</strong></h4><p>在通过对象访问属性时，会按照这个属性的名称开始搜索。搜索开始于对象实例本身，如果存在则返回对应的值，否则，则搜索会沿着指针进入原型对象，再返回对应的值。这就是原型用于在多个对象实例间共享属性和方法的原理。</p><blockquote><p><strong>注意</strong>前面提到的<code>constructor</code>属性只存在于原型对象，因此通过实例对象也是可以访问到的。</p></blockquote><p>虽然可以通过实例读取原型对象上的值，但不可能通过实例重写这些值。如果在实例上添加了一个与原型对象中同名的属性，那就会在实例上创建这个属性，这个属性会遮蔽原型对象上的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);  <span class="comment">// &quot;Greg&quot;，来自实例</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);  <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br></pre></td></tr></table></figure><p>只要给对象实例添加一个属性，这个属性就会<strong>遮蔽</strong>（shadow）原型对象上的同名属性，也就是虽然不会修改它，但会屏蔽对它的访问。即使在实例上把这个属性设置为<code>null</code>，也不会恢复它和原型的联系。不过，使用<code>delete</code>操作符可以完全删除实例上的这个属性，从而让标识符解析过程能够继续搜索原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);  <span class="comment">// &quot;Greg&quot;，来自实例</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name);  <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="keyword">delete</span> person1.name;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);  <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br></pre></td></tr></table></figure><p><code>hasOwnProperty()</code>方法用于确定某个属性是在实例上还是在原型对象上。这个方法是继承自<code>Object</code>的，会在属性存在于调用它的对象实例上时返回<code>true</code>，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// &quot;Greg&quot;，来自实例</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name); <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">delete</span> person1.name;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>ECMAScript的<code>Object.getOwnPropertyDescriptor()</code>方法只对实例属性有效。要取得原型属性的描述符，就必须直接在原型对象上调用<code>Object.getOwnPropertyDescriptor()</code>。</p><h4 id="8-2-4-3-原型和in操作符"><a href="#8-2-4-3-原型和in操作符" class="headerlink" title="8.2.4.3   原型和in操作符"></a><strong>8.2.4.3   原型和</strong><code>in</code>操作符</h4></blockquote><p>有两种方式使用<code>in</code>操作符：单独使用和在<code>for-in</code>循环中使用。在单独使用时，<code>in</code>操作符会在可以通过对象访问指定属性时返回<code>true</code>，无论该属性是在实例上还是在原型上。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></span><br><span class="line">person1.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// &quot;Greg&quot;，来自实例</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name); <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person2); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">delete</span> person1.name;</span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果要确定某个属性是否存在于原型上，则可以像下面这样同时使用<code>hasOwnProperty()</code>和<code>in</code>操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !object.hasOwnProperty(name) &amp;&amp; (name <span class="keyword">in</span> object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hasPrototypeProperty()</code>，当属性存在于原型对象上时返回<code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.job = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(hasPrototypeProperty(person, <span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">person.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hasPrototypeProperty(person, <span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>在<code>for-in</code>循环中使用<code>in</code>操作符时，可以通过对象访问且可以被枚举的属性都会返回，包括实例属性和原型属性。遮蔽原型中不可枚举（<code>[[Enumerable]]</code>特性被设置为<code>false</code>）属性的实例属性也会在<code>for-in</code>循环中返回，因为默认情况下开发者定义的属性都是可枚举的。<br>要获得对象上所有可枚举的实例属性，可以使用<code>Object.keys()</code>方法。这个方法接收一个对象作为参数，返回包含该对象所有可枚举属性名称的字符串数组。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.job = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(Person.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(keys);   <span class="comment">// [name,age,job,sayName]</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name = <span class="string">&quot;Rob&quot;</span>;</span><br><span class="line">p1.age = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">let</span> p1keys = <span class="built_in">Object</span>.keys(p1);</span><br><span class="line"><span class="built_in">console</span>.log(p1keys); <span class="comment">// [name,age]</span></span><br></pre></td></tr></table></figure><p>如果想列出所有实例属性，无论是否可以枚举，可以使用<code>Object.getOwnPropertyNames()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(Person.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(keys);   <span class="comment">// &quot;[constructor,name,age,job,sayName]&quot;</span></span><br></pre></td></tr></table></figure><p><code>Object.keys()</code>和<code>Object.getOwnPropertyNames()</code>在适当的时候都可用来代替<code>for-in</code>循环。<br>在新增符号类型之后，因为以符号为键的属性没有名称的概念，所以相应地出现了增加<code>Object.getOwnPropertySymbols()</code>，这个方法与<code>Object.getOwnPropertyNames()</code>类似，只是针对符号而已：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> k1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;k1&#x27;</span>),</span><br><span class="line">    k2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;k2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  [k1]: <span class="string">&#x27;k1&#x27;</span>,</span><br><span class="line">  [k2]: <span class="string">&#x27;k2&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o));</span><br><span class="line"><span class="comment">// [Symbol(k1), Symbol(k2)]</span></span><br></pre></td></tr></table></figure><h4 id="8-2-4-4属性枚举顺序"><a href="#8-2-4-4属性枚举顺序" class="headerlink" title="8.2.4.4属性枚举顺序"></a>8.2.4.4<strong>属性枚举顺序</strong></h4><p><code>for-in</code>循环、<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>Object.getOwnPropertySymbols()</code>以及<code>Object.assign()</code>在属性枚举顺序方面有很大区别。<code>for-in</code>循环和<code>Object.keys()</code>的枚举顺序是不确定的，取决于JavaScript引擎，可能因浏览器而异。</p><p><code>Object.getOwnPropertyNames()</code>、<code>Object.getOwnPropertySymbols()</code>和<code>Object.assign()</code>的枚举顺序是确定性的。先以升序枚举数值键，然后以插入顺序枚举字符串和符号键。在对象字面量中定义的键以它们逗号分隔的顺序插入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> k1 = <span class="built_in">Symbol</span>(<span class="string">&#x27;k1&#x27;</span>),</span><br><span class="line">    k2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;k2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="number">1</span>,</span><br><span class="line">  first: <span class="string">&#x27;first&#x27;</span>,</span><br><span class="line">  [k1]: <span class="string">&#x27;sym2&#x27;</span>,</span><br><span class="line">  second: <span class="string">&#x27;second&#x27;</span>,</span><br><span class="line">  <span class="number">0</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">o[k2] = <span class="string">&#x27;sym2&#x27;</span>;</span><br><span class="line">o[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">o.third = <span class="string">&#x27;third&#x27;</span>;</span><br><span class="line">o[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o));</span><br><span class="line"><span class="comment">// [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;first&quot;, &quot;second&quot;, &quot;third&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(o));</span><br><span class="line"><span class="comment">// [Symbol(k1), Symbol(k2)]</span></span><br></pre></td></tr></table></figure><h3 id="8-2-5-对象迭代"><a href="#8-2-5-对象迭代" class="headerlink" title="8.2.5　对象迭代"></a>8.2.5　对象迭代</h3><p>ECMAScript 2017新增了两个静态方法，用于将对象内容转换为序列化的——更重要的是可迭代的——格式。这两个静态方法<code>Object.values()</code>和<code>Object.entries()</code>接收一个对象，返回它们内容的数组。<code>Object.values()</code>返回对象值的数组，<code>Object.entries()</code>返回键/值对的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  foo: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  baz: <span class="number">1</span>,</span><br><span class="line">  qux: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(o));</span><br><span class="line"><span class="comment">// [&quot;bar&quot;, 1, &#123;&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries((o)));</span><br><span class="line"><span class="comment">// [[&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 1], [&quot;qux&quot;, &#123;&#125;]]</span></span><br></pre></td></tr></table></figure><p>注意，非字符串属性会被转换为字符串输出。另外，这两个方法执行对象的浅复制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  qux: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(o)[<span class="number">0</span>] === o.qux);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(o)[<span class="number">0</span>][<span class="number">1</span>] === o.qux);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>符号属性会被忽略：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">  [sym]: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(o));  <span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries((o)));  <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h4 id="8-2-5-1-其他原型语法"><a href="#8-2-5-1-其他原型语法" class="headerlink" title="8.2.5.1   其他原型语法"></a><strong>8.2.5.1   其他原型语法</strong></h4><p>在前面的例子中，每次定义一个属性或方法都会把<code>Person.prototype</code>重写一遍。为了减少代码冗余，也为了从视觉上更好地封装原型功能，通常直接通过一个包含所有属性和方法的对象字面量来重写原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  age: <span class="number">29</span>,</span><br><span class="line">  job: <span class="string">&quot;Software Engineer&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但上面这样会出现新问题：这样重写之后，<code>Person.prototype</code>的<code>constructor</code>属性就不指向<code>Person</code>了。因为在创建函数时，也会创建它的<code>prototype</code>对象，同时会自动给这个原型的<code>constructor</code>属性赋值。而上面的写法完全重写了默认的<code>prototype</code>对象，因此其<code>constructor</code>属性也指向了完全不同的新对象（<code>Object</code>构造函数），不再指向原来的构造函数。<br>f虽然<code>instanceof</code>操作符还能可靠地返回值，但不能再依靠<code>constructor</code>属性来识别类型了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(friend <span class="keyword">instanceof</span> <span class="built_in">Object</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(friend <span class="keyword">instanceof</span> Person);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(friend.constructor == Person);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(friend.constructor == <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果<code>constructor</code>的值很重要，则可以像下面这样在重写原型对象时专门设置一下它的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">  <span class="title">name</span>: &quot;<span class="title">Nicholas</span>&quot;,</span><br><span class="line">  <span class="title">age</span>: 29,</span><br><span class="line">  <span class="title">job</span>: &quot;<span class="title">Software</span> <span class="title">Engineer</span>&quot;,</span><br><span class="line">  <span class="title">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但要注意，以这种方式恢复<code>constructor</code>属性会创建一个<code>[[Enumerable]]</code>为<code>true</code>的属性。而原生<code>constructor</code>属性默认是不可枚举的。因此可以改为使用<code>Object.defineProperty()</code>方法来定义<code>constructor</code>属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  age: <span class="number">29</span>,</span><br><span class="line">  job: <span class="string">&quot;Software Engineer&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 恢复constructor属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">&quot;constructor&quot;</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: Person</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="8-2-5-2原型的动态性"><a href="#8-2-5-2原型的动态性" class="headerlink" title="8.2.5.2原型的动态性"></a>8.2.5.2<strong>原型的动态性</strong></h4><p>因为从原型上搜索值的过程是动态的，所以即使实例在修改原型之前已经存在，任何时候对原型对象所做的修改也会在实例上反映出来，因为因为实例和原型之间的链接就是简单的指针，而不是保存的副本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">friend.sayHi();   <span class="comment">// &quot;hi&quot;，没问题！</span></span><br></pre></td></tr></table></figure><p>虽然随时能给原型添加属性和方法，并能够立即反映在所有对象实例上，但重写整个原型就不一样了。实例的<code>[[Prototype]]</code>指针是在调用构造函数时自动赋值的，这个指针即使把原型修改为不同的对象也不会变。重写构造函数上的原型之后再创建的实例才会引用新的原型。而在此之前创建的实例仍然会引用最初的原型。因为实例只有指向原型的指针，没有指向构造函数的指针。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">  <span class="title">name</span>: &quot;<span class="title">Nicholas</span>&quot;,</span><br><span class="line">  <span class="title">age</span>: 29,</span><br><span class="line">  <span class="title">job</span>: &quot;<span class="title">Software</span> <span class="title">Engineer</span>&quot;,</span><br><span class="line">  <span class="title">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">friend.sayName();  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/04/07/cA47BbhJuiXvdQs.png"                      alt="012.png"                ></p><p><strong>图　8-3</strong></p><h4 id="8-2-5-3-原生对象原型"><a href="#8-2-5-3-原生对象原型" class="headerlink" title="8.2.5.3   原生对象原型"></a><strong>8.2.5.3   原生对象原型</strong></h4><p>原型模式之所以重要，不仅体现在自定义类型上，而且还因为它也是实现所有原生引用类型的模式。所有原生引用类型的构造函数（包括<code>Object</code>、<code>Array</code>、<code>String</code>等）都在原型上定义了实例方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.sort);       <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">String</span>.prototype.substring); <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><p>通过原生对象的原型可以取得所有默认方法的引用，也可以给原生类型的实例定义新的方法。可以像修改自定义对象原型一样修改原生对象原型，因此随时可以添加方法。比如，下面的代码就给<code>String</code>原始值包装类型的实例添加了一个<code>startsWith()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startsWith = <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.indexOf(text) === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(msg.startsWith(<span class="string">&quot;Hello&quot;</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>尽管可以这么做，但并不推荐在产品环境中修改原生对象原型。这样做很可能造成误会，而且可能引发命名冲突（比如一个名称在某个浏览器实现中不存在，在另一个实现中却存在）。另外还有可能意外重写原生的方法。推荐的做法是创建一个自定义的类，继承原生类型。</p></blockquote><h4 id="8-2-5-4原型的问题"><a href="#8-2-5-4原型的问题" class="headerlink" title="8.2.5.4原型的问题"></a>8.2.5.4<strong>原型的问题</strong></h4><p>首先，它弱化了向构造函数传递初始化参数的能力，会导致所有实例默认都取得相同的属性值，其次原型的最大问题源自它的共享特性。</p><p>原型上的所有属性是在实例间共享的，虽然可以通过在实例上添加同名属性来简单地遮蔽原型上的属性，但真正的问题来自包含引用值的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Person</span>,</span><br><span class="line">  <span class="title">name</span>: &quot;<span class="title">Nicholas</span>&quot;,</span><br><span class="line">  <span class="title">age</span>: 29,</span><br><span class="line">  <span class="title">friends</span>: [&quot;<span class="title">Shelby</span>&quot;, &quot;<span class="title">Court</span>&quot;],</span><br><span class="line">  <span class="title">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friends.push(<span class="string">&quot;Van&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.friends);  <span class="comment">// &quot;Shelby,Court,Van&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.friends);  <span class="comment">// &quot;Shelby,Court,Van&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.friends === person2.friends);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果这是有意在多个实例间共享数组，没什么问题。但一般来说，不同的实例应该有属于自己的属性副本。这就是实际开发中通常不单独使用原型模式的原因。</p><h2 id="8-3-继承"><a href="#8-3-继承" class="headerlink" title="8.3　继承"></a>8.3　继承</h2><p>很多面向对象语言都支持两种继承：接口继承和实现继承。前者只继承方法签名，后者继承实际的方法。接口继承在ECMAScript中是不可能的，因为函数没有签名。实现继承是ECMAScript唯一支持的继承方式，而这主要是通过原型链实现的。</p><h3 id="8-3-1-原型链"><a href="#8-3-1-原型链" class="headerlink" title="8.3.1　原型链"></a>8.3.1　原型链</h3><p><strong>原型链</strong>定义为ECMAScript的主要继承方式。其基本思想就是通过原型继承多个引用类型的属性和方法。每个构造函数都有一个原型对象，原型有一个属性<code>constructor</code>指回构造函数，而实例有一个内部指针<code>[[Prototype]]</code>指向原型。如果原型是另一个类型的实例呢？那这个原型本身也有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这个例子中实现继承的关键，是<code>SubType</code>没有使用默认原型，而是将其替换成了一个新的对象。这个新的对象恰好是<code>SuperType</code>的实例。这样一来，<code>SubType</code>的实例不仅能从<code>SuperType</code>的实例中继承属性和方法，而且还与<code>SuperType</code>的原型挂上钩。这里<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/04/07/EXWsTrnYmagNu9c.png"                      alt="013.png"                ></p><p><strong>图　8-4</strong></p><h4 id="8-3-1-1-默认原型"><a href="#8-3-1-1-默认原型" class="headerlink" title="8.3.1.1   默认原型"></a><strong>8.3.1.1   默认原型</strong></h4><p>实际上，原型链中还有一环。默认情况下，所有引用类型都继承自<code>Object</code>，这也是通过原型链实现的。任何函数的默认原型都是一个<code>Object</code>的实例，这意味着这个实例有一个内部指针指向<code>Object.prototype</code>。<code>SubType</code>继承<code>SuperType</code>，而<code>SuperType</code>继承<code>Object</code>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/04/07/xavmuPejgBVqUib.png"                      alt="014.png"                ></p><p><strong>图　8-5</strong></p><h4 id="8-3-1-2-原型与继承关系"><a href="#8-3-1-2-原型与继承关系" class="headerlink" title="8.3.1.2   原型与继承关系"></a><strong>8.3.1.2   原型与继承关系</strong></h4><p>原型与实例的关系可以通过两种方式来确定。第一种方式是使用<code>instanceof</code>操作符，如果一个实例的原型链中出现过相应的构造函数，则<code>instanceof</code>返回<code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperType);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SubType);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>第二种方式是使用<code>isPrototypeOf()</code>方法。原型链中的每个原型都可以调用这个方法，如下例所示，只要原型链中包含这个原型，这个方法就返回<code>true</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SuperType.prototype.isPrototypeOf(instance));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SubType.prototype.isPrototypeOf(instance));    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="8-3-1-3-关于方法"><a href="#8-3-1-3-关于方法" class="headerlink" title="8.3.1.3   关于方法"></a><strong>8.3.1.3   关于方法</strong></h4><p>子类有时候需要覆盖父类的方法，或者增加父类没有的方法。为此，这些方法必须在原型赋值之后再添加到原型上。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">// 新方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 覆盖已有的方法</span></span><br><span class="line">SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue()); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>重点在于上述两个方法都是在把原型赋值为<code>SuperType</code>的实例之后定义的。<br>如果是以对象字面量方式创建原型方法，会破坏之前的原型链，因为这相当于重写了原型链。下面是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">// 通过对象字面量添加新方法，这会导致上一行无效</span></span><br><span class="line">SubType.prototype = &#123;</span><br><span class="line">  <span class="function"><span class="title">getSubValue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">someOtherMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue()); <span class="comment">// 出错！</span></span><br></pre></td></tr></table></figure><h4 id="8-3-1-4-原型链的问题"><a href="#8-3-1-4-原型链的问题" class="headerlink" title="8.3.1.4   原型链的问题"></a><strong>8.3.1.4   原型链的问题</strong></h4><p>前面也提到过，原型中包含的引用值会在所有实例间共享，这也是为什么属性通常会在构造函数中定义而不会定义在原型上的原因。在使用原型实现继承时，原型实际上变成了另一个类型的实例，这意味着原先的实例属性变成为了原型属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">// &quot;red,blue,green,black&quot;</span></span><br></pre></td></tr></table></figure><p>原型链的第二个问题是，子类型在实例化时不能给父类型的构造函数传参。事实上，我们无法在不影响所有对象实例的情况下把参数传进父类的构造函数。</p><h3 id="8-3-2-盗用构造函数"><a href="#8-3-2-盗用构造函数" class="headerlink" title="8.3.2　盗用构造函数"></a>8.3.2　盗用构造函数</h3><p>为了解决原型包含引用值导致的继承问题，有一种叫作“盗用构造函数”（constructor stealing）的技术（也称作“对象伪装”或“经典继承”）。基本思路很简单：在子类构造函数中调用父类构造函数。因为毕竟函数就是在特定上下文中执行代码的简单对象，所以可以使用<code>apply()</code>和<code>call()</code>方法以新创建的对象为上下文执行构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 继承SuperType</span></span><br><span class="line">  SuperType.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">// &quot;red,blue,green&quot;</span></span><br></pre></td></tr></table></figure><p>通过使用<code>call()</code>或<code>apply()</code>方法，<code>SuperType</code>构造函数在为<code>SubType</code>的实例创建的新对象的上下文中执行了。这相当于新的<code>SubType</code>对象上运行了<code>SuperType()</code>函数中的所有初始化代码。结果就是每个实例都会有自己的<code>colors</code>属性。</p><h4 id="8-3-2-1-传递参数"><a href="#8-3-2-1-传递参数" class="headerlink" title="8.3.2.1   传递参数"></a><strong>8.3.2.1   传递参数</strong></h4><p>相比于使用原型链，盗用构造函数的一个优点就是可以在子类构造函数中向父类构造函数传参。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 继承SuperType并传参</span></span><br><span class="line">  SuperType.call(<span class="built_in">this</span>, <span class="string">&quot;Nicholas&quot;</span>);</span><br><span class="line">  <span class="comment">// 实例属性</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.name); <span class="comment">// &quot;Nicholas&quot;;</span></span><br><span class="line"><span class="built_in">console</span>.log(instance.age);  <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><p>因此为确保父类构造函数不会覆盖子类构造函数定义的属性，通常在调用父类构造函数之后再给子类实例添加其他额外的属性。</p><h4 id="8-3-2-2-盗用构造函数的问题"><a href="#8-3-2-2-盗用构造函数的问题" class="headerlink" title="8.3.2.2   盗用构造函数的问题"></a><strong>8.3.2.2   盗用构造函数的问题</strong></h4><p>盗用构造函数的主要缺点，同样和构造函数模式自定义类型一样，都必须在构造函数中定义方法，因此函数不能重用。此外，子类也不能访问父类原型上定义的方法，因此所有类型只能使用构造函数模式。由于存在这些问题，盗用构造函数基本上也不能单独使用。</p><h3 id="8-3-3-组合继承"><a href="#8-3-3-组合继承" class="headerlink" title="8.3.3　组合继承"></a>8.3.3　组合继承</h3><p><strong>组合继承</strong>（也叫伪经典继承）综合了原型链和盗用构造函数。基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 继承属性</span></span><br><span class="line">  SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors);  <span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line">instance1.sayName();            <span class="comment">// &quot;Nicholas&quot;;</span></span><br><span class="line">instance1.sayAge();             <span class="comment">// 29</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors);  <span class="comment">// &quot;red,blue,green&quot;</span></span><br><span class="line">instance2.sayName();            <span class="comment">// &quot;Greg&quot;;</span></span><br><span class="line">instance2.sayAge();             <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>组合继承弥补了原型链和盗用构造函数的不足，是JavaScript中使用最多的继承模式。而且组合继承也保留了<code>instanceof</code>操作符和<code>isPrototypeOf()</code>方法识别合成对象的能力。</p><h3 id="8-3-4-原型式继承"><a href="#8-3-4-原型式继承" class="headerlink" title="8.3.4　原型式继承"></a>8.3.4　原型式继承</h3><p>即使不自定义类型也可以通过原型实现对象之间的信息共享。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>object()</code>函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例。此时传入对象是新对象的原型对象。本质上，<code>object()</code>是对传入的对象执行了一次浅复制，属性中包含的引用值始终会在相关对象间共享，跟使用原型模式是一样的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  friends: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">&quot;Rob&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> yetAnotherPerson = object(person);</span><br><span class="line">yetAnotherPerson.name = <span class="string">&quot;Linda&quot;</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">&quot;Barbie&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.friends);  <span class="comment">// &quot;Shelby,Court,Van,Rob,Barbie&quot;</span></span><br></pre></td></tr></table></figure><p>原型式继承适用于：有一个对象，想在它的基础上再创建一个新对象。需要把这个对象先传给<code>object()</code>，然后再对返回的对象进行适当修改。<br>ECMAScript 5通过增加<code>Object.create()</code>方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。在只有一个参数时，<code>Object.create()</code>与这里的<code>object()</code>方法效果相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  friends: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="built_in">Object</span>.create(person);</span><br><span class="line">anotherPerson.name = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">&quot;Rob&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> yetAnotherPerson = <span class="built_in">Object</span>.create(person);</span><br><span class="line">yetAnotherPerson.name = <span class="string">&quot;Linda&quot;</span>;</span><br><span class="line">yetAnotherPerson.friends.push(<span class="string">&quot;Barbie&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.friends);  <span class="comment">// &quot;Shelby,Court,Van,Rob,Barbie&quot;</span></span><br></pre></td></tr></table></figure><p><code>Object.create()</code>的第二个参数与<code>Object.defineProperties()</code>的第二个参数一样：每个新增属性都通过各自的描述符来描述。以这种方式添加的属性会遮蔽原型对象上的同名属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  friends: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="built_in">Object</span>.create(person, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    value: <span class="string">&quot;Greg&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(anotherPerson.name);  <span class="comment">// &quot;Greg&quot;</span></span><br></pre></td></tr></table></figure><p>原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。</p><h3 id="8-3-5-寄生式继承"><a href="#8-3-5-寄生式继承" class="headerlink" title="8.3.5　寄生式继承"></a>8.3.5　寄生式继承</h3><p><strong>寄生式继承</strong>（parasitic inheritance），思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，是对原型式继承的再一次封装。以某种方式增强对象，然后返回这个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> clone = object(original); <span class="comment">//通过调用函数创建一个新对象</span></span><br><span class="line">  clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    <span class="comment">// 以某种方式增强这个对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;   <span class="comment">// 返回这个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，<code>createAnother()</code>函数接收一个参数，就是新对象的基准对象。这个对象<code>original</code>会被传给<code>object()</code>函数，然后将返回的新对象赋值给<code>clone</code>。接着给<code>clone</code>对象添加一个新方法<code>sayHi()</code>。最后返回这个对象。可以像下面这样使用<code>createAnother()</code>函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  friends: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = createAnother(person);</span><br><span class="line">anotherPerson.sayHi();  <span class="comment">// &quot;hi&quot;</span></span><br></pre></td></tr></table></figure><p>寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。<code>object()</code>函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</p><blockquote><p><strong>注意</strong>通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。</p></blockquote><h3 id="8-3-6-寄生式组合继承"><a href="#8-3-6-寄生式组合继承" class="headerlink" title="8.3.6　寄生式组合继承"></a>8.3.6　寄生式组合继承</h3><p>组合继承也存在效率问题，父类构造函数始终会被调用两次：一次在是创建子类原型时调用，另一次是在子类构造函数中调用。本质上，子类原型最终是要包含父类对象的所有实例属性，子类构造函数只要在执行时重写自己的原型就行了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  SuperType.call(<span class="built_in">this</span>, name);   <span class="comment">// 第二次调用SuperType()</span></span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();   <span class="comment">// 第一次调用SuperType()</span></span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如图8-6所示，有两组<code>name</code>和<code>colors</code>属性：一组在实例上，另一组在<code>SubType</code>的原型上。这是调用两次<code>SuperType</code>构造函数的结果。寄生式组合继承避免了这个问题。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/04/07/ST5YfHkQLc9s4bd.png"                      alt="015.png"                ></p><p><strong>图　8-6</strong></p><p>寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。寄生式组合继承的基本模式如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prototype = object(superType.prototype); <span class="comment">//创建对象</span></span><br><span class="line">  prototype.constructor = subType;             <span class="comment">//增强对象</span></span><br><span class="line">  subType.prototype = prototype;               <span class="comment">//赋值对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>inheritPrototype()</code>函数实现了寄生式组合继承的核心逻辑。这个函数接收两个参数：子类构造函数和父类构造函数。在这个函数内部，第一步是创建父类原型的一个副本。然后，给返回的<code>prototype</code>对象设置<code>constructor</code>属性，解决由于重写原型导致默认<code>constructor</code>丢失的问题。最后将新创建的对象赋值给子类型的原型。如下例所示，调用<code>inheritPrototype()</code>就可以实现前面例子中的子类型原型赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里只调用了一次<code>SuperType</code>构造函数，避免了<code>SubType.prototype</code>上不必要也用不到的属性，效率更高。而且，原型链仍然保持不变，因此<code>instanceof</code>操作符和<code>isPrototypeOf()</code>方法正常有效。寄生式组合继承算是引用类型继承的最佳模式。</p><h2 id="8-4-类"><a href="#8-4-类" class="headerlink" title="8.4　类"></a>8.4　类</h2><p>前面讲解了如何只使用ECMAScript 5的特性来模拟类似于类的行为，但各种策略都有自己的问题，也有相应的妥协。</p><p>ECMAScript 6新引入的<code>class</code>关键字具有正式定义类的能力。虽然ECMAScript 6类表面上看起来可以支持正式的面向对象编程，但实际上它背后使用的仍然是原型和构造函数的概念。</p><h3 id="8-4-1-类定义"><a href="#8-4-1-类定义" class="headerlink" title="8.4.1　类定义"></a>8.4.1　类定义</h3><p>与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用<code>class</code>关键字加大括号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;  <span class="comment">// 类声明</span></span><br><span class="line"><span class="keyword">const</span> Animal = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;  <span class="comment">// 类表达式</span></span><br></pre></td></tr></table></figure><p>与函数表达式类似，类表达式在它们被求值前也不能引用。不过函数声明可以提升，但类定义不能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(FunctionExpression);   <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> FunctionExpression = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(FunctionExpression);   <span class="comment">// function() &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(FunctionDeclaration);  <span class="comment">// FunctionDeclaration() &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunctionDeclaration</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(FunctionDeclaration);  <span class="comment">// FunctionDeclaration() &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ClassExpression);      <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> ClassExpression = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(ClassExpression);      <span class="comment">// class &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ClassDeclaration);     <span class="comment">// ReferenceError: ClassDeclaration is not defined</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassDeclaration</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ClassDeclaration);     <span class="comment">// class ClassDeclaration &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>另一个跟函数声明不同的地方是，函数受函数作用域限制，而类受块作用域限制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FunctionDeclaration</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ClassDeclaration</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(FunctionDeclaration); <span class="comment">// FunctionDeclaration() &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(ClassDeclaration);    <span class="comment">// ReferenceError: ClassDeclaration is not defined</span></span><br></pre></td></tr></table></figure><h3 id="8-4-2-类的构成"><a href="#8-4-2-类的构成" class="headerlink" title="8.4.2   类的构成"></a><strong>8.4.2   类的构成</strong></h3><p>类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法，但这些都不是必需的。空的类定义照样有效。默认情况下，类定义中的代码都在严格模式下执行。</p><p>与函数构造函数一样，多数编程风格都建议类名的首字母要大写，以区别于通过它创建的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空类定义，有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 有构造函数的类，有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有获取函数的类，有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">myBaz</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有静态方法的类，有效</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Qux</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">myQux</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类表达式的名称是可选的。在把类表达式赋值给变量后，可以通过<code>name</code>属性取得类表达式的名称字符串。但不能在类表达式作用域外部访问这个标识符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="class"><span class="keyword">class</span> <span class="title">PersonName</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">identify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(Person.name, PersonName.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.identify();               <span class="comment">// PersonName PersonName</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.name);   <span class="comment">// PersonName</span></span><br><span class="line"><span class="built_in">console</span>.log(PersonName);    <span class="comment">// ReferenceError: PersonName is not defined</span></span><br></pre></td></tr></table></figure><h3 id="8-4-3-类构造函数"><a href="#8-4-3-类构造函数" class="headerlink" title="8.4.3　类构造函数"></a>8.4.3　类构造函数</h3><p><code>constructor</code>关键字用于在类定义块内部创建类的构造函数。方法名<code>constructor</code>会告诉解释器在使用<code>new</code>操作符创建类的新实例时，应该调用这个函数。这不是必需的，不定义构造函数相当于将构造函数定义为空函数。</p><h4 id="8-4-3-1-实例化"><a href="#8-4-3-1-实例化" class="headerlink" title="8.4.3.1   实例化"></a><strong>8.4.3.1   实例化</strong></h4><p>使用<code>new</code>操作符实例化<code>Person</code>的操作等于使用<code>new</code>调用其构造函数。唯一可感知的不同之处就是，JavaScript解释器知道使用<code>new</code>和类意味着应该使用<code>constructor</code>函数进行实例化。</p><p>使用new调用类的构造函数会执行如下操作。</p><p>(1) 在内存中创建一个新对象。</p><p>(2) 这个新对象内部的<code>[[Prototype]]</code>指针被赋值为构造函数的<code>prototype</code>属性。</p><p>(3) 构造函数内部的<code>this</code>被赋值为这个新对象（即<code>this</code>指向新对象）。</p><p>(4) 执行构造函数内部的代码（给新对象添加属性）。</p><p>(5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person ctor&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vegetable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = <span class="string">&#x27;orange&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();  <span class="comment">// person ctor</span></span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vegetable();</span><br><span class="line"><span class="built_in">console</span>.log(v.color);  <span class="comment">// orange</span></span><br></pre></td></tr></table></figure><p>类实例化时传入的参数会用作构造函数的参数。如果不需要参数，则类名后面的括号也是可选的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span><br><span class="line">    <span class="built_in">this</span>.name = name || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person;          <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name);         <span class="comment">// null</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;Jake&#x27;</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.name);         <span class="comment">// Jake</span></span><br></pre></td></tr></table></figure><p>默认情况下，类构造函数会在执行之后返回<code>this</code>对象。构造函数返回的对象会被用作实例化的对象，如果没有什么引用新创建的<code>this</code>对象，那么这个对象会被销毁。不过，如果返回的不是<code>this</code>对象，而是其他对象，那么这个对象不会通过<code>instanceof</code>操作符检测出跟类有关联，因为这个对象的原型指针并没有被修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">override</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (override) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        bar: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(),</span><br><span class="line">    p2 = <span class="keyword">new</span> Person(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1);                    <span class="comment">// Person&#123; foo: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p2);                    <span class="comment">// &#123; bar: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>类构造函数与构造函数的主要区别是，调用类构造函数必须使用<code>new</code>操作符，否则会抛出错误。而普通构造函数如果不使用<code>new</code>调用，那么就会以全局的<code>this</code>（通常是<code>window</code>）作为内部对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 把window作为this来构建实例</span></span><br><span class="line"><span class="keyword">let</span> p = Person();</span><br><span class="line"><span class="keyword">let</span> a = Animal();</span><br><span class="line"><span class="comment">// TypeError: class constructor Animal cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure><p>类构造函数没有什么特殊之处，实例化之后，它会成为普通的实例方法（但作为类构造函数，仍然要使用<code>new</code>调用）。因此，实例化之后可以在实例上引用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 使用类创建一个新实例</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.constructor();</span><br><span class="line"><span class="comment">// TypeError: Class constructor Person cannot be invoked without &#x27;new&#x27;</span></span><br><span class="line"><span class="comment">// 使用对类构造函数的引用创建一个新实例</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> p1.constructor();</span><br></pre></td></tr></table></figure><h4 id="8-4-3-2-把类当成特殊函数"><a href="#8-4-3-2-把类当成特殊函数" class="headerlink" title="8.4.3.2   把类当成特殊函数"></a><strong>8.4.3.2   把类当成特殊函数</strong></h4><p>ECMAScript中没有正式的类这个类型。从各方面来看，ECMAScript类就是一种特殊函数。声明一个类之后，通过<code>typeof</code>操作符检测类标识符，表明它是一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person);         <span class="comment">// class Person &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person);  <span class="comment">// function</span></span><br></pre></td></tr></table></figure><p>类标识符有<code>prototype</code>属性，而这个原型也有一个<code>constructor</code>属性指向类自身：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);             <span class="comment">// &#123; constructor: f() &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>与普通构造函数一样，可以使用<code>instanceof</code>操作符检查构造函数原型是否存在于实例的原型链中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类本身具有与普通构造函数一样的行为。在类的上下文中，类本身在使用<code>new</code>调用时就会被当成构造函数。重点在于，类中定义的<code>constructor</code>方法<strong>不会</strong>被当成构造函数，在对它使用<code>instanceof</code>操作符时会返回<code>false</code>。但是，如果在创建实例时直接将类构造函数当成普通构造函数来使用，那么<code>instanceof</code>操作符的返回值会反转：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p1.constructor === Person);         <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person.constructor);  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person.constructor();</span><br><span class="line"><span class="built_in">console</span>.log(p2.constructor === Person);         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person);              <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p2 <span class="keyword">instanceof</span> Person.constructor);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>类是JavaScript的一等公民，因此可以像其他对象或函数引用一样把类作为参数传递：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类可以像函数一样在任何地方定义，比如在数组中</span></span><br><span class="line"><span class="keyword">let</span> classList = [</span><br><span class="line">  <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.id_ = id;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`instance <span class="subst">$&#123;<span class="built_in">this</span>.id_&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">classDefinition, id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> classDefinition(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> foo = createInstance(classList[<span class="number">0</span>], <span class="number">3141</span>);  <span class="comment">// instance 3141</span></span><br></pre></td></tr></table></figure><p>与立即调用函数表达式相似，类也可以立即实例化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为是一个类表达式，所以类名是可选的</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">&#x27;bar&#x27;</span>);        <span class="comment">// bar</span></span><br><span class="line"><span class="built_in">console</span>.log(p);  <span class="comment">// Foo &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-4-4-实例、原型和类成员"><a href="#8-4-4-实例、原型和类成员" class="headerlink" title="8.4.4　实例、原型和类成员"></a>8.4.4　实例、原型和类成员</h3><p>类的语法可以方便地去定义应该存在于实例上的成员、应该存在于原型上的成员，以及应该存在于类本身的成员。</p><h4 id="8-4-4-1-实例成员"><a href="#8-4-4-1-实例成员" class="headerlink" title="8.4.4.1   实例成员"></a><strong>8.4.4.1   实例成员</strong></h4><p>每次通过<code>new</code>调用类标识符时，都会执行类构造函数。在这个函数内部，可以为新创建的实例（<code>this</code>）添加“自有”属性。至于添加什么样的属性，则没有限制。另外，在构造函数执行完毕后，仍然可以给实例继续添加新成员。</p><p>每个实例都对应一个唯一的成员对象，这意味着所有成员都不会在原型上共享：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 这个例子先使用对象包装类型定义一个字符串</span></span><br><span class="line">    <span class="comment">// 为的是在下面测试两个对象的相等性</span></span><br><span class="line">    <span class="built_in">this</span>.name = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    <span class="built_in">this</span>.nicknames = [<span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;J-Dog&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(),</span><br><span class="line">    p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.sayName(); <span class="comment">// Jack</span></span><br><span class="line">p2.sayName(); <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name === p2.name);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.nicknames === p2.nicknames);  <span class="comment">// false</span></span><br><span class="line">p1.name = p1.nicknames[<span class="number">0</span>];</span><br><span class="line">p2.name = p2.nicknames[<span class="number">1</span>];</span><br><span class="line">p1.sayName();  <span class="comment">// Jake</span></span><br><span class="line">p2.sayName();  <span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><h4 id="8-4-4-2-原型方法与访问器"><a href="#8-4-4-2-原型方法与访问器" class="headerlink" title="8.4.4.2   原型方法与访问器"></a><strong>8.4.4.2   原型方法与访问器</strong></h4><p>为了在实例间共享方法，类定义语法把在类块中定义的方法作为原型方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加到this的所有内容都会存在于不同的实例上</span></span><br><span class="line">    <span class="built_in">this</span>.locate = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;instance&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在类块中定义的所有内容都会定义在类的原型上</span></span><br><span class="line">  <span class="function"><span class="title">locate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;prototype&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.locate();                 <span class="comment">// instance</span></span><br><span class="line">Person.prototype.locate();  <span class="comment">// prototype</span></span><br></pre></td></tr></table></figure><p>可以把方法定义在类构造函数中或者类块中，但不能在类块中给原型添加原始值或对象作为成员数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  name: <span class="string">&#x27;Jake&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught SyntaxError: Unexpected token</span></span><br></pre></td></tr></table></figure><p>类方法等同于对象属性，因此可以使用字符串、符号或计算的值作为键：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>(<span class="string">&#x27;symbolKey&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">stringKey</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;invoked stringKey&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   [symbolKey]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;invoked symbolKey&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   [<span class="string">&#x27;computed&#x27;</span> + <span class="string">&#x27;Key&#x27;</span>]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;invoked computedKey&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.stringKey();    <span class="comment">// invoked stringKey</span></span><br><span class="line">p[symbolKey]();   <span class="comment">// invoked symbolKey</span></span><br><span class="line">p.computedKey();  <span class="comment">// invoked computedKey</span></span><br></pre></td></tr></table></figure><p>类定义也支持获取和设置访问器。语法与行为跟普通对象一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">name</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name_ = newName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name_;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// Jake</span></span><br></pre></td></tr></table></figure><h4 id="8-4-4-3-静态类方法"><a href="#8-4-4-3-静态类方法" class="headerlink" title="*8.4.4.3   静态类方法  **"></a>*<em>8.4.4.3   静态类方法  **</em></h4><p>可以在类上定义静态方法。这些方法通常用于执行不特定于实例的操作，也不要求存在类的实例。与原型成员类似，静态成员每个类上只能有一个，在类定义中使用<code>static</code>关键字作为前缀。在静态成员中，<code>this</code>引用类自身。其他所有约定跟原型成员一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加到this的所有内容都会存在于不同的实例上</span></span><br><span class="line">    <span class="built_in">this</span>.locate = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;instance&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义在类的原型对象上</span></span><br><span class="line">  <span class="function"><span class="title">locate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;prototype&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义在类本身上</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">locate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;class&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.locate();                 <span class="comment">// instance, Person &#123;&#125;</span></span><br><span class="line">Person.prototype.locate();  <span class="comment">// prototype, &#123;constructor: ... &#125;</span></span><br><span class="line">Person.locate();            <span class="comment">// class, class Person &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>静态类方法非常适合作为实例工厂：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">age</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age_ = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayAge</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.age_);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">create</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用随机年龄创建并返回一个Person实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.create()); <span class="comment">// Person &#123; age_: ... &#125;</span></span><br></pre></td></tr></table></figure><h4 id="8-4-4-4-非函数原型和类成员"><a href="#8-4-4-4-非函数原型和类成员" class="headerlink" title="8.4.4.4   非函数原型和类成员"></a><strong>8.4.4.4   非函数原型和类成员</strong></h4><p>虽然类定义并不显式支持在原型或类上添加成员数据，但在类定义外部，可以手动添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;Person.greeting&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在类上定义数据成员</span></span><br><span class="line">Person.greeting = <span class="string">&#x27;My name is&#x27;</span>;</span><br><span class="line"><span class="comment">// 在原型上定义数据成员</span></span><br><span class="line">Person.prototype.name = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.sayName();  <span class="comment">// My name is Jake</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>类定义中之所以没有显式支持添加数据成员，是因为在共享目标（原型和类）上添加可变（可修改）数据成员是一种反模式。一般来说，对象实例应该独自拥有通过<code>this</code>引用的数据。</p><h4 id="8-4-4-5-迭代器与生成器方法"><a href="#8-4-4-5-迭代器与生成器方法" class="headerlink" title="8.4.4.5   迭代器与生成器方法"></a><strong>8.4.4.5   迭代器与生成器方法</strong></h4></blockquote><p>类定义语法支持在原型和类本身上定义生成器方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在原型上定义生成器方法</span></span><br><span class="line">  *<span class="function"><span class="title">createNicknameIterator</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;J-Dog&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在类上定义生成器方法</span></span><br><span class="line">  <span class="keyword">static</span> *<span class="function"><span class="title">createJobIterator</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Butcher&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Baker&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Candlestick maker&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> jobIter = Person.createJobIterator();</span><br><span class="line"><span class="built_in">console</span>.log(jobIter.next().value);  <span class="comment">// Butcher</span></span><br><span class="line"><span class="built_in">console</span>.log(jobIter.next().value);  <span class="comment">// Baker</span></span><br><span class="line"><span class="built_in">console</span>.log(jobIter.next().value);  <span class="comment">// Candlestick maker</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> nicknameIter = p.createNicknameIterator();</span><br><span class="line"><span class="built_in">console</span>.log(nicknameIter.next().value);  <span class="comment">// Jack</span></span><br><span class="line"><span class="built_in">console</span>.log(nicknameIter.next().value);  <span class="comment">// Jake</span></span><br><span class="line"><span class="built_in">console</span>.log(nicknameIter.next().value);  <span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><p>因为支持生成器方法，所以可以通过添加一个默认的迭代器，把类实例变成可迭代对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nicknames = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;J-Dog&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span> *<span class="built_in">this</span>.nicknames.entries();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [idx, nickname] <span class="keyword">of</span> p) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// Jake</span></span><br><span class="line"><span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><p>也可以只返回迭代器实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nicknames = [<span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;J-Dog&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.nicknames.entries();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [idx, nickname] <span class="keyword">of</span> p) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(nickname);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Jack</span></span><br><span class="line"><span class="comment">// Jake</span></span><br><span class="line"><span class="comment">// J-Dog</span></span><br></pre></td></tr></table></figure><h3 id="8-4-5-继承"><a href="#8-4-5-继承" class="headerlink" title="8.4.5　继承"></a>8.4.5　继承</h3><p>ECMAScript 6新增特性中原生支持了类继承机制。虽然类继承使用的是新语法，但背后依旧使用的是原型链。</p><h4 id="8-4-5-1-继承基础"><a href="#8-4-5-1-继承基础" class="headerlink" title="8.4.5.1   继承基础"></a><strong>8.4.5.1   继承基础</strong></h4><p>ES6类支持单继承。使用<code>extends</code>关键字，就可以继承任何拥有<code>[[Construct]]</code>和原型的对象。很大程度上，这意味着不仅可以继承一个类，也可以继承普通的构造函数（保持向后兼容）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Bus);      <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(b <span class="keyword">instanceof</span> Vehicle);  <span class="comment">// true</span></span><br><span class="line">　</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承普通构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engineer</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> Engineer();</span><br><span class="line"><span class="built_in">console</span>.log(e <span class="keyword">instanceof</span> Engineer);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(e <span class="keyword">instanceof</span> Person);    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>派生类都会通过原型链访问到类和原型上定义的方法。<code>this</code>的值会反映调用相应方法的实例或者类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">identifyPrototype</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">identifyClass</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id, <span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> Vehicle();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line">b.identifyPrototype(<span class="string">&#x27;bus&#x27;</span>);       <span class="comment">// bus, Bus &#123;&#125;</span></span><br><span class="line">v.identifyPrototype(<span class="string">&#x27;vehicle&#x27;</span>);   <span class="comment">// vehicle, Vehicle &#123;&#125;</span></span><br><span class="line">Bus.identifyClass(<span class="string">&#x27;bus&#x27;</span>);         <span class="comment">// bus, class Bus &#123;&#125;</span></span><br><span class="line">Vehicle.identifyClass(<span class="string">&#x27;vehicle&#x27;</span>); <span class="comment">// vehicle, class Vehicle &#123;&#125;</span></span><br></pre></td></tr></table></figure><p><code>extends</code>关键字也可以在类表达式中使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Bar = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-5-2-构造函数、HomeObject和super"><a href="#8-4-5-2-构造函数、HomeObject和super" class="headerlink" title="8.4.5.2   构造函数、HomeObject和super()"></a><strong>8.4.5.2   构造函数、</strong><code>HomeObject</code>和<code>super()</code></h4><p>派生类的方法可以通过<code>super</code>关键字引用它们的原型。这个关键字只能在派生类中使用，而且仅限于类构造函数、实例方法和静态方法内部。在类构造函数中使用<code>super</code>可以调用父类构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hasEngine = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 不要在调用super()之前引用this，否则会抛出ReferenceError</span></span><br><span class="line">    <span class="built_in">super</span>(); <span class="comment">// 相当于super.constructor()</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vehicle);  <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);                   <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();</span><br></pre></td></tr></table></figure><p>在静态方法中可以通过<code>super</code>调用继承的类上定义的静态方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">identify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;vehicle&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">identify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.identify();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Bus.identify();  <span class="comment">// vehicle</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>ES6给类构造函数和静态方法添加了内部特性<code>[[HomeObject]]</code>，这个特性是一个指针，指向定义该方法的对象。这个指针是自动赋值的，而且只能在JavaScript引擎内部访问。<code>super</code>始终会定义为<code>[[HomeObject]]</code>的原型。</p><h4 id="8-4-5-3-使用super时要注意的问题"><a href="#8-4-5-3-使用super时要注意的问题" class="headerlink" title="8.4.5.3   使用super时要注意的问题"></a>8.4.5.3   使用<code>super</code>时要注意的问题</h4></blockquote><ol><li><code>super</code>只能在派生类构造函数和静态方法中使用。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="comment">// SyntaxError: &#x27;super&#x27; keyword unexpected</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不能单独引用<code>super</code>关键字，要么用它调用构造函数，要么用它引用静态方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">super</span>);</span><br><span class="line">    <span class="comment">// SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>调用<code>super()</code>会调用父类构造函数，并将返回的实例赋值给<code>this</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vehicle);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><code>super()</code>的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">licensePlate</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.licensePlate = licensePlate;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">licensePlate</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(licensePlate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Bus(<span class="string">&#x27;1337H4X&#x27;</span>)); <span class="comment">// Bus &#123; licensePlate: &#x27;1337H4X&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li><li>如果没有定义类构造函数，在实例化派生类时会调用<code>super()</code>，而且会传入所有传给派生类的参数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">licensePlate</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.licensePlate = licensePlate;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Bus(<span class="string">&#x27;1337H4X&#x27;</span>)); <span class="comment">// Bus &#123; licensePlate: &#x27;1337H4X&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li><li>在类构造函数中，不能在调用<code>super()</code>之前引用<code>this</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();</span><br><span class="line"><span class="comment">// ReferenceError: Must call super constructor in derived class</span></span><br><span class="line"><span class="comment">// before accessing &#x27;this&#x27; or returning from derived constructor</span></span><br></pre></td></tr></table></figure></li><li>如果在派生类中显式定义了构造函数，则要么必须在其中调用<code>super()</code>，要么必须在其中返回一个对象。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Van</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Car());  <span class="comment">// Car &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Bus());  <span class="comment">// Bus &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Van());  <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="8-4-5-4抽象基类"><a href="#8-4-5-4抽象基类" class="headerlink" title="8.4.5.4抽象基类"></a>8.4.5.4<strong>抽象基类</strong></h4></li></ol><p>有时候可能需要定义这样一个类，它可供其他类继承，但本身不会被实例化。虽然ECMAScript没有专门支持这种类的语法 ，但通过<code>new.target</code>也很容易实现。<code>new.target</code>保存通过<code>new</code>关键字调用的类或函数。通过在实例化时检测<code>new.target</code>是不是抽象基类，可以阻止对抽象基类的实例化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Vehicle) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Vehicle cannot be directly instantiated&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();       <span class="comment">// class Bus &#123;&#125;</span></span><br><span class="line"><span class="keyword">new</span> Vehicle();   <span class="comment">// class Vehicle &#123;&#125;</span></span><br><span class="line"><span class="comment">// Error: Vehicle cannot be directly instantiated</span></span><br></pre></td></tr></table></figure><p>另外，通过在抽象基类构造函数中进行检查，可以要求派生类必须定义某个方法。因为原型方法在调用类构造函数之前就已经存在了，所以可以通过<code>this</code>关键字来检查相应的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Vehicle) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Vehicle cannot be directly instantiated&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.foo) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Inheriting class must define foo()&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Van</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// success!</span></span><br><span class="line"><span class="keyword">new</span> Van(); <span class="comment">// Error: Inheriting class must define foo()</span></span><br></pre></td></tr></table></figure><h4 id="8-4-5-5继承内置类型"><a href="#8-4-5-5继承内置类型" class="headerlink" title="8.4.5.5继承内置类型"></a>8.4.5.5<strong>继承内置类型</strong></h4><p>ES6类为继承内置引用类型提供了顺畅的机制，开发者可以方便地扩展内置类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">shuffle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 洗牌算法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (i + <span class="number">1</span>));</span><br><span class="line">      [<span class="built_in">this</span>[i], <span class="built_in">this</span>[j]] = [<span class="built_in">this</span>[j], <span class="built_in">this</span>[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> SuperArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> SuperArray);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">a.shuffle();</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// [3, 1, 4, 5, 2]</span></span><br></pre></td></tr></table></figure><p>当有些内置类型的方法会返回新实例时，默认情况下，返回实例的类型与原始实例的类型是一致的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> SuperArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = a1.filter(<span class="function"><span class="params">x</span> =&gt;</span> !!(x%<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(a1);  <span class="comment">// [1, 2, 3, 4, 5]，SuperArray类型</span></span><br><span class="line"><span class="built_in">console</span>.log(a2);  <span class="comment">// [1, 3, 5]，SuperArray类型</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 <span class="keyword">instanceof</span> SuperArray);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 <span class="keyword">instanceof</span> SuperArray);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果想覆盖这个默认行为，则可以覆盖<code>Symbol.species</code>访问器，这个访问器决定在创建返回的实例时使用的类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> get [<span class="built_in">Symbol</span>.species]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> SuperArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> a2 = a1.filter(<span class="function"><span class="params">x</span> =&gt;</span> !!(x%<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(a1);  <span class="comment">// [1, 2, 3, 4, 5]，SuperArray类型</span></span><br><span class="line"><span class="built_in">console</span>.log(a2);  <span class="comment">// [1, 3, 5]</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 <span class="keyword">instanceof</span> SuperArray);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 <span class="keyword">instanceof</span> SuperArray);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="8-4-5-6-类混入"><a href="#8-4-5-6-类混入" class="headerlink" title="*8.4.5.6   类混入   **"></a>*<em>8.4.5.6   类混入   **</em></h4><p>把不同类的行为集中到一个类是一种常见的JavaScript模式。虽然ES6没有显式支持多类继承，但通过现有特性可以模拟这种行为。</p><blockquote><p><strong>注意</strong><code>Object.assign()</code>方法是为了混入对象行为而设计的。只有在需要混入类的行为时才有必要自己实现混入表达式。如果只是需要混入多个对象的属性，那么使用<code>Object.assign()</code>就可以了。</p></blockquote><p>在下面的代码片段中，<code>extends</code>关键字后面是一个JavaScript表达式。任何可以解析为一个类或一个构造函数的表达式都是有效的。这个表达式会在求值类定义时被求值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParentClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;evaluated expression&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> Vehicle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">getParentClass</span>() </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 可求值的表达式</span></span><br></pre></td></tr></table></figure><p>混入模式可以通过在一个表达式中连缀多个混入元素来实现，这个表达式最终会解析为一个可以被继承的类。如果<code>Person</code>类需要组合A、B、C，则需要某种机制实现B继承A，C继承B，而<code>Person</code>再继承C，从而把A、B、C组合到这个超类中。实现这种模式有不同的策略。<br>一个策略是定义一组“可嵌套”的函数，每个函数分别接收一个超类作为参数，而将混入类定义为这个参数的子类，并返回这个类。这些组合函数可以连缀调用，最终组合成超类表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> FooMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> BarMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> BazMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">baz</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">FooMixin</span>(<span class="title">BarMixin</span>(<span class="title">BazMixin</span>(<span class="title">Vehicle</span>))) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line">b.foo();  <span class="comment">// foo</span></span><br><span class="line">b.bar();  <span class="comment">// bar</span></span><br><span class="line">b.baz();  <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><p>通过写一个辅助函数，可以把嵌套调用展开：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> FooMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> BarMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">bar</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> BazMixin = <span class="function">(<span class="params">Superclass</span>) =&gt;</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Superclass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">baz</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mix</span>(<span class="params">BaseClass, ...Mixins</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Mixins.reduce(<span class="function">(<span class="params">accumulator, current</span>) =&gt;</span> current(accumulator), BaseClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">mix</span>(<span class="title">Vehicle</span>, <span class="title">FooMixin</span>, <span class="title">BarMixin</span>, <span class="title">BazMixin</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Bus();</span><br><span class="line">b.foo();  <span class="comment">// foo</span></span><br><span class="line">b.bar();  <span class="comment">// bar</span></span><br><span class="line">b.baz();  <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>很多JavaScript框架（特别是React）已经抛弃混入模式，转向了组合模式（把方法提取到独立的类和辅助对象中，然后把它们组合起来，但不使用继承）。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ECMA-262将对象定义为一组属性的无序集合。严格来说，这意味着对象就是一组没有特定顺序的值。对象的每个属性或方法都由一个名称来标识，这个名称映射到一个值。&lt;/p&gt;
&lt;h2 id=&quot;8-1-理解对象&quot;&gt;&lt;a href=&quot;#8-1-理解对象&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript高级程序设计(第四版)" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    <category term="08-对象、类与面向对象编程" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/08-%E5%AF%B9%E8%B1%A1%E3%80%81%E7%B1%BB%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>07-迭代器与生成器</title>
    <link href="http://example.com/2021/03/28/note/JavaScript/07-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://example.com/2021/03/28/note/JavaScript/07-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2021-03-28T10:47:40.431Z</published>
    <updated>2021-03-28T10:48:18.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-1-理解迭代"><a href="#7-1-理解迭代" class="headerlink" title="7.1　理解迭代"></a>7.1　理解迭代</h2><p>在JavaScript中，计数循环就是一种最简单的迭代：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环是迭代机制的基础，这是因为它可以指定迭代的次数，以及每次迭代要执行什么操作。每次循环都会在下一次迭代开始之前完成，而每次迭代的顺序都是事先定义好的。<br>迭代会在一个有序集合上进行。（“有序”可以理解为集合中所有项都可以按照既定的顺序被遍历到，特别是开始和结束项有明确的定义。）数组是JavaScript中有序集合的最典型例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; collection.length; ++index) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(collection[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为数组有已知的长度，且数组每一项都可以通过索引获取，所以整个数组可以通过递增索引来遍历。但由于如下原因，通过这种循环来执行例程并不理想。</p><ul><li><strong>迭代之前需要事先知道如何使用数据结构</strong>。数组中的每一项都只能先通过引用取得数组对象，然后再通过<code>[]</code>操作符取得特定索引位置上的项。这种情况不适用于所有数据结构。</li><li><strong>遍历顺序并不是数据结构固有的</strong>。通过递增索引来访问数据是特定于数组类型的方式，并不适用于其他具有隐式顺序的数据结构。</li></ul><p><code>Array.prototype.forEach()</code>方法，向通用迭代需求迈进了一步（但仍然不够理想）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> collection = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line">collection.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">console</span>.log(item));</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// baz</span></span><br></pre></td></tr></table></figure><p>这个方法解决了单独记录索引和通过数组对象取得值的问题。不过，没有办法标识迭代何时终止。因此这个方法只适用于数组，而且回调结构也比较笨拙。<br>在ECMAScript较早的版本中，执行迭代必须使用循环或其他辅助结构。随着代码量增加，代码会变得越发混乱。解决方案就是<strong>迭代器模式，</strong>而且开发者无须事先知道如何迭代就能实现迭代操作。</p><h2 id="7-2-迭代器模式"><a href="#7-2-迭代器模式" class="headerlink" title="7.2　迭代器模式"></a>7.2　迭代器模式</h2><p><strong>迭代器模式</strong>描述了一个方案，即可以把有些结构称为“可迭代对象”（iterable），因为它们实现了正式的<code>Iterable</code>接口，而且可以通过迭代器<code>Iterator</code>消费。</p><p>可迭代对象是一种抽象的说法。可以把可迭代对象理解成数组或集合这样的集合类型的对象。它们包含的元素都是有限的，而且都具有无歧义的遍历顺序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的元素是有限的，递增索引可以按序访问每个元素</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// 集合的元素是有限的，可以按插入顺序访问每个元素</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="number">3</span>).add(<span class="number">1</span>).add(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>但可迭代对象不一定是集合对象，也可以是仅仅具有类似数组行为的其他数据结构，比如本章开头提到的计数循环。该循环中生成的值是暂时性的，但循环本身是在执行迭代。计数循环和数组都具有可迭代对象的行为。</p><blockquote><p><strong>注意</strong>临时性可迭代对象可以实现为生成器，本章后面会讨论。</p></blockquote><p>任何实现<code>Iterable</code>接口的数据结构都可以被实现<code>Iterator</code>接口的结构“消费”（consume）。<strong>迭代器</strong>（iterator）是按需创建的一次性对象。每个迭代器都会关联一个<strong>可迭代对象</strong>，而迭代器会暴露出迭代其关联可迭代对象的API。迭代器无须了解与其关联的可迭代对象的结构，只需要知道如何取得连续的值。</p><h3 id="7-2-1-可迭代协议"><a href="#7-2-1-可迭代协议" class="headerlink" title="7.2.1　可迭代协议"></a>7.2.1　可迭代协议</h3><p>实现<code>Iterable</code>接口（可迭代协议）要求同时具备两种能力：支持迭代的自我识别能力和创建实现<code>Iterator</code>接口的对象的能力。在ECMAScript中，这意味着必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的<code>Symbol.iterator</code>作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个新迭代器。</p><p>很多内置类型都实现了<code>Iterable</code>接口：</p><ul><li>字符串</li><li>数组</li><li>映射</li><li>集合</li><li><code>arguments</code>对象</li><li><code>NodeList</code>等DOM集合类型</li></ul><p>检查是否存在默认迭代器属性可以暴露这个工厂函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 这两种类型没有实现迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>).set(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>).set(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&#x27;a&#x27;</span>).add(<span class="string">&#x27;b&#x27;</span>).add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> els = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">// 这些类型都实现了迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(els[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// 调用这个工厂函数会生成一个迭代器</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// StringIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// MapIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(set[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// SetIterator &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(els[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>实际写代码过程中，不需要显式调用这个工厂函数来生成迭代器。实现可迭代协议的所有类型都会自动兼容接收可迭代对象的任何语言特性。接收可迭代对象的原生语言特性包括：</p><ul><li><code>for-of</code>循环</li><li>数组解构</li><li>扩展操作符</li><li><code>Array.from()</code></li><li>创建集合</li><li>创建映射</li><li><code>Promise.all()</code>接收由期约组成的可迭代对象</li><li><code>Promise.race()</code>接收由期约组成的可迭代对象</li><li><code>yield*</code>操作符，在生成器中使用</li></ul><p>这些原生语言结构会在后台调用提供的可迭代对象的这个工厂函数，从而创建一个迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"><span class="comment">// for-of循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// baz</span></span><br><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// foo, bar, baz</span></span><br><span class="line"><span class="comment">// 扩展操作符</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="comment">// Array.from()</span></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">Array</span>.from(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br><span class="line"><span class="comment">// Set构造函数</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"><span class="built_in">console</span>.log(set); <span class="comment">// Set(3) &#123;&#x27;foo&#x27;, &#x27;bar&#x27;, &#x27;baz&#x27;&#125;</span></span><br><span class="line"><span class="comment">// Map构造函数</span></span><br><span class="line"><span class="keyword">let</span> pairs = arr.map(<span class="function">(<span class="params">x, i</span>) =&gt;</span> [x, i]);</span><br><span class="line"><span class="built_in">console</span>.log(pairs); <span class="comment">// [[&#x27;foo&#x27;, 0], [&#x27;bar&#x27;, 1], [&#x27;baz&#x27;, 2]]</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(pairs);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(3) &#123; &#x27;foo&#x27;=&gt;0, &#x27;bar&#x27;=&gt;1, &#x27;baz&#x27;=&gt;2 &#125;</span></span><br></pre></td></tr></table></figure><p>如果对象原型链上的父类实现了<code>Iterable</code>接口，那这个对象也就实现了这个接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fooArr = <span class="keyword">new</span> FooArray(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> el <span class="keyword">of</span> fooArr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// baz</span></span><br></pre></td></tr></table></figure><h3 id="7-2-2-迭代器协议"><a href="#7-2-2-迭代器协议" class="headerlink" title="7.2.2　迭代器协议"></a>7.2.2　迭代器协议</h3><p>迭代器是一种一次性使用的对象，用于迭代与其关联的可迭代对象。迭代器API使用<code>next()</code>方法在可迭代对象中遍历数据。每次成功调用<code>next()</code>，都会返回一个<code>IteratorResult</code>对象，其中包含迭代器返回的下一个值。若不调用<code>next()</code>，则无法知道迭代器的当前位置。</p><p><code>next()</code>方法返回的迭代器对象<code>IteratorResult</code>包含两个属性：<code>done</code>和<code>value</code>。<code>done</code>是一个布尔值，表示是否还可以再次调用<code>next()</code>取得下一个值；<code>value</code>包含可迭代对象的下一个值（<code>done</code>为<code>false</code>），或者<code>undefined</code>（<code>done</code>为<code>true</code>）。<code>done: true</code>状态称为“耗尽”。只要迭代器到达<code>done: true</code>状态，后续调用<code>next()</code>就一直返回同样的值了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可迭代对象</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="comment">// 迭代器工厂函数</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br><span class="line"><span class="comment">// 执行迭代</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>每个迭代器都表示对可迭代对象的一次性有序遍历。不同迭代器的实例相互之间没有联系，只会独立地遍历可迭代对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iter1 = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">let</span> iter2 = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter1.next()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter2.next()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter2.next()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter1.next()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>迭代器并不与可迭代对象某个时刻的快照绑定，而仅仅是使用游标来记录遍历可迭代对象的历程。如果可迭代对象在迭代期间被修改了，那么迭代器也会反映相应的变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 在数组中间插入值</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: false, value: &#x27;baz&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iter.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象。</p></blockquote><p>“迭代器”的概念有时候容易模糊，因为它可以指通用的迭代，也可以指接口，还可以指正式的迭代器类型。下面的例子比较了一个显式的迭代器实现和一个原生的迭代器实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类实现了可迭代接口（Iterable）</span></span><br><span class="line"><span class="comment">// 调用默认的迭代器工厂函数会返回</span></span><br><span class="line"><span class="comment">// 一个实现迭代器接口（Iterator）的迭代器对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="comment">// 打印出实现了迭代器接口的对象</span></span><br><span class="line"><span class="built_in">console</span>.log(f[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// &#123; next: f() &#123;&#125; &#125;</span></span><br><span class="line"><span class="comment">// Array类型实现了可迭代接口（Iterable）</span></span><br><span class="line"><span class="comment">// 调用Array类型的默认迭代器工厂函数</span></span><br><span class="line"><span class="comment">// 会创建一个ArrayIterator的实例</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 打印出ArrayIterator的实例</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="built_in">Symbol</span>.iterator]()); <span class="comment">// Array Iterator &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-3-自定义迭代器"><a href="#7-2-3-自定义迭代器" class="headerlink" title="7.2.3　自定义迭代器"></a>7.2.3　自定义迭代器</h3><p>与<code>Iterable</code>接口类似，任何实现<code>Iterator</code>接口的对象都可以作为迭代器使用。下面这个例子中的<code>Counter</code>类只能被迭代一定的次数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Counter的实例应该迭代limit次</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">limit</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.count &lt;= <span class="built_in">this</span>.limit) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="built_in">this</span>.count++ &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> Counter(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>这个类实现了<code>Iterator</code>接口，但不理想。因为它的每个实例只能被迭代一次：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123; <span class="built_in">console</span>.log(i); &#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123; <span class="built_in">console</span>.log(i); &#125;</span><br><span class="line"><span class="comment">// (nothing logged)</span></span><br></pre></td></tr></table></figure><p>为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对应一个新计数器。为此，可以把计数器变量放到闭包里，然后通过闭包返回迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">limit</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>,</span><br><span class="line">        limit = <span class="built_in">this</span>.limit;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: count++ &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">new</span> Counter(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123; <span class="built_in">console</span>.log(i); &#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter) &#123; <span class="built_in">console</span>.log(i); &#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>每个以这种方式创建的迭代器也实现了<code>Iterable</code>接口。<code>Symbol.iterator</code>属性引用的工厂函数会返回相同的迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;baz&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> iter1 = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter1[<span class="built_in">Symbol</span>.iterator]); <span class="comment">//f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="keyword">let</span> iter2 = iter1[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iter1 === iter2);         <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>因为每个迭代器也实现了<code>Iterable</code>接口，所以它们也可以用在任何期待可迭代对象的地方，比如<code>for-of</code>循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123; <span class="built_in">console</span>.log(item); &#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iter ) &#123; <span class="built_in">console</span>.log(item); &#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="7-2-4-提前终止迭代器"><a href="#7-2-4-提前终止迭代器" class="headerlink" title="7.2.4　提前终止迭代器"></a>7.2.4　提前终止迭代器</h3><p>可选的<code>return()</code>方法用于指定在迭代器提前关闭时执行的逻辑。执行迭代的结构在想让迭代器知道它不想遍历到可迭代对象耗尽时，就可以“关闭”迭代器。可能的情况包括：</p><ul><li><code>for-of</code>循环通过<code>break</code>、<code>continue</code>、<code>return</code>或<code>throw</code>提前退出；</li><li>解构操作并未消费所有值。</li></ul><p><code>return()</code>方法必须返回一个有效的<code>IteratorResult</code>对象。简单情况下，可以只返回<code>&#123; done: true &#125;</code>。因为这个返回值只会用在生成器的上下文中，所以本章后面再讨论这种情况。</p><p>如下面的代码所示，内置语言结构在发现还有更多值可以迭代，但不会消费这些值时，会自动调用<code>return()</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">limit</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.limit = limit;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>,</span><br><span class="line">      limit = <span class="built_in">this</span>.limit;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: count++ &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">return</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Exiting early&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter1 = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Exiting early</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter2 = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&#x27;err&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Exiting early</span></span><br><span class="line"><span class="keyword">let</span> counter3 = <span class="keyword">new</span> Counter(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> [a, b] = counter3;</span><br><span class="line"><span class="comment">// Exiting early</span></span><br></pre></td></tr></table></figure><p>如果迭代器没有关闭，则还可以继续从上次离开的地方继续迭代。比如，数组的迭代器就是不能关闭的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iter = a[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>因为<code>return()</code>方法是可选的，所以并非所有迭代器都是可关闭的。要知道某个迭代器是否可关闭，可以测试这个迭代器实例的<code>return</code>属性是不是函数对象。但即便给一个不可关闭的迭代器增加这个方法<strong>也不能</strong>让它变成可关闭的。这是因为调用<code>return()</code>不会强制迭代器进入关闭状态。当然，<code>return()</code>方法还是会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> iter = a[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">iter.return = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Exiting early&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">  <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 提前退出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iter) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h2 id="7-3-生成器"><a href="#7-3-生成器" class="headerlink" title="7.3　生成器"></a>7.3　生成器</h2><p>生成器是ECMAScript 6新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力。比如，使用生成器可以自定义迭代器和实现协程。</p><h3 id="7-3-1-生成器基础"><a href="#7-3-1-生成器基础" class="headerlink" title="7.3.1　生成器基础"></a>7.3.1　生成器基础</h3><p>生成器的形式是一个函数，函数名称前面加一个星号（<code>*</code>）表示它是一个生成器。只要是可以定义函数的地方，就可以定义生成器。并且星号不受两侧空格的影响：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 生成器函数表达式</span></span><br><span class="line"><span class="keyword">let</span> generatorFn = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 作为对象字面量方法的生成器函数</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">  * <span class="function"><span class="title">generatorFn</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作为类实例方法的生成器函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  * <span class="function"><span class="title">generatorFn</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作为类静态方法的生成器函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> * <span class="function"><span class="title">generatorFn</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>箭头函数不能用来定义生成器函数。</p></blockquote><p>调用生成器函数会产生一个<strong>生成器对象</strong>。生成器对象一开始处于暂停执行（suspended）的状态。与迭代器相似，生成器对象也实现了<code>Iterator</code>接口，因此具有<code>next()</code>方法。调用这个方法会让生成器开始或恢复执行。返回值类似于迭代器，有一个<code>done</code>属性和一个<code>value</code>属性。函数体为空的生成器函数中间不会停留，调用一次<code>next()</code>就会让生成器到达<code>done: true</code>状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject);        <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p><code>value</code>属性是生成器函数的返回值，默认值为<code>undefined</code>，可以通过生成器函数的返回值指定：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject);         <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());  <span class="comment">// &#123; done: true, value: &#x27;foo&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>生成器函数只会在初次调用<code>next()</code>方法后开始执行，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foobar&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初次调用生成器函数并不会打印日志</span></span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line">generatorObject.next();  <span class="comment">// foobar</span></span><br></pre></td></tr></table></figure><p>生成器对象实现了<code>Iterable</code>接口，它们默认的迭代器是自引用的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(generatorFn);</span><br><span class="line"><span class="comment">// f* generatorFn() &#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorFn()[<span class="built_in">Symbol</span>.iterator]);</span><br><span class="line"><span class="comment">// f [Symbol.iterator]() &#123;native code&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorFn());</span><br><span class="line"><span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorFn()[<span class="built_in">Symbol</span>.iterator]());</span><br><span class="line"><span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g === g[<span class="built_in">Symbol</span>.iterator]());  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="7-3-2-通过yield中断执行"><a href="#7-3-2-通过yield中断执行" class="headerlink" title="7.3.2　通过yield中断执行"></a>7.3.2　通过<code>yield</code>中断执行</h3><p><code>yield</code>关键字可以让生成器停止和开始执行，也是生成器最有用的地方。生成器函数在遇到<code>yield</code>关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在生成器对象上调用<code>next()</code>方法来恢复执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());  <span class="comment">// &#123; done: false, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());  <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>此时的<code>yield</code>关键字有点像函数的中间返回语句，它生成的值会出现在<code>next()</code>方法返回的对象里。通过<code>yield</code>关键字退出的生成器函数会处在<code>done: false</code>状态；通过<code>return</code>关键字退出的生成器函数会处于<code>done: true</code>状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());<span class="comment">//&#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());<span class="comment">//&#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());<span class="comment">//&#123; done: true, value: &#x27;baz&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器对象上调用<code>next()</code>不会影响其他生成器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject1 = generatorFn();</span><br><span class="line"><span class="keyword">let</span> generatorObject2 = generatorFn();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject1.next()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject2.next()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject2.next()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject1.next()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p><code>yield</code>关键字只能在生成器函数内部使用，用在其他地方会抛出错误。类似函数的<code>return</code>关键字，<code>yield</code>关键字必须直接位于生成器函数定义中，出现在嵌套的非生成器函数中会抛出语法错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">validGeneratorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">invalidGeneratorFnA</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">invalidGeneratorFnB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">invalidGeneratorFnC</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-2-1-生成器对象作为可迭代对象"><a href="#7-3-2-1-生成器对象作为可迭代对象" class="headerlink" title="7.3.2.1   生成器对象作为可迭代对象"></a><strong>7.3.2.1   生成器对象作为可迭代对象</strong></h4><p>在生成器对象上显式调用<code>next()</code>方法的用处并不大。更方便使用的是把生成器对象当成可迭代对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>在需要自定义迭代对象时，这样使用生成器对象会特别有用。比如，我们需要定义一个可迭代对象，而它会产生一个迭代器，这个迭代器会执行指定的次数。使用生成器，可以通过一个简单的循环来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> _ <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>传给生成器的函数可以控制迭代循环的次数。在<code>n</code>为0时，<code>while</code>条件为假，循环退出，生成器函数返回。</p><h4 id="7-3-2-2-使用yield实现输入和输出"><a href="#7-3-2-2-使用yield实现输入和输出" class="headerlink" title="7.3.2.2   使用yield实现输入和输出"></a><strong>7.3.2.2   使用</strong><code>yield</code>实现输入和输出</h4><p><code>yield</code>关键字还可以作为函数的中间参数使用。上一次让生成器函数暂停的<code>yield</code>关键字会接收到传给<code>next()</code>方法的第一个值。同时第一次调用<code>next()</code>传入的值不会被使用，因为这一次调用是为了开始执行生成器函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params">initial</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(initial);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">yield</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">generatorObject.next(<span class="string">&#x27;bar&#x27;</span>);  <span class="comment">// foo</span></span><br><span class="line">generatorObject.next(<span class="string">&#x27;baz&#x27;</span>);  <span class="comment">// baz</span></span><br><span class="line">generatorObject.next(<span class="string">&#x27;qux&#x27;</span>);  <span class="comment">// qux</span></span><br></pre></td></tr></table></figure><p><code>yield</code>关键字可以同时用于输入和输出，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next());       <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next(<span class="string">&#x27;bar&#x27;</span>));  <span class="comment">// &#123; done: true, value: &#x27;bar&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p><code>yield</code>关键字并非只能使用一次。比如，以下代码就定义了一个无穷计数生成器函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;;++i) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value);  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(generatorObject.next().value);  <span class="comment">// 3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>假设要定义一个生成器函数，它会根据配置的值迭代相应次数并产生迭代的索引。初始化一个新数组可以实现这个需求，但不用数组也可以实现同样的行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>使用<code>while</code>循环也可以实现，而且代码稍微简洁一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这样使用生成器也可以实现范围和填充数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">range</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(end &gt; start) &#123;</span><br><span class="line">    <span class="keyword">yield</span> start++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> range(<span class="number">4</span>, <span class="number">7</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">zeroes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(zeroes(<span class="number">8</span>))); <span class="comment">// [0, 0, 0, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure><h4 id="7-3-2-3-产生可迭代对象"><a href="#7-3-2-3-产生可迭代对象" class="headerlink" title="7.3.2.3   产生可迭代对象"></a><strong>7.3.2.3   产生可迭代对象</strong></h4><p>可以使用星号增强<code>yield</code>的行为，让它能够迭代一个可迭代对象，从而一次产出一个值，与生成器函数的星号类似，<code>yield</code>星号两侧的空格不影响其行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等价的generatorFn：</span></span><br><span class="line"><span class="comment">// function* generatorFn() &#123;</span></span><br><span class="line"><span class="comment">//   for (const x of [1, 2, 3]) &#123;</span></span><br><span class="line"><span class="comment">//     yield x;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = generatorFn();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>yield*</code>是一个表达式，而不是语句，它本身的值是关联迭代器返回<code>done: true</code>时的<code>value</code>属性。对于普通迭代器来说，这个值是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;iter value:&#x27;</span>, <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> generatorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;value:&#x27;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value: 1</span></span><br><span class="line"><span class="comment">// value: 2</span></span><br><span class="line"><span class="comment">// value: 3</span></span><br><span class="line"><span class="comment">// iter value: undefined</span></span><br></pre></td></tr></table></figure><p>对于生成器函数产生的迭代器来说，这个值就是生成器函数返回的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">innerGeneratorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">outerGeneratorFn</span>(<span class="params">genObj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;iter value:&#x27;</span>, <span class="keyword">yield</span>* innerGeneratorFn());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> outerGeneratorFn()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;value:&#x27;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value: foo</span></span><br><span class="line"><span class="comment">// iter value: bar</span></span><br></pre></td></tr></table></figure><h4 id="7-3-2-4-使用yield-实现递归算法"><a href="#7-3-2-4-使用yield-实现递归算法" class="headerlink" title="7.3.2.4   使用yield*实现递归算法*"></a><strong>7.3.2.4   使用</strong><code>yield*</code>实现递归算法*</h4><p><code>yield*</code>最有用的地方是实现递归操作，此时生成器可以产生自身。看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">nTimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* nTimes(n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">yield</span> n - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> nTimes(<span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>在这个例子中，每个生成器首先都会从新创建的生成器对象产出每个值，然后再产出一个整数。结果就是生成器函数会递归地减少计数器值，并实例化另一个生成器对象。从最顶层来看，这就相当于创建一个可迭代对象并返回递增的整数。<br>使用递归生成器结构和<code>yield*</code>可以优雅地表达递归算法。下面是一个图的实现，用于生成一个随机的双向图：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.neighbors = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">connect</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node !== <span class="built_in">this</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.neighbors.add(node);</span><br><span class="line">      node.neighbors.add(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomGraph</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">size</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.nodes = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="comment">// 创建节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">      <span class="built_in">this</span>.nodes.add(<span class="keyword">new</span> Node(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 随机连接节点</span></span><br><span class="line">    <span class="keyword">const</span> threshold = <span class="number">1</span> / size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> <span class="built_in">this</span>.nodes) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> y <span class="keyword">of</span> <span class="built_in">this</span>.nodes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &lt; threshold) &#123;</span><br><span class="line">          x.connect(y);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这个方法仅用于调试</span></span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> <span class="built_in">this</span>.nodes) &#123;</span><br><span class="line">      <span class="keyword">const</span> ids = [...node.neighbors]</span><br><span class="line">                      .map(<span class="function">(<span class="params">n</span>) =&gt;</span> n.id)</span><br><span class="line">                      .join(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;node.id&#125;</span>: <span class="subst">$&#123;ids&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> RandomGraph(<span class="number">6</span>);</span><br><span class="line">g.print();</span><br><span class="line"><span class="comment">// 示例输出：</span></span><br><span class="line"><span class="comment">// 0: 2,3,5</span></span><br><span class="line"><span class="comment">// 1: 2,3,4,5</span></span><br><span class="line"><span class="comment">// 2: 1,3</span></span><br><span class="line"><span class="comment">// 3: 0,1,2,4</span></span><br><span class="line"><span class="comment">// 4: 2,3</span></span><br><span class="line"><span class="comment">// 5: 0,4</span></span><br></pre></td></tr></table></figure><p>图数据结构非常适合递归遍历，而递归生成器恰好非常合用。为此，生成器函数必须接收一个可迭代对象，产出该对象中的每一个值，并且对每个值进行递归。这个实现可以用来测试某个图是否连通，即是否没有不可到达的节点。只要从一个节点开始，然后尽力访问每个节点就可以了。结果就得到了一个非常简洁的深度优先遍历：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">connect</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomGraph</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">size</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">isConnected</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> visitedNodes = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="function"><span class="keyword">function</span>* <span class="title">traverse</span>(<span class="params">nodes</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> nodes) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visitedNodes.has(node)) &#123;</span><br><span class="line">          <span class="keyword">yield</span> node;</span><br><span class="line">          <span class="keyword">yield</span>* traverse(node.neighbors);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取得集合中的第一个节点</span></span><br><span class="line">    <span class="keyword">const</span> firstNode = <span class="built_in">this</span>.nodes[<span class="built_in">Symbol</span>.iterator]().next().value;</span><br><span class="line">    <span class="comment">// 使用递归生成器迭代每个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> traverse([firstNode])) &#123;</span><br><span class="line">      visitedNodes.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> visitedNodes.size === <span class="built_in">this</span>.nodes.size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-3-生成器作为默认迭代器"><a href="#7-3-3-生成器作为默认迭代器" class="headerlink" title="7.3.3　生成器作为默认迭代器"></a>7.3.3　生成器作为默认迭代器</h3><p>因为生成器对象实现了<code>Iterable</code>接口，而且生成器函数和默认迭代器被调用之后都产生迭代器，所以生成器格外适合作为默认迭代器。下面例子中，这个类的默认迭代器可以用一行代码产出类的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  * [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="built_in">this</span>.values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> f) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>这里，<code>for-of</code>循环调用了默认迭代器（且它恰好又是一个生成器函数）并产生了一个生成器对象。这个生成器对象是可迭代的，所以完全可以在迭代中使用。</p><h3 id="7-3-4-提前终止生成器"><a href="#7-3-4-提前终止生成器" class="headerlink" title="7.3.4　提前终止生成器"></a>7.3.4　提前终止生成器</h3><p>与迭代器类似，生成器也支持“可关闭”的概念。一个实现<code>Iterator</code>接口的对象一定有<code>next()</code>方法，还有一个可选的<code>return()</code>方法用于提前终止迭代器。除此之外，生成器对象还有第三个方法：<code>throw()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g);         <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next);    <span class="comment">// f next() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return);  <span class="comment">// f return() &#123; [native code] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.throw);   <span class="comment">// f throw() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p><code>return()</code>和<code>throw()</code>方法都可以用于强制生成器进入关闭状态。</p><h4 id="7-3-4-1return"><a href="#7-3-4-1return" class="headerlink" title="7.3.4.1return()"></a>7.3.4.1<code>return()</code></h4><p><code>return()</code>方法会强制生成器进入关闭状态。提供给<code>return()</code>方法的值，就是终止迭代器对象的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">yield</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g);            <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="number">4</span>));  <span class="comment">// &#123; done: true, value: 4 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g);            <span class="comment">// generatorFn &#123;&lt;closed&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>与迭代器不同，所有生成器对象都有<code>return()</code>方法，只要通过它进入关闭状态，就无法恢复了。后续调用<code>next()</code>会显示<code>done: true</code>状态，而提供的任何返回值都不会被存储或传播：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">yield</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g.next());     <span class="comment">// &#123; done: false, value: 1 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.return(<span class="number">4</span>));  <span class="comment">// &#123; done: true, value: 4 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next());     <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g.next());     <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p><code>for-of</code>循环等内置语言结构会忽略状态为<code>done: true</code>的<code>IteratorObject</code>内部返回的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> g) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    g.return(<span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="7-3-4-2throw"><a href="#7-3-4-2throw" class="headerlink" title="7.3.4.2throw()"></a>7.3.4.2<code>throw()</code></h4><p><code>throw()</code>方法会在暂停的时候将一个提供的错误注入到生成器对象中。如果错误未被处理，生成器就会关闭：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g);   <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  g.throw(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e); <span class="comment">// foo</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(g);   <span class="comment">// generatorFn &#123;&lt;closed&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>但如果生成器函数<strong>内部通过</strong>try/catch处理了这个错误，那么生成器就不会关闭，而且还可以恢复执行。错误处理会跳过对应的<code>yield</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generatorFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">yield</span> x;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = generatorFn();</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: false, value: 1&#125;</span></span><br><span class="line">g.throw(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g.next()); <span class="comment">// &#123; done: false, value: 3&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>如果生成器对象还没有开始执行，那么调用<code>throw()</code>抛出的错误不会在函数内部被捕获，因为这相当于在函数块外部抛出了错误。</p></blockquote><h2 id="7-4-小结"><a href="#7-4-小结" class="headerlink" title="7.4　小结"></a>7.4　小结</h2><p>迭代器是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现<code>Iterable</code>接口的对象都有一个<code>Symbol.iterator</code>属性，这个属性引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现了<code>Iterator</code>接口的对象。</p><p>迭代器必须通过连续调用<code>next()</code>方法才能连续取得值，这个方法返回一个<code>IteratorObject</code>。这个对象包含一个<code>done</code>属性和一个<code>value</code>属性。前者是一个布尔值，表示是否还有更多值可以访问；后者包含迭代器返回的当前值。这个接口可以通过手动反复调用<code>next()</code>方法来消费，也可以通过原生消费者，比如<code>for-of</code>循环来自动消费。</p><p>生成器是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了<code>Iterable</code>接口，因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持<code>yield</code>关键字，这个关键字能够暂停执行生成器函数。使用<code>yield</code>关键字还可以通过<code>next()</code>方法接收输入和产生输出。在加上星号之后，<code>yield</code>关键字可以将跟在它后面的可迭代对象序列化为一连串值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;7-1-理解迭代&quot;&gt;&lt;a href=&quot;#7-1-理解迭代&quot; class=&quot;headerlink&quot; title=&quot;7.1　理解迭代&quot;&gt;&lt;/a&gt;7.1　理解迭代&lt;/h2&gt;&lt;p&gt;在JavaScript中，计数循环就是一种最简单的迭代：&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript高级程序设计(第四版)" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    <category term="07-迭代器与生成器" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/07-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>06-集合引用类型</title>
    <link href="http://example.com/2021/03/28/note/JavaScript/06-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/03/28/note/JavaScript/06-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-03-28T10:46:33.919Z</published>
    <updated>2021-03-28T11:17:58.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-1-Object"><a href="#6-1-Object" class="headerlink" title="6.1　Object"></a>6.1　Object</h2><p>大多数引用值的示例使用的是<code>Object</code>类型。显式地创建<code>Object</code>的实例有两种方式。第一种是使用<code>new</code>操作符和<code>Object</code>构造函数，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br></pre></td></tr></table></figure><p>另一种方式是使用<strong>对象字面量</strong>（object literal）表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量属性的对象的创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  age: <span class="number">29</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>左大括号（<code>&#123;</code>）表示对象字面量开始，因为它出现在一个<strong>表达式上下文</strong>（expression context）中。表达式上下文指的是期待返回值的上下文。赋值操作符表示后面要期待一个值，因此左大括号表示一个表达式的开始。同样是左大括号，如果出现在<strong>语句上下文</strong>（statement context）中，比如<code>if</code>语句的条件后面，则表示一个语句块的开始。逗号用于在对象字面量中分隔属性，在最后一个属性后面加上逗号在老的浏览器中会导致报错，但所有现代浏览器都支持这种写法。<br>在对象字面量表示法中，属性名可以是字符串或数值，注意，数值属性会自动转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也可以用对象字面量表示法来定义一个只有默认属性和方法的对象，只要使用一对大括号，中间留空就行了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;; <span class="comment">// 与new Object()相同</span></span><br><span class="line">person.name = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line">person.age = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>在使用对象字面量表示法定义对象时，并不会实际调用<code>Object</code>构造函数。</p></blockquote><p>虽然使用哪种方式创建<code>Object</code>实例都可以，但实际上开发者更倾向于使用对象字面量表示法。这是因为对象字面量代码更少，看起来也更有封装所有相关数据的感觉。事实上，对象字面量已经成为给函数传递大量可选参数的主要方式，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayInfo</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> args.name == <span class="string">&quot;string&quot;</span>)&#123;</span><br><span class="line">    output += <span class="string">&quot;Name: &quot;</span> + args.name + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> args.age == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    output += <span class="string">&quot;Age: &quot;</span> + args.age + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  alert(output);</span><br><span class="line">&#125;</span><br><span class="line">displayInfo(&#123;</span><br><span class="line">  name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  age: <span class="number">29</span></span><br><span class="line">&#125;);</span><br><span class="line">displayInfo(&#123;</span><br><span class="line">  name: <span class="string">&quot;Greg&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>这种模式非常适合函数有大量可选参数的情况。一般来说，命名参数更直观，但在可选参数过多的时候就显得笨拙了。最好的方式是对必选参数使用命名参数，再通过一个对象字面量来封装多个可选参数。</p></blockquote><p>虽然属性一般是通过<strong>点语法</strong>来存取的，这也是面向对象语言的惯例，但也可以使用中括号来存取属性。在使用中括号时，要在括号内使用属性名的字符串形式，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">&quot;name&quot;</span>]); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name);    <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p>使用中括号的主要优势就是可以通过变量访问属性，就像下面这个例子中一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> propertyName = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person[propertyName]); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure><p>另外，如果属性名中包含可能会导致语法错误的字符，或者包含关键字/保留字时，不能使用点语法来访问，就可以使用中括号语法。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person[<span class="string">&quot;first name&quot;</span>] = <span class="string">&quot;Nicholas&quot;</span>;</span><br></pre></td></tr></table></figure><p>通常，点语法是首选的属性存取方式，除非访问属性时必须使用变量。</p><blockquote><p><strong>注意</strong>第8章将更全面、深入地介绍<code>Object</code>类型。</p></blockquote><h2 id="6-2-Array"><a href="#6-2-Array" class="headerlink" title="6.2 Array"></a>6.2 Array</h2><p>ECMAScript数组跟其他编程语言的数组有很大区别。ECMAScript数组也同样是一组有序的数据，但数组中每个槽位可以存储任意类型的数据。</p><h3 id="6-2-1-创建数组"><a href="#6-2-1-创建数组" class="headerlink" title="6.2.1　创建数组"></a>6.2.1　创建数组</h3><p>有几种基本的方式可以创建数组。一种是使用<code>Array</code>构造函数，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><p>如果知道数组中元素的数量，那么可以给构造函数传入一个数值，然后<code>length</code>属性就会被自动创建并设置为这个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>也可以给<code>Array</code>构造函数传入要保存的元素。比如，下面的代码会创建一个包含3个字符串值的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br></pre></td></tr></table></figure><p>创建数组时可以给构造函数传一个值。如果这个值是数值，则会创建一个长度为指定数值的数组（多个就不会）；而如果这个值是其他类型的，则会创建一个只包含该特定值的数组。下面看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);     <span class="comment">// 创建一个包含3个元素的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>);      <span class="comment">// [2,3]</span></span><br><span class="line"><span class="keyword">let</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;Greg&quot;</span>); <span class="comment">// 创建一个只包含一个元素，即字符串&quot;Greg&quot;的数组</span></span><br></pre></td></tr></table></figure><p>在使用<code>Array</code>构造函数时，也可以省略<code>new</code>操作符。结果是一样的，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="built_in">Array</span>(<span class="number">3</span>);     <span class="comment">// 创建一个包含3个元素的数组</span></span><br></pre></td></tr></table></figure><p>另一种创建数组的方式是使用<strong>数组字面量</strong>（array literal）表示法。数组字面量是在中括号中包含以逗号分隔的元素列表，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];  <span class="comment">// 创建一个包含3个元素的数组</span></span><br><span class="line"><span class="keyword">let</span> names = [];                         <span class="comment">// 创建一个空数组</span></span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>,<span class="number">2</span>,];                    <span class="comment">// 创建一个包含2个元素的数组</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>与对象一样，在使用数组字面量表示法创建数组不会调用<code>Array</code>构造函数。</p></blockquote><p><code>Array</code>构造函数还有两个ES6新增的用于创建数组的静态方法：<code>from()</code>和<code>of()</code>。<code>from()</code>用于将类数组结构转换为数组实例，<code>of()</code>用于将一组参数转换为数组实例。</p><p><code>Array.from()</code>的第一个参数是一个类数组对象，即任何可迭代的结构，或者有一个<code>length</code>属性和可索引元素的结构。这种方式可用于很多场合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串会被拆分为单字符数组</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(<span class="string">&quot;Matt&quot;</span>)); <span class="comment">// [&quot;M&quot;, &quot;a&quot;, &quot;t&quot;, &quot;t&quot;]</span></span><br><span class="line"><span class="comment">// 可以使用from()将集合和映射转换为一个新数组</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">                   .set(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="number">1</span>)</span><br><span class="line">                   .add(<span class="number">2</span>)</span><br><span class="line">                   .add(<span class="number">3</span>)</span><br><span class="line">                   .add(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(m)); <span class="comment">// [[1, 2], [3, 4]]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(s)); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// Array.from()对现有数组执行浅复制</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="built_in">Array</span>.from(a1);</span><br><span class="line"><span class="built_in">console</span>.log(a2);        <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">alert(a1 === a2); <span class="comment">// false</span></span><br><span class="line">alert(a1 == a2); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 可以使用任何可迭代对象</span></span><br><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(iter)); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// arguments对象可以被轻松地转换为数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArgsArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getArgsArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// from()也能转换带有必要属性的自定义对象</span></span><br><span class="line"><span class="keyword">const</span> arrayLikeObject = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">4</span>,</span><br><span class="line">  length: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(arrayLikeObject));<span class="comment">//[1, 2, 3, 4],length非必要</span></span><br></pre></td></tr></table></figure><p><code>Array.from()</code>还接收第二个可选的映射函数参数。这个函数可以直接增强新数组的值，而无须像调用<code>Array.from().map()</code>那样先创建一个中间数组。还可以接收第三个可选参数，用于指定映射函数中<code>this</code>的值。但这个重写的<code>this</code>值在箭头函数中不适用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="built_in">Array</span>.from(a1, <span class="function"><span class="params">x</span> =&gt;</span> x**<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> a3 = <span class="built_in">Array</span>.from(a1, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x**<span class="built_in">this</span>.exponent&#125;, &#123;<span class="attr">exponent</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a2);  <span class="comment">// [1, 4, 9, 16]</span></span><br><span class="line"><span class="built_in">console</span>.log(a3);  <span class="comment">// [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure><p><code>Array.of()</code>可以把一组参数转换为数组。这个方法用于替代在ES6之前常用的<code>Array.prototype.slice.call(arguments)</code>，一种异常笨拙的将<code>arguments</code>对象转换为数组的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="literal">undefined</span>));  <span class="comment">// [undefined]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-2-数组空位"><a href="#6-2-2-数组空位" class="headerlink" title="6.2.2　数组空位"></a>6.2.2　数组空位</h3><p>使用数组字面量初始化数组时，可以使用一串逗号来创建空位（hole）。ECMAScript会将逗号之间相应索引位置的值当成空位，ES6规范重新定义了该如何处理这些空位。</p><p>可以像下面这样创建一个空位数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = [,,,,,]; <span class="comment">// 创建包含5个元素的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(options.length);   <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(options);          <span class="comment">// [,,,,,]</span></span><br></pre></td></tr></table></figure><p>ES6新增方法普遍将这些空位当成存在的元素，只不过值为<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = [<span class="number">1</span>,,,,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> option <span class="keyword">of</span> options) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(option === <span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Array</span>.from([,,,]); <span class="comment">// 使用ES6的Array.from()创建的包含3个空位的数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> a) &#123;</span><br><span class="line">  alert(val === <span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">alert(<span class="built_in">Array</span>.of(...[,,,])); <span class="comment">// [undefined, undefined, undefined]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [index, value] <span class="keyword">of</span> options.entries()) &#123;</span><br><span class="line">  alert(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>ES6之前的方法则会忽略这个空位，但具体的行为也会因方法而异：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = [<span class="number">1</span>,,,,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// map()会跳过空位置</span></span><br><span class="line"><span class="built_in">console</span>.log(options.map(<span class="function">() =&gt;</span> <span class="number">6</span>));  <span class="comment">// [6, undefined, undefined, undefined, 6]</span></span><br><span class="line"><span class="comment">// join()视空位置为空字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(options.join(<span class="string">&#x27;-&#x27;</span>));     <span class="comment">// &quot;1----5&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>由于行为不一致和存在性能隐患，因此实践中要避免使用数组空位。如果确实需要空位，则可以显式地用<code>undefined</code>值代替。</p></blockquote><h3 id="6-2-3-数组索引"><a href="#6-2-3-数组索引" class="headerlink" title="6.2.3　数组索引"></a>6.2.3　数组索引</h3><p>要取得或设置数组的值，需要使用中括号并提供相应值的数字索引，如果把一个值设置给超过数组最大索引的索引，则数组长度会自动扩展到该索引值加1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];  <span class="comment">// 定义一个字符串数组</span></span><br><span class="line">alert(colors[<span class="number">0</span>]);                       <span class="comment">// 显示第一项</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&quot;black&quot;</span>;                    <span class="comment">// 修改第三项</span></span><br><span class="line">colors[<span class="number">3</span>] = <span class="string">&quot;brown&quot;</span>;                    <span class="comment">// 添加第四项</span></span><br></pre></td></tr></table></figure><p>数组中元素的数量保存在<code>length</code>属性中，这个属性始终返回0或大于0的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];  <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line"><span class="keyword">let</span> names = [];                         <span class="comment">// 创建一个空数组</span></span><br><span class="line">alert(colors.length); <span class="comment">// 3</span></span><br><span class="line">alert(names.length);  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>数组<code>length</code>属性的独特之处在于，它不是只读的。通过修改<code>length</code>属性，可以从数组末尾删除或添加元素。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line">colors.length = <span class="number">2</span>;</span><br><span class="line">alert(colors[<span class="number">2</span>]);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果将<code>length</code>设置为大于数组元素数的值，则新添加的元素都将以<code>undefined</code>填充。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];  <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line">colors.length = <span class="number">4</span>;</span><br><span class="line">alert(colors[<span class="number">3</span>]);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这里将数组<code>colors</code>的<code>length</code>设置为4，虽然数组只包含3个元素。位置3在数组中不存在，因此访问其值会返回特殊值<code>undefined</code>。<br>使用<code>length</code>属性可以方便地向数组末尾添加元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];  <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line">colors[colors.length] = <span class="string">&quot;black&quot;</span>;        <span class="comment">// 添加一种颜色（位置3）</span></span><br><span class="line">colors[colors.length] = <span class="string">&quot;brown&quot;</span>;        <span class="comment">// 再添加一种颜色（位置4）</span></span><br></pre></td></tr></table></figure><p>这里，<code>colors</code>数组有一个值被插入到位置99，这中间的所有元素，即位置3~98，实际上并不存在，因此在访问时会返回<code>undefined</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let colors &#x3D; [&quot;re d&quot;, &quot;blue&quot;, &quot;green&quot;];  &#x2F;&#x2F; 创建一个包含3个字符串的数组</span><br><span class="line">colors[99] &#x3D; &quot;black&quot;;                   &#x2F;&#x2F; 添加一种颜色（位置99）</span><br><span class="line">alert(colors.length);                   &#x2F;&#x2F; 100</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>数组最多可以包含4 294 967 295个元素，这对于大多数编程任务应该足够了。如果尝试添加更多项，则会导致抛出错误。</p></blockquote><h3 id="6-2-4-检测数组"><a href="#6-2-4-检测数组" class="headerlink" title="6.2.4　检测数组"></a>6.2.4　检测数组</h3><p>判断一个对象是不是数组，在只有一个网页（因而只有一个全局作用域）的情况下，使用<code>instanceof</code>操作符就足矣：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">  <span class="comment">// 操作数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>instanceof</code>的问题是假定只有一个全局执行上下文。如果网页里有多个框架，则可能涉及两个不同的全局执行上下文，因此就会有两个不同版本的<code>Array</code>构造函数。如果要把数组从一个框架传给另一个框架，则这个数组的构造函数将有别于在第二个框架内本地创建的数组。<br>为解决这个问题，提供了<code>Array.isArray()</code>方法，目的就是确定一个值是否为数组，而不用管它是在哪个全局执行上下文中创建的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))&#123;</span><br><span class="line">  <span class="comment">// 操作数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-5-迭代器方法"><a href="#6-2-5-迭代器方法" class="headerlink" title="6.2.5　迭代器方法"></a>6.2.5　迭代器方法</h3><p>在ES6中，<code>Array</code>的原型上暴露了3个用于检索数组内容的方法：<code>keys()</code>、<code>values()</code>和<code>entries()</code>。<code>keys()</code>返回数组索引的迭代器，<code>values()</code>返回数组元素的迭代器，而<code>entries()</code>返回索引/值对的迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>];</span><br><span class="line"><span class="comment">// 因为这些方法都返回迭代器，所以可以将它们的内容</span></span><br><span class="line"><span class="comment">// 通过Array.from()直接转换为数组实例</span></span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="built_in">Array</span>.from(a.keys());</span><br><span class="line"><span class="keyword">const</span> aValues = <span class="built_in">Array</span>.from(a.values());</span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="built_in">Array</span>.from(a.entries());</span><br><span class="line"><span class="built_in">console</span>.log(aKeys);     <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(aValues);   <span class="comment">// [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(aEntries);  <span class="comment">// [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span></span><br></pre></td></tr></table></figure><p>使用ES6的解构可以非常容易地在循环中拆分键/值对：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [idx, element] <span class="keyword">of</span> a.entries()) &#123;</span><br><span class="line">  alert(idx);</span><br><span class="line">  alert(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// bar</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// baz</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// qux</span></span><br></pre></td></tr></table></figure><h3 id="6-2-6-复制和填充方法"><a href="#6-2-6-复制和填充方法" class="headerlink" title="6.2.6　复制和填充方法"></a>6.2.6　复制和填充方法</h3><p>ES6新增了两个方法：批量复制方法<code>copyWithin()</code>，以及填充数组方法<code>fill()</code>。这两个方法的函数签名类似，都需要指定既有数组实例上的一个范围，包含开始索引，不包含结束索引。使用这个方法不会改变数组的大小。</p><p>使用<code>fill()</code>方法可以向一个已有的数组中插入全部或部分相同的值。开始索引用于指定开始填充的位置，它是可选的。如果不提供结束索引，则一直填充到数组末尾。如果有负值索，则相当于数组长度加上它转换成的一个正索引：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zeroes = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"><span class="comment">// 用5填充整个数组</span></span><br><span class="line">zeroes.fill(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [5, 5, 5, 5, 5]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>);       <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用6填充索引大于等于3的元素</span></span><br><span class="line">zeroes.fill(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 0, 0, 6, 6]</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>);       <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用7填充索引大于等于1且小于3的元素</span></span><br><span class="line">zeroes.fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 7, 7, 0, 0];</span></span><br><span class="line">zeroes.fill(<span class="number">0</span>);       <span class="comment">// 重置</span></span><br><span class="line"><span class="comment">// 用8填充索引大于等于1且小于4的元素</span></span><br><span class="line"><span class="comment">// (-4 + zeroes.length = 1)</span></span><br><span class="line"><span class="comment">// (-1 + zeroes.length = 4)</span></span><br><span class="line">zeroes.fill(<span class="number">8</span>, -<span class="number">4</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 8, 8, 8, 0];</span></span><br></pre></td></tr></table></figure><p><code>fill()</code>静默忽略超出数组边界、零长度及方向相反的索引范围：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zeroes = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"><span class="comment">// 索引过低，忽略</span></span><br><span class="line">zeroes.fill(<span class="number">1</span>, -<span class="number">10</span>, -<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// 索引过高，忽略</span></span><br><span class="line">zeroes.fill(<span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// 索引反向，忽略</span></span><br><span class="line">zeroes.fill(<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 0, 0, 0, 0]</span></span><br><span class="line"><span class="comment">// 索引部分可用，填充可用部分</span></span><br><span class="line">zeroes.fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">console</span>.log(zeroes);  <span class="comment">// [0, 0, 0, 4, 4]</span></span><br></pre></td></tr></table></figure><p><code>copyWithin()</code>会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置。开始索引和结束索引则与<code>fill()</code>使用同样的计算方法，第一个参数，插入到哪个索引的位置，剩下两个参数是复制内容的索引范围。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints,</span><br><span class="line">    reset = <span class="function">() =&gt;</span> ints = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从ints中复制索引0开始的内容，插入到索引5开始的位置</span></span><br><span class="line"><span class="comment">// 在源索引或目标索引到达数组边界时停止</span></span><br><span class="line">ints.copyWithin(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints);  <span class="comment">// [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从ints中复制索引5开始的内容，插入到索引0开始的位置</span></span><br><span class="line">ints.copyWithin(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ints);  <span class="comment">// [5, 6, 7, 8, 9, 5, 6, 7, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 从ints中复制索引0开始到索引3结束的内容</span></span><br><span class="line"><span class="comment">// 插入到索引4开始的位置</span></span><br><span class="line">ints.copyWithin(<span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// JavaScript引擎在插值前会完整复制范围内的值</span></span><br><span class="line"><span class="comment">// 因此复制期间不存在重写的风险</span></span><br><span class="line">ints.copyWithin(<span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 0, 1, 2, 3, 4, 5, 8, 9]</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 支持负索引值，与fill()相对于数组末尾计算正向索引的过程是一样的</span></span><br><span class="line">ints.copyWithin(-<span class="number">4</span>, -<span class="number">7</span>, -<span class="number">3</span>); <span class="comment">//  ints.copyWithin(6, 3, 7);</span></span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 2, 3, 4, 5, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p><code>copyWithin()</code>静默忽略超出数组边界、零长度及方向相反的索引范围：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints,</span><br><span class="line">    reset = <span class="function">() =&gt;</span> ints = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 索引过低，忽略</span></span><br><span class="line">ints.copyWithin(<span class="number">1</span>, -<span class="number">15</span>, -<span class="number">12</span>);</span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span></span><br><span class="line">reset()</span><br><span class="line"><span class="comment">// 索引过高，忽略</span></span><br><span class="line">ints.copyWithin(<span class="number">1</span>, <span class="number">12</span>, <span class="number">15</span>);</span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 索引反向，忽略</span></span><br><span class="line">ints.copyWithin(<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];</span></span><br><span class="line">reset();</span><br><span class="line"><span class="comment">// 索引部分可用，复制、填充可用部分</span></span><br><span class="line">ints.copyWithin(<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>)</span><br><span class="line">alert(ints);  <span class="comment">// [0, 1, 2, 3, 7, 8, 9, 7, 8, 9];</span></span><br></pre></td></tr></table></figure><h3 id="6-2-7-转换方法"><a href="#6-2-7-转换方法" class="headerlink" title="6.2.7　转换方法"></a>6.2.7　转换方法</h3><p>所有对象都有<code>toLocaleString()</code>、<code>toString()</code>和<code>valueOf()</code>方法。其中，<code>valueOf()</code>返回的还是数组本身。而<code>toString()</code>返回由数组中每个值的等效字符串拼接而成的一个逗号分隔的字符串。也就是说，对数组的每个值都会调用其<code>toString()</code>方法，以得到最终的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; <span class="comment">// 创建一个包含3个字符串的数组</span></span><br><span class="line">alert(colors.toString());   <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors.valueOf());    <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors);              <span class="comment">// red,blue,green</span></span><br></pre></td></tr></table></figure><p>因为<code>alert()</code>期待字符串，所以会在后台调用数组的<code>toString()</code>方法，从而得到跟前面一样的结果。<br><code>toLocaleString()</code>方法也可能返回跟<code>toString()</code>和<code>valueOf()</code>相同的结果，但不一定。在调用数组的<code>toLocaleString()</code>方法时，会得到一个逗号分隔的数组值的字符串。它与另外两个方法唯一的区别是，为了得到最终的字符串，会调用数组每个值的<code>toLocaleString()</code>方法，而不是<code>toString()</code>方法。</p><p>如果想使用不同的分隔符，则可以使用<code>join()</code>方法。<code>join()</code>方法接收一个参数，即字符串分隔符，返回包含所有项的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line">alert(colors.join(<span class="string">&quot;,&quot;</span>));     <span class="comment">// red,green,blue</span></span><br><span class="line">alert(colors.join(<span class="string">&quot;||&quot;</span>));    <span class="comment">// red||green||blue</span></span><br></pre></td></tr></table></figure><p>如果不给<code>join()</code>传入任何参数，或者传入<code>undefined</code>，则仍然使用逗号作为分隔符。</p><blockquote><p><strong>注意</strong>如果数组中某一项是<code>null</code>或<code>undefined</code>，则在<code>join()</code>、<code>toLocaleString()</code>、<code>toString()</code>和<code>valueOf()</code>返回的结果中会以空字符串表示。</p></blockquote><h3 id="6-2-8-栈方法"><a href="#6-2-8-栈方法" class="headerlink" title="6.2.8　栈方法"></a>6.2.8　栈方法</h3><p>ECMAScript数组提供了<code>push()</code>和<code>pop()</code>方法，以实现类似栈的行为。</p><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。<code>pop()</code>方法则用于删除数组的最后一项，同时减少数组的<code>length</code>值，返回被删除的项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();                 <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.push(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>);  <span class="comment">// 推入两项</span></span><br><span class="line">alert(colors);  <span class="comment">// [&quot;red&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="keyword">let</span> item = colors.pop();       <span class="comment">// 取得最后一项</span></span><br><span class="line">alert(colors);          <span class="comment">// [&quot;red&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-9-队列方法"><a href="#6-2-9-队列方法" class="headerlink" title="6.2.9　队列方法"></a>6.2.9　队列方法</h3><p><code>shift()</code>，删除数组的第一项并返回它，然后数组长度减1。</p><p><code>shift()</code>和<code>push()</code>，可以把数组当成队列来使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();                 <span class="comment">// 创建一个数组</span></span><br><span class="line"><span class="keyword">let</span> count = colors.push(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>);  <span class="comment">// 推入两项</span></span><br><span class="line"><span class="keyword">let</span> item = colors.shift();  <span class="comment">// 取得第一项</span></span><br><span class="line">alert(item);         <span class="comment">// red</span></span><br><span class="line">alert(colors);       <span class="comment">// [&quot;green&quot;]</span></span><br></pre></td></tr></table></figure><p><code>unshift()</code>方法，就是执行跟<code>shift()</code>相反的操作：在数组开头添加任意多个值，然后返回新的数组长度。</p><h3 id="6-2-10-排序方法"><a href="#6-2-10-排序方法" class="headerlink" title="6.2.10　排序方法"></a>6.2.10　排序方法</h3><p>数组有两个方法可以用来对元素重新排序：<code>reverse()</code>和<code>sort()</code>。<code>reverse()</code>方法就是将数组元素反向排列。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">values.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(values);  <span class="comment">// 5,4,3,2,1</span></span><br></pre></td></tr></table></figure><p>这个方法直观，但不够灵活，所以才有了<code>sort()</code>方法。默认情况下，<code>sort()</code>会按照升序重新排列数组元素，即最小的值在前面，最大的值在后面。为此，<code>sort()</code>会在每一项上调用<code>String()</code>转型函数，然后比较字符串来决定顺序。即使数组的元素都是数值，也会先把数组转换为字符串再比较、排序。因此，即使5小于10，但字符串<code>&quot;10&quot;</code>在字符串<code>&quot;5&quot;</code>的前头，所以10还是会排到5前面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort();</span><br><span class="line">alert(values);  <span class="comment">// 0,1,10,15,5</span></span><br></pre></td></tr></table></figure><p>为此，<code>sort()</code>方法可以接收一个<strong>比较函数</strong>，用于判断哪个值应该排在前面。<br>比较函数接收两个参数，如果第一个参数应该排在第二个参数前面，就返回负值；如果两个参数相等，就返回0；如果第一个参数应该排在第二个参数后面，就返回正值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个比较函数可以适用于大多数数据类型，可以把它当作参数传给sort()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort(compare);</span><br><span class="line">alert(values);  <span class="comment">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure><p>比较函数也可以产生降序效果，只要把返回值交换一下即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort(compare);</span><br><span class="line">alert(values);  <span class="comment">// 15,10,5,1,0</span></span><br></pre></td></tr></table></figure><p>此外，这个比较函数还可简写为一个箭头函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a &lt; b ? <span class="number">1</span> : a &gt; b ? -<span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">alert(values); <span class="comment">// 15,10,5,1,0</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><code>reverse()</code>和<code>sort()</code>都返回调用它们的数组的引用。</p></blockquote><p>如果数组的元素是数值，或者是其<code>valueOf()</code>方法返回数值的对象（如<code>Date</code>对象），还可以更简单，因为比较函数就是要返回小于0、0和大于0的数值，因此减法操作完全可以满足要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value2 - value1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-11-操作方法"><a href="#6-2-11-操作方法" class="headerlink" title="6.2.11　操作方法"></a>6.2.11　操作方法</h3><p><code>concat()</code>方法可以在现有数组全部元素基础上创建一个新数组。它首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组。如果传入一个或多个数组，则<code>concat()</code>会把这些数组的每一项都添加到结果数组。如果参数不是数组，则直接把它们添加到结果数组末尾。原始数组保持不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.concat(<span class="string">&quot;yellow&quot;</span>, [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(colors);   <span class="comment">// [&quot;red&quot;, &quot;green&quot;,&quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2);  <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;brown&quot;]</span></span><br></pre></td></tr></table></figure><p>打平数组参数的行为可以重写，方法是在参数数组上指定一个特殊的符号：<code>Symbol.isConcatSpreadable</code>。这个符号能够阻止<code>concat()</code>打平参数数组。相反，把这个值设置为<code>true</code>可以强制打平类数组对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> newColors = [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;brown&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> moreNewColors = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.isConcatSpreadable]: <span class="literal">true</span>,</span><br><span class="line">  length: <span class="number">2</span>,</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;pink&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;cyan&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">newColors[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 强制不打平数组</span></span><br><span class="line"><span class="keyword">let</span> colors2 = colors.concat(<span class="string">&quot;yellow&quot;</span>, newColors);</span><br><span class="line"><span class="comment">// 强制打平类数组对象</span></span><br><span class="line"><span class="keyword">let</span> colors3 = colors.concat(moreNewColors);</span><br><span class="line"><span class="built_in">console</span>.log(colors);   <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2);  <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, [&quot;black&quot;, &quot;brown&quot;]]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors3);  <span class="comment">// [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;pink&quot;, &quot;cyan&quot;]</span></span><br></pre></td></tr></table></figure><p><code>slice()</code>用于创建一个包含原有数组中一个或多个元素的新数组。<code>slice()</code>方法可以接收一个或两个参数：返回元素的开始索引和结束索引。如果只有一个参数，则<code>slice()</code>会返回该索引到数组末尾的所有元素。如果有两个参数，则<code>slice()</code>返回从开始索引到结束索引对应的所有元素，其中不包含结束索引对应的元素。不影响原始数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> colors2 = colors.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> colors3 = colors.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">alert(colors2);  <span class="comment">// green,blue,yellow,purple</span></span><br><span class="line">alert(colors3);  <span class="comment">// green,blue,yellow</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>如果<code>slice()</code>的参数有负值，那么就以数值长度加上这个负值的结果确定位置。比如，在包含5个元素的数组上调用<code>slice(-2,-1)</code>，就相当于调用<code>slice(3,4)</code>。如果结束位置小于开始位置，则返回空数组。</p></blockquote><p><code>splice()</code>的主要目的是在数组中间插入元素，但有<code>3</code>种不同的方式使用这个方法。</p><ul><li><strong>删除</strong>。需要给<code>splice()</code>传2个参数：要删除的第一个元素的位置和要删除的元素数量。可以从数组中删除任意多个元素，比如<code>splice(0, 2)</code>会删除前两个元素。</li><li><strong>插入</strong>。需要给<code>splice()</code>传3个参数：开始位置、0（要删除的元素数量）和要插入的元素，可以在数组中指定的位置前插入元素。第三个参数之后还可以传任意多个要插入的元素。</li><li><strong>替换</strong>。<code>splice()</code>在删除元素的同时可以在指定位置插入新元素，同样要传入3个参数：开始位置、要删除元素的数量和要插入的任意多个元素。要插入的元素数量不一定跟删除的元素数量一致。</li></ul><p><code>splice()</code>方法始终返回包含了从数组中被删除的元素数组（如果没有删除元素，则返回空数组）。会影响原数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.splice(<span class="number">0</span>,<span class="number">1</span>);  <span class="comment">// 删除第一项</span></span><br><span class="line">alert(colors);                     <span class="comment">// green,blue</span></span><br><span class="line">alert(removed);                    <span class="comment">// red，只有一个元素的数组</span></span><br><span class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;orange&quot;</span>);   <span class="comment">// 在位置1插入两个元素</span></span><br><span class="line">alert(colors);               <span class="comment">// green,yellow,orange,blue</span></span><br><span class="line">alert(removed);              <span class="comment">// 空数组</span></span><br><span class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;purple&quot;</span>);  <span class="comment">// 插入两个值，删除一个元素</span></span><br><span class="line">alert(colors);               <span class="comment">// green,red,purple,orange,blue</span></span><br><span class="line">alert(removed);              <span class="comment">// yellow，只有一个元素的数组</span></span><br></pre></td></tr></table></figure><h3 id="6-2-12-搜索和位置方法"><a href="#6-2-12-搜索和位置方法" class="headerlink" title="6.2.12　搜索和位置方法"></a>6.2.12　搜索和位置方法</h3><p>ECMAScript提供两类搜索数组的方法：按严格相等搜索和按断言函数搜索。</p><h4 id="6-2-12-1-严格相等"><a href="#6-2-12-1-严格相等" class="headerlink" title="6.2.12.1   严格相等"></a><strong>6.2.12.1   严格相等</strong></h4><p>ECMAScript提供了3个严格相等的搜索方法：<code>indexOf()</code>、<code>lastIndexOf()</code>和<code>includes()</code>。这些方法都接收两个参数：要查找的元素和一个可选的起始搜索位置。<code>indexOf()</code>和<code>includes()</code>方法从起始搜索位置（默认第一项）开始向后搜索，而<code>lastIndexOf()</code>从起始搜索位置（默认最后一项）开始向前搜索。</p><p><code>indexOf()</code>和<code>lastIndexOf()</code>都返回要查找的元素在数组中的位置，如果没找到则返回-1。<code>includes()</code>返回布尔值，表示是否至少找到一个与指定元素匹配的项。在比较第一个参数跟数组每一项时，会使用全等（<code>===</code>）比较，也就是必须严格相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">alert(numbers.indexOf(<span class="number">4</span>));          <span class="comment">// 3</span></span><br><span class="line">alert(numbers.lastIndexOf(<span class="number">4</span>));      <span class="comment">// 5</span></span><br><span class="line">alert(numbers.includes(<span class="number">4</span>));         <span class="comment">// true</span></span><br><span class="line">alert(numbers.indexOf(<span class="number">4</span>, <span class="number">4</span>));       <span class="comment">// 5</span></span><br><span class="line">alert(numbers.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>));   <span class="comment">// 3</span></span><br><span class="line">alert(numbers.includes(<span class="number">4</span>, <span class="number">7</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> people = [&#123; <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> morePeople = [person];</span><br><span class="line">alert(people.indexOf(person));      <span class="comment">// -1</span></span><br><span class="line">alert(morePeople.indexOf(person));  <span class="comment">// 0</span></span><br><span class="line">alert(people.includes(person));     <span class="comment">// false</span></span><br><span class="line">alert(morePeople.includes(person)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="6-2-12-2-断言函数"><a href="#6-2-12-2-断言函数" class="headerlink" title="6.2.12.2   断言函数"></a><strong>6.2.12.2   断言函数</strong></h4><p>ECMAScript也允许按照定义的断言函数搜索数组，每个索引都会调用这个函数。断言函数的返回值决定了相应索引的元素是否被认为匹配。</p><p>断言函数接收3个参数：元素、索引和数组本身。其中元素是数组中当前搜索的元素，索引是当前元素的索引，而数组就是正在搜索的数组。断言函数返回真值，表示是否匹配。</p><p><code>find()</code>和<code>findIndex()</code>方法使用了断言函数。这两个方法都从数组的最小索引开始。<code>find()</code>返回第一个匹配的元素，<code>findIndex()</code>返回第一个匹配元素的索引。这两个方法也都接收第二个可选的参数，用于指定断言函数内部<code>this</code>的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;Matt&quot;</span>,</span><br><span class="line">    age: <span class="number">27</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    age: <span class="number">29</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">alert(people.find(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> element.age &lt; <span class="number">28</span>));</span><br><span class="line"><span class="comment">// &#123;name: &quot;Matt&quot;, age: 27&#125;</span></span><br><span class="line">alert(people.findIndex(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> element.age &lt; <span class="number">28</span>));</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>找到匹配项后，这两个方法都不再继续搜索。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">// 找到第一个匹配项后，不会继续搜索</span></span><br><span class="line">evens.find(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">  <span class="built_in">console</span>.log(array);</span><br><span class="line">  <span class="keyword">return</span> element === <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// [2, 4, 6]</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-13-迭代方法"><a href="#6-2-13-迭代方法" class="headerlink" title="6.2.13　迭代方法"></a>6.2.13　迭代方法</h3><p>ECMAScript为数组定义了5个迭代方法。每个方法接收两个参数：以每一项为参数运行的函数，以及可选的作为函数运行上下文的作用域对象（影响函数中<code>this</code>的值）。传给每个方法的函数接收3个参数：数组元素、元素索引和数组本身。这些方法都不改变调用它们的数组。</p><ul><li><code>every()</code>：对数组每一项都运行传入的函数，如果对每一项函数都返回<code>true</code>，则这个方法返回<code>true</code>。</li><li><code>filter()</code>：对数组每一项都运行传入的函数，函数返回<code>true</code>的项会组成数组之后返回。适合从数组中筛选满足给定条件的元素。</li><li><code>forEach()</code>：对数组每一项都运行传入的函数，没有返回值。相当于使用<code>for</code>循环遍历数组</li><li><code>map()</code>：对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组。适合创建一个与原始数组元素一一对应的新数组。</li><li><code>some()</code>：对数组每一项都运行传入的函数，如果有一项函数返回<code>true</code>，则这个方法返回<code>true</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> everyResult = numbers.every(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line">alert(everyResult);  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> someResult = numbers.some(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line">alert(someResult);   <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> filterResult = numbers.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line">alert(filterResult);  <span class="comment">// 3,4,5,4,3</span></span><br><span class="line"><span class="keyword">let</span> mapResult = numbers.map(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line">alert(mapResult);  <span class="comment">// 2,4,6,8,10,8,6,4,2</span></span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行某些操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="6-2-14-归并方法"><a href="#6-2-14-归并方法" class="headerlink" title="6.2.14　归并方法"></a>6.2.14　归并方法</h3></li></ul><p>ECMAScript为数组提供了两个归并方法：<code>reduce()</code>和<code>reduceRight()</code>。这两个方法都会迭代数组的所有项，并在此基础上构建一个最终返回值。<code>reduce()</code>方法从数组第一项开始遍历到最后一项。而<code>reduceRight()</code>从最后一项开始遍历至第一项。</p><p>这两个方法都接收两个参数：对每一项都会运行的归并函数，以及可选的以之为归并起点的初始值。传给<code>reduce()</code>和<code>reduceRight()</code>的函数接收4个参数：上一个归并值、当前项、当前项的索引和数组本身。这个函数返回的任何值都会作为下一次调用同一个函数的第一个参数。如果没有给这两个方法传入可选的第二个参数（作为归并起点值），则第一次迭代将从数组的第二项开始，因此传给归并函数的第一个参数是数组的第一项，第二个参数是数组的第二项。</p><p>可以使用<code>reduce()</code>函数执行累加数组中所有数值的操作，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> sum = values.reduce(<span class="function">(<span class="params">prev, cur, index, array</span>) =&gt;</span> prev + cur);</span><br><span class="line">alert(sum);  <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><code>reduceRight()</code>方法与之类似，只是方向相反。</p><h2 id="6-3-定型数组"><a href="#6-3-定型数组" class="headerlink" title="6.3　定型数组"></a>6.3　定型数组</h2><p>定型数组（typed array）是ECMAScript新增的结构，目的是提升向原生库传输数据的效率。实际上，JavaScript并没有“TypedArray”类型，它所指的其实是一种特殊的包含数值类型的数组。</p><h3 id="6-3-1-历史"><a href="#6-3-1-历史" class="headerlink" title="6.3.1　历史"></a>6.3.1　历史</h3><p>早在2006年，浏览器中增加了用于渲染复杂图形应用程序的编程平台，无须安装任何插件。其目标是开发一套JavaScript API，从而充分利用3D图形API和GPU加速，以便在<code>&lt;canvas&gt;</code>元素上渲染复杂的图形。</p><h4 id="6-3-1-1-WebGL"><a href="#6-3-1-1-WebGL" class="headerlink" title="6.3.1.1   WebGL"></a><strong>6.3.1.1   WebGL</strong></h4><p>最后的JavaScript API是基于OpenGL ES（OpenGL for Embedded Systems）2.0规范的。OpenGL ES是OpenGL专注于2D和3D计算机图形的子集。这个新API被命名为WebGL（Web Graphics Library），有了它，开发者就能够编写涉及复杂图形的应用程序，它会被兼容WebGL的浏览器原生解释执行。</p><p>在WebGL的早期版本中，JavaScript数组与原生数组之间不匹配，出现了性能问题。因为图形驱动程序API通常不需要以JavaScript默认双精度浮点格式传递给它们的数值，而这恰恰是JavaScript数组在内存中的格式。因此，每次WebGL与JavaScript运行时之间传递数组时，WebGL绑定都需要在目标环境分配新数组，以其当前格式迭代数组，然后将数值转型为新数组中的适当格式，这要花费很多时间。</p><h4 id="6-3-1-1-定型数组"><a href="#6-3-1-1-定型数组" class="headerlink" title="6.3.1.1   定型数组"></a><strong>6.3.1.1   定型数组</strong></h4><p>Mozilla为解决这个问题而实现了<code>CanvasFloatArray</code>。这是一个提供JavaScript接口的、C语言风格的浮点值数组。JavaScript运行时使用这个类型可以分配、读取和写入数组。这个数组可以直接传给底层图形驱动程序API，也可以直接从底层获取到。最终，<code>CanvasFloatArray</code>变成了<code>Float32Array</code>，也是定型数组中可用的第一个“类型”。</p><h3 id="6-3-2-ArrayBuffer"><a href="#6-3-2-ArrayBuffer" class="headerlink" title="6.3.2 ArrayBuffer"></a>6.3.2 ArrayBuffer</h3><p><code>ArrayBuffer</code>对象代表储存二进制数据的一段内存，它不能直接读写，只能通过<code>DataView</code>视图和定型数组来读写，视图的作用是以指定格式解读<code>ArrayBuffer</code>存储的二进制数据。</p><p><code>ArrayBuffer</code>是所有定型数组及视图引用的基本单位。</p><blockquote><p><strong>注意</strong><code>SharedArrayBuffer</code>是<code>ArrayBuffer</code>的一个变体，可以无须复制就在执行上下文间传递它。</p></blockquote><p><code>ArrayBuffer()</code>是一个普通的JavaScript构造函数，可用于在内存中分配特定数量的字节空间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);  <span class="comment">// 在内存中分配16字节</span></span><br><span class="line">alert(buf.byteLength);            <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p><code>ArrayBuffer</code>一经创建就不能再调整大小。不过可以使用<code>slice()</code>复制其全部或部分到一个新实例中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = buf1.slice(<span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line">alert(buf2.byteLength);  <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p><code>ArrayBuffer</code>某种程度上类似于C++的<code>malloc()</code>，但也有几个明显的区别。</p><ul><li><code>malloc()</code>在分配失败时会返回一个<code>null</code>指针。<code>ArrayBuffer</code>在分配失败时会抛出错误。</li><li><code>malloc()</code>可以利用虚拟内存，因此最大可分配尺寸只受可寻址系统内存限制。<code>ArrayBuffer</code>分配的内存不能超过<code>Number.MAX_SAFE_INTEGER</code>（<img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/28/gr45RjvVdkUATbH.gif"                      alt="gif _1_.gif"                >)）字节。</li><li><code>malloc()</code>调用成功不会初始化实际的地址。声明<code>ArrayBuffer</code>则会将所有二进制位初始化为0。</li><li>通过<code>malloc()</code>分配的堆内存除非调用<code>free()</code>或程序退出，否则系统不能再使用。而通过声明<code>ArrayBuffer</code>分配的堆内存可以被当成垃圾回收，不用手动释放。<h3 id="6-3-3-DataView"><a href="#6-3-3-DataView" class="headerlink" title="6.3.3 DataView"></a>6.3.3 DataView</h3></li></ul><p><code>DataView</code>视图专为文件I/O和网络I/O设计，其API支持对缓冲数据的高度控制，但相比于其他类型的视图性能也差一些。<code>DataView</code>对缓冲内容没有任何预设，也不能迭代。</p><p>必须在对已有的<code>ArrayBuffer</code>读取或写入时才能创建<code>DataView</code>实例。这个实例可以使用全部或部分<code>ArrayBuffer</code>，且维护着对该缓冲实例的引用，以及视图在缓冲中开始的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="comment">// DataView默认使用整个ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> fullDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line">alert(fullDataView.byteOffset);      <span class="comment">// 0</span></span><br><span class="line">alert(fullDataView.byteLength);      <span class="comment">// 16</span></span><br><span class="line">alert(fullDataView.buffer === buf);  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 构造函数接收一个可选的字节偏移量和字节长度</span></span><br><span class="line"><span class="comment">//   byteOffset=0表示视图从缓冲起点开始</span></span><br><span class="line"><span class="comment">//   byteLength=8限制视图为前8个字节</span></span><br><span class="line"><span class="keyword">const</span> firstHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">alert(firstHalfDataView.byteOffset);      <span class="comment">// 0</span></span><br><span class="line">alert(firstHalfDataView.byteLength);      <span class="comment">// 8</span></span><br><span class="line">alert(firstHalfDataView.buffer === b  uf);  <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 如果不指定，则DataView会使用剩余的缓冲</span></span><br><span class="line"><span class="comment">//   byteOffset=8表示视图从缓冲的第9个字节开始</span></span><br><span class="line"><span class="comment">//   byteLength未指定，默认为剩余缓冲</span></span><br><span class="line"><span class="keyword">const</span> secondHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">8</span>);</span><br><span class="line">alert(secondHalfDataView.byteOffset);      <span class="comment">// 8</span></span><br><span class="line">alert(secondHalfDataView.byteLength);      <span class="comment">// 8</span></span><br><span class="line">alert(secondHalfDataView.buffer === buf);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要通过<code>DataView</code>读取缓冲，还需要几个组件。<br>• 首先是要读或写的字节偏移量。可以看成<code>DataView</code>中的某种“地址”。</p><p>•<code>DataView</code>应该使用<code>ElementType</code>来实现JavaScript的<code>Number</code>类型到缓冲内二进制格式的转换。</p><p>• 最后是内存中值的字节序默认为大端字节序。</p><h4 id="6-3-3-1-ElementType"><a href="#6-3-3-1-ElementType" class="headerlink" title="6.3.3.1 ElementType"></a>6.3.3.1 ElementType</h4><p><code>DataView</code>对存储在缓冲内的数据类型没有预设。它暴露的API强制开发者在读、写时指定一个<code>ElementType</code>，然后<code>DataView</code>为读、写而完成相应的转换。</p><p>ECMAScript 6支持8种不同的<code>ElementType</code>。</p><table><thead><tr><th>ElementType</th><th>字节</th><th>说明</th><th>等价的C类型</th><th>值的范围</th></tr></thead><tbody><tr><td>Int8</td><td>1</td><td>8位有符号整数</td><td>signed char</td><td>-128~127</td></tr><tr><td>Uint8</td><td>1</td><td>8位无符号整数</td><td>unsigned char</td><td>0~255</td></tr><tr><td>Int16</td><td>2</td><td>16位有符号整数</td><td>short</td><td>-32 768~32 767</td></tr><tr><td>Uint16</td><td>2</td><td>16位无符号整数</td><td>unsigned short</td><td>0~65 535</td></tr><tr><td>Int32</td><td>4</td><td>32位有符号整数</td><td>int</td><td>-2 147 483 648~2 147 483 647</td></tr><tr><td>Uint32</td><td>4</td><td>32位无符号整数</td><td>unsigned int</td><td>0~4 294 967 295</td></tr><tr><td>Float32</td><td>4</td><td>32位IEEE-754浮点数</td><td>float</td><td>-3.4e+38~+3.4e+38</td></tr><tr><td>Float64</td><td>8</td><td>64位IEEE-754浮点数</td><td>double</td><td>-1.7e+308~+1.7e+308</td></tr></tbody></table><p><code>DataView</code>为上表中的每种类型都暴露了<code>get</code>和<code>set</code>方法，这些方法使用<code>byteOffset</code>定位要读取或写入值的位置。不同类型之间是可以互换使用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在内存中分配两个字节并声明一个DataView</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="comment">// 说明整个缓冲确实所有二进制位都是0</span></span><br><span class="line"><span class="comment">// 读取缓冲第一个和第二个字节</span></span><br><span class="line">alert(view.getInt8(<span class="number">0</span>));  <span class="comment">// 0</span></span><br><span class="line">alert(view.getInt8(<span class="number">1</span>));  <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 读取整个缓冲</span></span><br><span class="line">alert(view.getInt16(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 将整个缓冲都设置为1</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">255</span>);  <span class="comment">// 255的二进制表示是11111111（2^8 - 1）</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0xFF</span>); <span class="comment">// DataView会自动将数据转换为特定的ElementType，255的十六进制表示是0xFF</span></span><br><span class="line">alert(view.getInt16(<span class="number">0</span>)); <span class="comment">// 如果把它当成二补数的有符号整数，则应该是-1</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3-2-字节序"><a href="#6-3-3-2-字节序" class="headerlink" title="6.3.3.2   字节序"></a><strong>6.3.3.2   字节序</strong></h4><p>前面例子中的缓冲有意回避了字节序的问题。“字节序”指的是计算系统维护的一种字节顺序的约定。<code>DataView</code>只支持两种约定：大端字节序（也称为网络字节序）和小端字节序。大端字节序是最高有效位保存在第一个字节，而最低有效位保存在最后一个字节。小端字节序正好相反。</p><p>JavaScript运行时所在系统的原生字节序决定了如何读取或写入字节，但对一段内存而言，<code>DataView</code>是一个中立接口，它会遵循指定的字节序。<code>DataView</code>的所有API方法都以大端字节序作为默认值，但接收一个可选的布尔值参数，设置为<code>true</code>即可启用小端字节序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在内存中分配两个字节并声明一个DataView</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="comment">// 填充缓冲，让第一位和最后一位都是1</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">0x80</span>); <span class="comment">// 设置最左边的位等于1</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0x01</span>); <span class="comment">// 设置最右边的位等于1</span></span><br><span class="line"><span class="comment">// 缓冲内容（为方便阅读，人为加了空格）</span></span><br><span class="line"><span class="comment">// 1000 0000 0000 0001</span></span><br><span class="line"><span class="comment">// 按大端字节序读取Uint16，0x80是高字节，0x01是低字节</span></span><br><span class="line">alert(view.getUint16(<span class="number">0</span>)); <span class="comment">// 0x8001 = 2^15 + 2^0 = 32769</span></span><br><span class="line"><span class="comment">// 按小端字节序读取Uint16，0x01是高字节，0x80是低字节</span></span><br><span class="line">alert(view.getUint16(<span class="number">0</span>, <span class="literal">true</span>)); <span class="comment">// 0x0180 = 2^8 + 2^7 = 384</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按大端字节序写入Uint16</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0004</span>);</span><br><span class="line"><span class="comment">// 缓冲内容（为方便阅读，人为加了空格）</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0100</span></span><br><span class="line">alert(view.getUint8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line">alert(view.getUint8(<span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0002</span>, <span class="literal">true</span>);<span class="comment">// 按小端字节序写入Uint16</span></span><br><span class="line"><span class="comment">// 缓冲内容（为方便阅读，人为加了空格）</span></span><br><span class="line"><span class="comment">// 0000 0010 0000 0000</span></span><br><span class="line">alert(view.getUint8(<span class="number">0</span>)); <span class="comment">// 2</span></span><br><span class="line">alert(view.getUint8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="6-3-3-3-边界情形"><a href="#6-3-3-3-边界情形" class="headerlink" title="6.3.3.3   边界情形"></a><strong>6.3.3.3   边界情形</strong></h4><p><code>DataView</code>完成读、写操作的前提是必须有充足的缓冲区，否则就会抛出<code>RangeError</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="comment">// 尝试读取部分超出缓冲范围的值</span></span><br><span class="line">view.getInt32(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="comment">// 尝试读取超出缓冲范围的值</span></span><br><span class="line">view.getInt32(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="comment">// 尝试读取超出缓冲范围的值</span></span><br><span class="line">view.getInt32(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br><span class="line"><span class="comment">// 尝试写入超出缓冲范围的值</span></span><br><span class="line">view.setInt32(<span class="number">4</span>, <span class="number">123</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p><code>DataView</code>在写入缓冲里会尽最大努力把一个值转换为适当的类型，后备为0。如果无法转换，则抛出错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="number">1.5</span>);</span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 1</span></span><br><span class="line">view.setInt8(<span class="number">0</span>, [<span class="number">4</span>]);</span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 4</span></span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">alert(view.getInt8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line">view.setInt8(<span class="number">0</span>, <span class="built_in">Symbol</span>());</span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h3 id="6-3-4-定型数组"><a href="#6-3-4-定型数组" class="headerlink" title="6.3.4　定型数组"></a>6.3.4　定型数组</h3><p>定型数组是另一种形式的<code>ArrayBuffer</code>视图。虽然概念上与<code>DataView</code>接近，但区别在于，它特定于一种<code>ElementType</code>且遵循系统原生的字节序。相应地，定型数组提供了适用面更广的API和更高的性能。设计定型数组的目的就是提高与WebGL等原生库交换二进制数据的效率。</p><p>创建定型数组的方式包括读取已有的缓冲、使用自有缓冲、填充可迭代结构，以及填充基于任意类型的定型数组。另外，通过<code>&lt;ElementType&gt;.from()</code>和<code>&lt;ElementType&gt;.of()</code>也可以创建定型数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个12字节的缓冲</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="comment">// 创建一个引用该缓冲的Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(buf);</span><br><span class="line">alert(ints.length); <span class="comment">// 这个定型数组知道自己的每个元素需要4字节，因此长度为3</span></span><br><span class="line"><span class="comment">// 创建一个长度为6的Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints2 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 每个数值使用4字节，因此ArrayBuffer是24字节</span></span><br><span class="line">alert(ints2.length);             <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 类似DataView，定型数组也有一个指向关联缓冲的引用</span></span><br><span class="line">alert(ints2.buffer.byteLength);  <span class="comment">// 24</span></span><br><span class="line"><span class="comment">// 创建一个包含[2, 4, 6, 8]的Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints3 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line">alert(ints3.length);            <span class="comment">// 4</span></span><br><span class="line">alert(ints3.buffer.byteLength); <span class="comment">// 16</span></span><br><span class="line">alert(ints3[<span class="number">2</span>]);                <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 通过复制ints3的值创建一个Int16Array</span></span><br><span class="line"><span class="keyword">const</span> ints4 = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(ints3);</span><br><span class="line"><span class="comment">// 这个新类型数组会分配自己的缓冲</span></span><br><span class="line"><span class="comment">// 对应索引的每个值会相应地转换为新格式</span></span><br><span class="line">alert(ints4.length);            <span class="comment">// 4</span></span><br><span class="line">alert(ints4.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line">alert(ints4[<span class="number">2</span>]);                <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 基于普通数组来创建一个Int16Array</span></span><br><span class="line"><span class="keyword">const</span> ints5 = <span class="built_in">Int16Array</span>.from([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line">alert(ints5.length);            <span class="comment">// 4</span></span><br><span class="line">alert(ints5.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line">alert(ints5[<span class="number">2</span>]);                <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 基于传入的参数创建一个Float32Array</span></span><br><span class="line"><span class="keyword">const</span> floats = <span class="built_in">Float32Array</span>.of(<span class="number">3.14</span>, <span class="number">2.718</span>, <span class="number">1.618</span>);</span><br><span class="line">alert(floats.length);            <span class="comment">// 3</span></span><br><span class="line">alert(floats.buffer.byteLength); <span class="comment">// 12</span></span><br><span class="line">alert(floats[<span class="number">2</span>]);                <span class="comment">// 1.6180000305175781</span></span><br></pre></td></tr></table></figure><p>定型数组的构造函数和实例都有一个<code>BYTES_PER_ELEMENT</code>属性，返回该类型数组中每个元素的大小：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">Int16Array</span>.BYTES_PER_ELEMENT);  <span class="comment">// 2</span></span><br><span class="line">alert(<span class="built_in">Int32Array</span>.BYTES_PER_ELEMENT);  <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">1</span>),</span><br><span class="line">      floats = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">1</span>);</span><br><span class="line">alert(ints.BYTES_PER_ELEMENT);        <span class="comment">// 4</span></span><br><span class="line">alert(floats.BYTES_PER_ELEMENT);      <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>如果定型数组没有用任何值初始化，则其关联的缓冲会以0填充：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">4</span>);</span><br><span class="line">alert(ints[<span class="number">0</span>]);  <span class="comment">// 0</span></span><br><span class="line">alert(ints[<span class="number">1</span>]);  <span class="comment">// 0</span></span><br><span class="line">alert(ints[<span class="number">2</span>]);  <span class="comment">// 0</span></span><br><span class="line">alert(ints[<span class="number">3</span>]);  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="6-3-4-1-定型数组行为"><a href="#6-3-4-1-定型数组行为" class="headerlink" title="6.3.4.1   定型数组行为"></a><strong>6.3.4.1   定型数组行为</strong></h4><p>从很多方面看，定型数组与普通数组都很相似。定型数组支持如下操作符、方法和属性：</p><ol><li><code>[]</code></li><li><code>copyWithin()</code></li><li><code>entries()</code></li><li><code>every()</code></li><li><code>fill()</code></li><li><code>filter()</code></li><li><code>find()</code></li><li><code>findIndex()</code></li><li><code>forEach()</code></li><li><code>indexOf()</code></li><li><code>join()</code></li><li><code>keys()</code></li><li><code>lastIndexOf()</code></li><li><code>length</code></li><li><code>map()</code></li><li><code>reduce()</code></li><li><code>reduceRight()</code></li><li><code>reverse()</code></li><li><code>slice()</code></li><li><code>some()</code></li><li><code>sort()</code></li><li><code>toLocaleString()</code></li><li><code>toString()</code></li><li><code>values()</code></li></ol><p>其中，返回新数组的方法也会返回包含同样元素类型（element type）的新定型数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> doubleints = ints.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="number">2</span>*x);</span><br><span class="line">alert(doubleints <span class="keyword">instanceof</span> <span class="built_in">Int16Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>定型数组有一个<code>Symbol.iterator</code>符号属性，因此可以通过<code>for..of</code>循环和扩展操作符来操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> int <span class="keyword">of</span> ints) &#123;</span><br><span class="line">  alert(int);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">alert(<span class="built_in">Math</span>.max(...ints)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="6-3-4-2-合并、复制和修改定型数组"><a href="#6-3-4-2-合并、复制和修改定型数组" class="headerlink" title="6.3.4.2   合并、复制和修改定型数组"></a><strong>6.3.4.2   合并、复制和修改定型数组</strong></h4><p>定型数组同样使用数组缓冲来存储数据，而数组缓冲无法调整大小。因此，下列方法不适用于定型数组：</p><ol><li><code>concat()</code></li><li><code>pop()</code></li><li><code>push()</code></li><li><code>shift()</code></li><li><code>splice()</code></li><li><code>unshift()</code></li></ol><p>不过，定型数组也提供了两个新方法，可以快速向外或向内复制数据：<code>set()</code>和<code>subarray()</code>。</p><p><code>set()</code>从提供的数组或定型数组中把值复制到当前定型数组中指定的索引位置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建长度为8的int16数组</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// 把定型数组复制为前4个值</span></span><br><span class="line"><span class="comment">// 偏移量默认为索引0</span></span><br><span class="line">container.set(<span class="built_in">Int8Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(container);  <span class="comment">// [1,2,3,4,0,0,0,0]</span></span><br><span class="line"><span class="comment">// 把普通数组复制为后4个值</span></span><br><span class="line"><span class="comment">// 偏移量4表示从索引4开始插入</span></span><br><span class="line">container.set([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(container);  <span class="comment">// [1,2,3,4,5,6,7,8]</span></span><br><span class="line"><span class="comment">// 溢出会抛出错误</span></span><br><span class="line">container.set([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], <span class="number">7</span>);</span><br><span class="line"><span class="comment">// RangeError</span></span><br></pre></td></tr></table></figure><p><code>subarray()</code>执行与<code>set()</code>相反的操作，它会基于从原始定型数组中复制的值返回一个新定型数组。复制值时的开始索引和结束索引是可选的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="built_in">Int16Array</span>.of(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// 把整个数组复制为一个同类型的新数组</span></span><br><span class="line"><span class="keyword">const</span> fullCopy = source.subarray();</span><br><span class="line"><span class="built_in">console</span>.log(fullCopy);  <span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"><span class="comment">// 从索引2开始复制数组</span></span><br><span class="line"><span class="keyword">const</span> halfCopy = source.subarray(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(halfCopy);  <span class="comment">// [6, 8]</span></span><br><span class="line"><span class="comment">// 从索引1开始复制到索引3</span></span><br><span class="line"><span class="keyword">const</span> partialCopy = source.subarray(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(partialCopy);  <span class="comment">// [4, 6]</span></span><br></pre></td></tr></table></figure><p>定型数组没有原生的拼接能力，但使用定型数组API提供的很多工具可以手动构建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是应该返回的数组类型</span></span><br><span class="line"><span class="comment">// 其余参数是应该拼接在一起的定型数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typedArrayConcat</span>(<span class="params">typedArrayConstructor, ...typedArrays</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 计算所有数组中包含的元素总数</span></span><br><span class="line">  <span class="keyword">const</span> numElements = typedArrays.reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> (x.length || x) + y.length);</span><br><span class="line">  <span class="comment">// 按照提供的类型创建一个数组，为所有元素留出空间</span></span><br><span class="line">  <span class="keyword">const</span> resultArray = <span class="keyword">new</span> typedArrayConstructor(numElements);</span><br><span class="line">  <span class="comment">// 依次转移数组</span></span><br><span class="line">  <span class="keyword">let</span> currentOffset = <span class="number">0</span>;</span><br><span class="line">  typedArrays.map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    resultArray.set(x, currentOffset);</span><br><span class="line">    currentOffset += x.length;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> resultArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> concatArray = typedArrayConcat(<span class="built_in">Int32Array</span>,</span><br><span class="line">                                     <span class="built_in">Int8Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                                     <span class="built_in">Int16Array</span>.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">                                     <span class="built_in">Float32Array</span>.of(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line"><span class="built_in">console</span>.log(concatArray);  <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(concatArray <span class="keyword">instanceof</span> <span class="built_in">Int32Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="6-3-4-3-下溢和上溢"><a href="#6-3-4-3-下溢和上溢" class="headerlink" title="6.3.4.3*下溢和上溢**"></a>6.3.4.3*<em>下溢和上溢**</em></h4><p>定型数组中值的下溢和上溢不会影响到其他索引，但仍然需要考虑数组的元素应该是什么类型。定型数组对于可以存储的每个索引只接受一个相关位，而不考虑它们对实际数值的影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 长度为2的有符号整数数组</span></span><br><span class="line"><span class="comment">// 每个索引保存一个二补数形式的有符号整数</span></span><br><span class="line"><span class="comment">// 范围是-128（-1 * 2^7）~127（2^7 - 1）</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 长度为2的无符号整数数组</span></span><br><span class="line"><span class="comment">// 每个索引保存一个无符号整数</span></span><br><span class="line"><span class="comment">// 范围是0~255（2^7 - 1）</span></span><br><span class="line"><span class="keyword">const</span> unsignedInts = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 上溢的位不会影响相邻索引</span></span><br><span class="line"><span class="comment">// 索引只取最低有效位上的8位</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">256</span>;      <span class="comment">// 0x100</span></span><br><span class="line"><span class="built_in">console</span>.log(unsignedInts);  <span class="comment">// [0, 0]</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">511</span>;      <span class="comment">// 0x1FF</span></span><br><span class="line"><span class="built_in">console</span>.log(unsignedInts);  <span class="comment">// [0, 255]</span></span><br><span class="line"><span class="comment">// 下溢的位会被转换为其无符号的等价值</span></span><br><span class="line"><span class="comment">// 0xFF是以二补数形式表示的-1（截取到8位）,</span></span><br><span class="line"><span class="comment">// 但255是一个无符号整数</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = -<span class="number">1</span>        <span class="comment">// 0xFF (truncated to 8 bits)</span></span><br><span class="line"><span class="built_in">console</span>.log(unsignedInts);  <span class="comment">// [0, 255]</span></span><br><span class="line"><span class="comment">// 上溢自动变成二补数形式</span></span><br><span class="line"><span class="comment">// 0x80是无符号整数的128，是二补数形式的-128</span></span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">128</span>;        <span class="comment">// 0x80</span></span><br><span class="line"><span class="built_in">console</span>.log(ints);    <span class="comment">// [0, -128]</span></span><br><span class="line"><span class="comment">// 下溢自动变成二补数形式</span></span><br><span class="line"><span class="comment">// 0xFF是无符号整数的255，是二补数形式的-1</span></span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">255</span>;        <span class="comment">// 0xFF</span></span><br><span class="line"><span class="built_in">console</span>.log(ints);    <span class="comment">// [0, -1]</span></span><br></pre></td></tr></table></figure><p>除了8种元素类型，还有一种“夹板”数组类型：<code>Uint8ClampedArray</code>，不允许任何方向溢出。超出最大值255的值会被向下舍入为255，而小于最小值0的值会被向上舍入为0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clampedInts = <span class="keyword">new</span> <span class="built_in">Uint8ClampedArray</span>([-<span class="number">1</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">256</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(clampedInts); <span class="comment">// [0, 0, 255, 255]</span></span><br></pre></td></tr></table></figure><p><code>Uint8ClampedArray</code>完全是HTML5<code>canvas</code>元素的历史留存，除非真的做跟<code>canvas</code>相关的开发，否则不要使用它。</p><h2 id="6-4Map"><a href="#6-4Map" class="headerlink" title="6.4Map"></a>6.4<code>Map</code></h2><p><code>Map</code>是一种新的集合类型，<code>Map</code>的大多数特性都可以通过<code>Object</code>类型实现，但二者之间还是存在一些细微的差异。具体实践中使用哪一个，值得细细甄别。</p><h3 id="6-4-1-基本API"><a href="#6-4-1-基本API" class="headerlink" title="6.4.1　基本API"></a>6.4.1　基本API</h3><p>使用<code>new</code>关键字和<code>Map</code>构造函数可以创建一个空映射：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure><p>如果想在创建的同时初始化实例，可以给<code>Map</code>构造函数传入一个可迭代对象，需要包含键/值对数组。可迭代对象中的每个键/值对都会按照迭代顺序插入到新映射实例中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用嵌套数组初始化映射</span></span><br><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line">alert(m1.size); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用自定义迭代器初始化映射</span></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>];</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>];</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">alert(m2.size); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 映射期待的键/值对，无论是否提供</span></span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>([[]]);</span><br><span class="line">alert(m3.has(<span class="literal">undefined</span>));  <span class="comment">// true</span></span><br><span class="line">alert(m3.get(<span class="literal">undefined</span>));  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>初始化之后，可以使用<code>set()</code>方法再添加键/值对。另外，可以使用<code>get()</code>和<code>has()</code>进行查询，可以通过<code>size</code>属性获取映射中的键/值对的数量，还可以使用<code>delete()</code>和<code>clear()</code>删除值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">alert(m.has(<span class="string">&quot;firstName&quot;</span>));  <span class="comment">// false</span></span><br><span class="line">alert(m.get(<span class="string">&quot;firstName&quot;</span>));  <span class="comment">// undefined</span></span><br><span class="line">alert(m.size);              <span class="comment">// 0</span></span><br><span class="line">m.set(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"> .set(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line">alert(m.has(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">alert(m.get(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// Matt</span></span><br><span class="line">alert(m.size);             <span class="comment">// 2</span></span><br><span class="line">m.delete(<span class="string">&quot;firstName&quot;</span>);     <span class="comment">// 只删除这一个键/值对</span></span><br><span class="line">alert(m.has(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">alert(m.size);             <span class="comment">// 1</span></span><br><span class="line">m.clear(); <span class="comment">// 清除这个映射实例中的所有键/值对</span></span><br><span class="line">alert(m.has(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">alert(m.has(<span class="string">&quot;lastName&quot;</span>));  <span class="comment">// false</span></span><br><span class="line">alert(m.size);             <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>set()</code>方法返回映射实例，因此可以把多个操作连缀起来，包括初始化声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>);</span><br><span class="line">m.set(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>)</span><br><span class="line"> .set(<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>);</span><br><span class="line">alert(m.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>与<code>Object</code>只能使用数值、字符串或符号作为键不同，<code>Map</code>可以使用任何JavaScript数据类型作为键。映射的值与<code>Object</code>类似，是没有限制的。<code>Map</code>内部使用SameValueZero比较操作（ECMAScript规范内部定义，语言中不能使用），基本上相当于使用严格对象相等的标准来检查键的匹配性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> functionKey = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> objectKey = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">m.set(functionKey, <span class="string">&quot;functionValue&quot;</span>);</span><br><span class="line">m.set(symbolKey, <span class="string">&quot;symbolValue&quot;</span>);</span><br><span class="line">m.set(objectKey, <span class="string">&quot;objectValue&quot;</span>);</span><br><span class="line">alert(m.get(functionKey));  <span class="comment">// functionValue</span></span><br><span class="line">alert(m.get(symbolKey));    <span class="comment">// symbolValue</span></span><br><span class="line">alert(m.get(objectKey));    <span class="comment">// objectValue</span></span><br><span class="line"><span class="comment">// SameValueZero比较意味着独立实例不冲突</span></span><br><span class="line">alert(m.get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>与严格相等一样，在映射中用作键和值的对象及其他“集合”类型，在自己的内容或属性被修改时仍然保持不变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> objKey = &#123;&#125;,</span><br><span class="line">      objVal = &#123;&#125;,</span><br><span class="line">      arrKey = [],</span><br><span class="line">      arrVal = [];</span><br><span class="line">m.set(objKey, objVal);</span><br><span class="line">m.set(arrKey, arrVal);</span><br><span class="line">objKey.foo = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">objVal.bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">arrKey.push(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">arrVal.push(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.get(objKey)); <span class="comment">// &#123;bar: &quot;bar&quot;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(arrKey)); <span class="comment">// [&quot;bar&quot;]</span></span><br></pre></td></tr></table></figure><p>SameValueZero比较也可能导致意想不到的冲突：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">0</span>/<span class="string">&quot;&quot;</span>, <span class="comment">// NaN</span></span><br><span class="line">      b = <span class="number">0</span>/<span class="string">&quot;&quot;</span>, <span class="comment">// NaN</span></span><br><span class="line">      pz = +<span class="number">0</span>,</span><br><span class="line">      nz = -<span class="number">0</span>;</span><br><span class="line">alert(a === b);   <span class="comment">// false</span></span><br><span class="line">alert(pz === nz); <span class="comment">// true</span></span><br><span class="line">m.set(a, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">m.set(pz, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">alert(m.get(b));  <span class="comment">// foo</span></span><br><span class="line">alert(m.get(nz)); <span class="comment">// bar</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>SameValueZero是ECMAScript规范新增的相等性比较算法。关于ECMAScript的相等性比较，可以参考MDN文档中的文章“Equality Comparisons and Sameness”。</p></blockquote><h3 id="6-4-2-顺序与迭代"><a href="#6-4-2-顺序与迭代" class="headerlink" title="6.4.2　顺序与迭代"></a>6.4.2　顺序与迭代</h3><p>与<code>Object</code>类型的一个主要差异是，<code>Map</code>实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作。</p><p>映射实例可以提供一个迭代器（<code>Iterator</code>），能以插入顺序生成<code>[key, value]</code>形式的数组。可以通过<code>entries()</code>方法（或者<code>Symbol.iterator</code>属性，它引用<code>entries()</code>）取得这个迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line">alert(m.entries === m[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m.entries()) &#123;</span><br><span class="line">  alert(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [key1,val1]</span></span><br><span class="line"><span class="comment">// [key2,val2]</span></span><br><span class="line"><span class="comment">// [key3,val3]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">  alert(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [key1,val1]</span></span><br><span class="line"><span class="comment">// [key2,val2]</span></span><br><span class="line"><span class="comment">// [key3,val3]</span></span><br></pre></td></tr></table></figure><p>因为<code>entries()</code>是默认迭代器，所以可以直接对映射实例使用扩展操作，把映射转换为数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log([...m]); <span class="comment">// [[key1,val1],[key2,val2],[key3,val3]]</span></span><br></pre></td></tr></table></figure><p>如果不使用迭代器，而是使用回调方式，则可以调用映射的<code>forEach(callback, opt_thisArg)</code>方法并传入回调，依次迭代每个键/值对。传入的回调接收可选的第二个参数，这个参数用于重写回调内部<code>this</code>的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line">m.forEach(<span class="function">(<span class="params">val, key</span>) =&gt;</span> alert(<span class="string">`<span class="subst">$&#123;key&#125;</span> -&gt; <span class="subst">$&#123;val&#125;</span>`</span>));</span><br><span class="line"><span class="comment">// key1 -&gt; val1</span></span><br><span class="line"><span class="comment">// key2 -&gt; val2</span></span><br><span class="line"><span class="comment">// key3 -&gt; val3</span></span><br></pre></td></tr></table></figure><p><code>keys()</code>和<code>values()</code>分别返回以插入顺序生成键和值的迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">  alert(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="comment">// key3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.values()) &#123;</span><br><span class="line">  alert(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value1</span></span><br><span class="line"><span class="comment">// value2</span></span><br><span class="line"><span class="comment">// value3</span></span><br></pre></td></tr></table></figure><p>键和值在迭代器遍历时是可以修改的，但映射内部的引用则无法修改。当然，这并不妨碍修改作为键或值的对象内部的属性，因为这样并不影响它们在映射实例中的身份：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 作为键的字符串原始值是不能修改的</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m1.keys()) &#123;</span><br><span class="line">  key = <span class="string">&quot;newKey&quot;</span>;</span><br><span class="line">  alert(key);             <span class="comment">// newKey</span></span><br><span class="line">  alert(m1.get(<span class="string">&quot;key1&quot;</span>));  <span class="comment">// val1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> keyObj = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [keyObj, <span class="string">&quot;val1&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// 修改了作为键的对象的属性，但对象在映射内部仍然引用相同的值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> m.keys()) &#123;</span><br><span class="line">  key.id = <span class="string">&quot;newKey&quot;</span>;</span><br><span class="line">  alert(key);            <span class="comment">// &#123;id: &quot;newKey&quot;&#125;</span></span><br><span class="line">  alert(m.get(keyObj));  <span class="comment">// val1</span></span><br><span class="line">&#125;</span><br><span class="line">alert(keyObj);           <span class="comment">// &#123;id: &quot;newKey&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-3-选择Object还是Map"><a href="#6-4-3-选择Object还是Map" class="headerlink" title="6.4.3　选择Object还是Map"></a>6.4.3　选择<code>Object</code>还是<code>Map</code></h3><ol><li><strong>内存占用</strong></li></ol><p>存储单个键/值对所占用的内存数量都会随键的数量线性增加。批量添加或删除键/值对则取决于各浏览器对该类型内存分配的工程实现,但给定固定大小的内存，<code>Map</code>大约可以比<code>Object</code>多存储50%的键/值对。</p><ol start="2"><li><strong>插入性能</strong></li></ol><p>向<code>Object</code>和<code>Map</code>中插入新键/值对的消耗大致相当，不过插入<code>Map</code>在所有浏览器中一般会稍微快一点儿。对这两个类型来说，插入速度并不会随着键/值对数量而线性增加。如果代码涉及大量插入操作，那么显然<code>Map</code>的性能更佳。</p><ol start="3"><li><strong>查找速度</strong></li></ol><p>从大型<code>Object</code>和<code>Map</code>中查找键/值对的性能差异极小，但如果只包含少量键/值对，则<code>Object</code>有时候速度更快。在把<code>Object</code>当成数组使用的情况下（比如使用连续整数作为属性），浏览器引擎可以进行优化，在内存中使用更高效的布局。这对<code>Map</code>来说是不可能的。对这两个类型而言，查找速度不会随着键/值对数量增加而线性增加。如果代码涉及大量查找操作，那么某些情况下可能选择<code>Object</code>更好一些。</p><ol start="4"><li><strong>删除性能</strong></li></ol><p>使用<code>delete</code>删除<code>Object</code>属性的性能一直以来饱受诟病，为此，出现了一些伪删除对象属性的操作，包括把属性值设置为<code>undefined</code>或<code>null</code>。如果代码涉及大量删除操作，那么毫无疑问应该选择<code>Map</code>。</p><h2 id="6-5WeakMap"><a href="#6-5WeakMap" class="headerlink" title="6.5WeakMap"></a>6.5<code>WeakMap</code></h2><p>ECMAScript 6新增的“弱映射”（<code>WeakMap</code>）是一种新的集合类型，为这门语言带来了增强的键/值对存储机制。<code>WeakMap</code>是<code>Map</code>的“兄弟”类型，其API也是<code>Map</code>的子集。<code>WeakMap</code>中的“weak”（弱），描述的是JavaScript垃圾回收程序对待“弱映射”中键的弱引用。</p><h3 id="6-5-1-基本API"><a href="#6-5-1-基本API" class="headerlink" title="6.5.1　基本API"></a>6.5.1　基本API</h3><p>可以使用<code>new</code>关键字实例化一个空的<code>WeakMap</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br></pre></td></tr></table></figure><p>弱映射中的键只能是<code>Object</code>或者继承自<code>Object</code>的类型，尝试使用非对象设置键会抛出<code>TypeError</code>。值的类型没有限制。<br>如果想在初始化时填充弱映射，则构造函数可以接收一个可迭代对象，其中需要包含键/值对数组。可迭代对象中的每个键/值都会按照迭代顺序插入新实例中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      key2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      key3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 使用嵌套数组初始化弱映射</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([</span><br><span class="line">  [key1, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [key2, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [key3, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line">alert(wm.get(key1)); <span class="comment">// val1</span></span><br><span class="line">alert(wm.get(key2)); <span class="comment">// val2</span></span><br><span class="line">alert(wm.get(key3)); <span class="comment">// val3</span></span><br><span class="line"><span class="comment">// 初始化是全有或全无的操作</span></span><br><span class="line"><span class="comment">// 只要有一个键无效就会抛出错误，导致整个初始化失败</span></span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([</span><br><span class="line">  [key1, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;BADKEY&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">  [key3, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as WeakMap key</span></span><br><span class="line"><span class="keyword">typeof</span> wm2;</span><br><span class="line"><span class="comment">// ReferenceError: wm2 is not defined</span></span><br><span class="line"><span class="comment">// 原始值可以先包装成对象再用作键</span></span><br><span class="line"><span class="keyword">const</span> stringKey = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> wm3 = <span class="keyword">new</span> <span class="built_in">WeakMap</span>([</span><br><span class="line">  stringKey, <span class="string">&quot;val1&quot;</span></span><br><span class="line">]);</span><br><span class="line">alert(wm3.get(stringKey)); <span class="comment">// &quot;val1&quot;</span></span><br></pre></td></tr></table></figure><p>初始化之后同样可以使用<code>set()</code>再添加键/值对，可以使用<code>get()</code>和<code>has()</code>查询，还可以使用<code>delete()</code>删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      key2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;;</span><br><span class="line">alert(wm.has(key1)); <span class="comment">// false</span></span><br><span class="line">alert(wm.get(key1)); <span class="comment">// undefined</span></span><br><span class="line">wm.set(key1, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line">  .set(key2, <span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line">alert(wm.has(key1)); <span class="comment">// true</span></span><br><span class="line">alert(wm.get(key1)); <span class="comment">// Matt</span></span><br><span class="line">wm.delete(key1);     <span class="comment">// 只删除这一个键/值对</span></span><br><span class="line">alert(wm.has(key1)); <span class="comment">// false</span></span><br><span class="line">alert(wm.has(key2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>set()</code>方法也返回弱映射实例，因此可以把多个操作连缀起来，包括初始化声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      key2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      key3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>().set(key1, <span class="string">&quot;val1&quot;</span>);</span><br><span class="line">wm.set(key2, <span class="string">&quot;val2&quot;</span>)</span><br><span class="line">  .set(key3, <span class="string">&quot;val3&quot;</span>);</span><br><span class="line">alert(wm.get(key1)); <span class="comment">// val1</span></span><br><span class="line">alert(wm.get(key2)); <span class="comment">// val2</span></span><br><span class="line">alert(wm.get(key3)); <span class="comment">// val3</span></span><br></pre></td></tr></table></figure><h3 id="6-5-2-弱键"><a href="#6-5-2-弱键" class="headerlink" title="6.5.2　弱键"></a>6.5.2　弱键</h3><p><code>WeakMap</code>中“weak”表示弱映射的键是“弱弱地拿着”的。意思就是，这些键不属于正式的引用，不会阻止垃圾回收。但弱映射中值的引用可<strong>不是</strong>“弱弱地拿着”的。只要键存在，键/值对就会存在于映射中，并被当作对值的引用，因此就不会被当作垃圾回收。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(&#123;&#125;, <span class="string">&quot;val&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>set()</code>方法初始化了一个新对象并将它用作一个字符串的键。因为没有指向这个对象的其他引用，所以当这行代码执行完成后，这个对象键就会被当作垃圾回收。然后，这个键/值对就从弱映射中消失了，使其成为一个空映射。这个例子中，因为值也没有被引用，所以这对键/值被破坏以后，值本身也会成为垃圾回收的目标。<br>再看一个稍微不同的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> container = &#123;</span><br><span class="line">  key: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">wm.set(container.key, <span class="string">&quot;val&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeReference</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  container.key = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>container</code>对象维护着一个对弱映射键的引用，因此这个对象键不会成为垃圾回收的目标。但如果调用了<code>removeReference()</code>，就会摧毁键对象的最后一个引用，垃圾回收程序就可以把这个键/值对清理掉，这也是使用<code>WeakMap</code>的目的。因为当没有任何指向这个对象的引用的时候，就只有<code>WeakMap</code>对键对象的弱引用，而弱引用不会阻止垃圾回收。</p><h3 id="6-5-3-不可迭代键"><a href="#6-5-3-不可迭代键" class="headerlink" title="6.5.3　不可迭代键"></a>6.5.3　不可迭代键</h3><p>因为<code>WeakMap</code>中的键/值对任何时候都可能被销毁，所以没有提供迭代其键/值对的能力，同时也没有像<code>clear()</code>这样一次性销毁所有键/值的方法。因为不能迭代，所以也不可能在不知道对象引用的情况下从弱映射中取得值。即便代码可以访问<code>WeakMap</code>实例，也没办法看到其中的内容，因为有可能已经被回收了。</p><p>如果<code>WeakMap</code>实例允许原始值，那就没办法区分初始化时使用的字符串字面量和初始化之后使用的一个相等的字符串了。</p><p>因为原始值是按值传递，这样的话实例中的键与变量<code>key</code>就失去联系了，即便变量<code>key</code>的内存被回收了，实例中的键也还存在，重新创建一个和之前字符串相等的变量就可以获得键值对的信息，所以<code>WeakMap</code>实例只用对象作为键，保证只有通过键对象的引用才能取得值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;abc&#x27;</span> </span><br><span class="line">wm.set(key, <span class="number">100</span>) </span><br></pre></td></tr></table></figure><h3 id="6-5-4-使用弱映射"><a href="#6-5-4-使用弱映射" class="headerlink" title="6.5.4　使用弱映射"></a>6.5.4　使用弱映射</h3><h4 id="6-5-4-1-私有变量"><a href="#6-5-4-1-私有变量" class="headerlink" title="*6.5.4.1   私有变量**"></a>*<em>6.5.4.1   私有变量**</em></h4><p>弱映射造就了在JavaScript中实现真正私有变量的一种新方式。前提很明确：私有变量会存储在弱映射中，以对象实例为键，以私有成员的字典为值。</p><p>下面是一个示例实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.idProperty = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.setId(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setPrivate</span>(<span class="params">property, value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> privateMembers = wm.get(<span class="built_in">this</span>) || &#123;&#125;;</span><br><span class="line">    privateMembers[property] = value;</span><br><span class="line">    wm.set(<span class="built_in">this</span>, privateMembers);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getPrivate</span>(<span class="params">property</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> wm.get(<span class="built_in">this</span>)[property];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">setId</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setPrivate(<span class="built_in">this</span>.idProperty, id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getId</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getPrivate(<span class="built_in">this</span>.idProperty);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 123</span></span><br><span class="line">user.setId(<span class="number">456</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 456</span></span><br><span class="line"><span class="comment">// 并不是真正私有的</span></span><br><span class="line">alert(wm.get(user)[user.idProperty]); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>于上面的实现，外部代码只需要拿到对象实例的引用和弱映射，就可以取得“私有”变量了。为了避免这种访问，可以用一个闭包把<code>WeakMap</code>包装起来，这样就可以把弱映射与外界完全隔离开了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.idProperty = <span class="built_in">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">      <span class="built_in">this</span>.setId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">setPrivate</span>(<span class="params">property, value</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> privateMembers = wm.get(<span class="built_in">this</span>) || &#123;&#125;;</span><br><span class="line">      privateMembers[property] = value;</span><br><span class="line">      wm.set(<span class="built_in">this</span>, privateMembers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getPrivate</span>(<span class="params">property</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> wm.get(<span class="built_in">this</span>)[property];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">setId</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setPrivate(<span class="built_in">this</span>.idProperty, id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getId</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.getPrivate(<span class="built_in">this</span>.idProperty);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> User;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 123</span></span><br><span class="line">user.setId(<span class="number">456</span>);</span><br><span class="line">alert(user.getId()); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>这样拿不到弱映射中的健，也就无法取得弱映射中对应的值。虽然这防止了前面提到的访问，但整个代码也完全陷入了ES6之前的闭包私有变量模式。</p><h4 id="6-5-4-2-DOM节点元数据"><a href="#6-5-4-2-DOM节点元数据" class="headerlink" title="6.5.4.2   DOM节点元数据"></a><strong>6.5.4.2   DOM节点元数据</strong></h4><p>因为<code>WeakMap</code>实例不会妨碍垃圾回收，所以非常适合保存关联元数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#login&#x27;</span>);</span><br><span class="line"><span class="comment">// 给这个节点关联一些元数据</span></span><br><span class="line">wm.set(loginButton, &#123;<span class="attr">disabled</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><p>假设代码执行后，页面被JavaScript改变了，原来的登录按钮从DOM树中被删掉了，那么当节点从DOM树中被删除后，垃圾回收程序就可以立即释放其内存（假设没有其他地方引用这个对象）。<br>但如果使用映射，由于映射中还保存着按钮的引用，所以对应的DOM节点仍然会逗留在内存中，除非明确将其从映射中删除或者等到映射本身被销毁。</p><h2 id="6-6Set"><a href="#6-6Set" class="headerlink" title="6.6Set"></a>6.6<code>Set</code></h2><p>ECMAScript 6新增的<code>Set</code>是一种新集合类型。<code>Set</code>在很多方面都像是加强的<code>Map</code>，这是因为它们的大多数API和行为都是共有的。</p><h3 id="6-6-1-基本API"><a href="#6-6-1-基本API" class="headerlink" title="6.6.1　基本API"></a>6.6.1　基本API</h3><p>使用<code>new</code>关键字和<code>Set</code>构造函数可以创建一个空集合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>如果想在创建的同时初始化实例，则可以给<code>Set</code>构造函数传入一个可迭代对象，其中需要包含插入到新集合实例中的元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组初始化集合</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line">alert(s1.size); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 使用自定义迭代器初始化集合</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;val1&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;val2&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;val3&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">alert(s2.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>初始化之后，可以使用<code>add()</code>增加值，使用<code>has()</code>查询，通过<code>size</code>取得元素数量，以及使用<code>delete()</code>和<code>clear()</code>删除元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">alert(s.has(<span class="string">&quot;Matt&quot;</span>));    <span class="comment">// false</span></span><br><span class="line">alert(s.size);           <span class="comment">// 0</span></span><br><span class="line">s.add(<span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"> .add(<span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line">alert(s.has(<span class="string">&quot;Matt&quot;</span>));    <span class="comment">// true</span></span><br><span class="line">alert(s.size);           <span class="comment">// 2</span></span><br><span class="line">s.delete(<span class="string">&quot;Matt&quot;</span>);</span><br><span class="line">alert(s.has(<span class="string">&quot;Matt&quot;</span>));    <span class="comment">// false</span></span><br><span class="line">alert(s.has(<span class="string">&quot;Frisbie&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">alert(s.size);           <span class="comment">// 1</span></span><br><span class="line">s.clear(); <span class="comment">// 销毁集合实例中的所有值</span></span><br><span class="line">alert(s.has(<span class="string">&quot;Matt&quot;</span>));    <span class="comment">// false</span></span><br><span class="line">alert(s.has(<span class="string">&quot;Frisbie&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">alert(s.size);           <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>add()</code>返回集合的实例，所以可以将多个添加操作连缀起来，包括初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">&quot;val1&quot;</span>);</span><br><span class="line">s.add(<span class="string">&quot;val2&quot;</span>)</span><br><span class="line"> .add(<span class="string">&quot;val3&quot;</span>);</span><br><span class="line">alert(s.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>与<code>Map</code>类似，<code>Set</code>可以包含任何JavaScript数据类型作为值。集合也使用SameValueZero操作（ECMAScript内部定义，无法在语言中使用），基本上相当于使用严格对象相等的标准来检查值的匹配性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> functionVal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> symbolVal = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> objectVal = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">s.add(functionVal);</span><br><span class="line">s.add(symbolVal);</span><br><span class="line">s.add(objectVal);</span><br><span class="line">alert(s.has(functionVal));   <span class="comment">// true</span></span><br><span class="line">alert(s.has(symbolVal));     <span class="comment">// true</span></span><br><span class="line">alert(s.has(objectVal));     <span class="comment">// true</span></span><br><span class="line"><span class="comment">// SameValueZero检查意味着独立的实例不会冲突</span></span><br><span class="line">alert(s.has(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>与严格相等一样，用作值的对象和其他“集合”类型在自己的内容或属性被修改时也不会改变：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> objVal = &#123;&#125;,</span><br><span class="line">      arrVal = [];</span><br><span class="line">s.add(objVal);</span><br><span class="line">s.add(arrVal);</span><br><span class="line">objVal.bar = <span class="string">&quot;bar&quot;</span>;</span><br><span class="line">arrVal.push(<span class="string">&quot;bar&quot;</span>);</span><br><span class="line">alert(s.has(objVal)); <span class="comment">// true</span></span><br><span class="line">alert(s.has(arrVal)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>add()</code>和<code>delete()</code>操作是幂等的。<code>delete()</code>返回一个布尔值，表示集合中是否存在要删除的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">alert(s.size); <span class="comment">// 1</span></span><br><span class="line">s.add(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">alert(s.size); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 集合里有这个值</span></span><br><span class="line">alert(s.delete(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 集合里没有这个值</span></span><br><span class="line">alert(s.delete(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="6-6-2-顺序与迭代"><a href="#6-6-2-顺序与迭代" class="headerlink" title="6.6.2　顺序与迭代"></a>6.6.2　顺序与迭代</h3><p><code>Set</code>会维护值插入时的顺序，因此支持按顺序迭代。</p><p>集合实例可以提供一个迭代器（<code>Iterator</code>），能以插入顺序生成集合内容。可以通过<code>values()</code>方法及其别名方法<code>keys()</code>（或者<code>Symbol.iterator</code>属性，它引用<code>values()</code>）取得这个迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line">alert(s.values === s[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line">alert(s.keys === s[<span class="built_in">Symbol</span>.iterator]);   <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s.values()) &#123;</span><br><span class="line">  alert(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// val1</span></span><br><span class="line"><span class="comment">// val2</span></span><br><span class="line"><span class="comment">// val3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">  alert(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// val1</span></span><br><span class="line"><span class="comment">// val2</span></span><br><span class="line"><span class="comment">// val3</span></span><br></pre></td></tr></table></figure><p>因为<code>values()</code>是默认迭代器，所以可以直接对集合实例使用扩展操作，把集合转换为数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log([...s]); <span class="comment">// [&quot;val1&quot;, &quot;val2&quot;, &quot;val3&quot;]</span></span><br></pre></td></tr></table></figure><p>集合的<code>entries()</code>方法返回一个迭代器，可以按照插入顺序产生包含两个元素的数组，这两个元素是集合中每个值的重复出现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> s.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;val1&quot;, &quot;val1&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;val2&quot;, &quot;val2&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;val3&quot;, &quot;val3&quot;]</span></span><br></pre></td></tr></table></figure><p>如果不使用迭代器，而是使用回调方式，则可以调用集合的<code>forEach()</code>方法并传入回调，依次迭代每个键/值对。传入的回调接收可选的第二个参数，这个参数用于重写回调内部<code>this</code>的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]);</span><br><span class="line">s.forEach(<span class="function">(<span class="params">val, dupVal</span>) =&gt;</span> alert(<span class="string">`<span class="subst">$&#123;val&#125;</span> -&gt; <span class="subst">$&#123;dupVal&#125;</span>`</span>));</span><br><span class="line"><span class="comment">// val1 -&gt; val1</span></span><br><span class="line"><span class="comment">// val2 -&gt; val2</span></span><br><span class="line"><span class="comment">// val3 -&gt; val3</span></span><br></pre></td></tr></table></figure><p>修改集合中值的属性不会影响其作为集合值的身份：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&quot;val1&quot;</span>]);</span><br><span class="line"><span class="comment">// 字符串原始值作为值不会被修改</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s1.values()) &#123;</span><br><span class="line">  value = <span class="string">&quot;newVal&quot;</span>;</span><br><span class="line">  alert(value);          <span class="comment">// newVal</span></span><br><span class="line">  alert(s1.has(<span class="string">&quot;val1&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> valObj = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([valObj]);</span><br><span class="line"><span class="comment">// 修改值对象的属性，但对象仍然存在于集合中</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> s2.values()) &#123;</span><br><span class="line">  value.id = <span class="string">&quot;newVal&quot;</span>;</span><br><span class="line">  alert(value);           <span class="comment">// &#123;id: &quot;newVal&quot;&#125;</span></span><br><span class="line">  alert(s2.has(valObj));  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">alert(valObj);            <span class="comment">// &#123;id: &quot;newVal&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="6-6-3-定义正式集合操作"><a href="#6-6-3-定义正式集合操作" class="headerlink" title="6.6.3　定义正式集合操作*"></a>6.6.3　定义正式集合操作*</h3><p>从各方面来看，<code>Set</code>跟<code>Map</code>都很相似，只是API稍有调整。唯一需要强调的就是集合的API对自身的简单操作。很多开发者都喜欢使用<code>Set</code>操作，但需要手动实现：通过子类化<code>Set</code>，或者是定义一个实用函数库。要把两种方式合二为一，可以在子类上实现静态方法，然后在实例方法中使用这些静态方法。在实现这些操作时，需要考虑几个地方。</p><ul><li>某些<code>Set</code>操作是有关联性的，因此最好让实现的方法能支持处理任意多个集合实例。</li><li><code>Set</code>保留插入顺序，所有方法返回的集合必须保证顺序。</li><li>尽可能高效地使用内存。扩展操作符的语法很简洁，但尽可能避免集合和数组间的相互转换能够节省对象初始化成本。</li><li>不要修改已有的集合实例。<code>union(a, b)</code>或<code>a.union(b)</code>应该返回包含结果的新集合实例。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XSet</span> <span class="keyword">extends</span> <span class="title">Set</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">union</span>(<span class="params">...sets</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.union(<span class="built_in">this</span>, ...sets)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">intersection</span>(<span class="params">...sets</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.intersection(<span class="built_in">this</span>, ...sets);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">difference</span>(<span class="params">set</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.difference(<span class="built_in">this</span>, set);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">symmetricDifference</span>(<span class="params">set</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.symmetricDifference(<span class="built_in">this</span>, set);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">cartesianProduct</span>(<span class="params">set</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.cartesianProduct(<span class="built_in">this</span>, set);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">powerSet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> XSet.powerSet(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回两个或更多集合的并集</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">union</span>(<span class="params">a, ...bSets</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> unionSet = <span class="keyword">new</span> XSet(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bSets) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> bValue <span class="keyword">of</span> b) &#123;</span><br><span class="line">        unionSet.add(bValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回两个或更多集合的交集</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">intersection</span>(<span class="params">a, ...bSets</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> XSet(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aValue <span class="keyword">of</span> intersectionSet) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> b <span class="keyword">of</span> bSets) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!b.has(aValue)) &#123;</span><br><span class="line">          intersectionSet.delete(aValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intersectionSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回两个集合的差集</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">difference</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> differenceSet = <span class="keyword">new</span> XSet(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> bValue <span class="keyword">of</span> b) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a.has(bValue)) &#123;</span><br><span class="line">        differenceSet.delete(bValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> differenceSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回两个集合的对称差集</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">symmetricDifference</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 按照定义，对称差集可以表达为</span></span><br><span class="line">    <span class="keyword">return</span> a.union(b).difference(a.intersection(b));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回两个集合（数组对形式）的笛卡儿积</span></span><br><span class="line">  <span class="comment">// 必须返回数组集合，因为笛卡儿积可能包含相同值的对</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">cartesianProduct</span>(<span class="params">a, b</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cartesianProductSet = <span class="keyword">new</span> XSet();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aValue <span class="keyword">of</span> a) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> bValue <span class="keyword">of</span> b) &#123;</span><br><span class="line">        cartesianProductSet.add([aValue, bValue]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cartesianProductSet;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个集合的幂集</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">powerSet</span>(<span class="params">a</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> powerSet = <span class="keyword">new</span> XSet().add(<span class="keyword">new</span> XSet());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> aValue <span class="keyword">of</span> a) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> set <span class="keyword">of</span> <span class="keyword">new</span> XSet(powerSet)) &#123;</span><br><span class="line">        powerSet.add(<span class="keyword">new</span> XSet(set).add(aValue));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> powerSet;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7WeakSet"><a href="#6-7WeakSet" class="headerlink" title="6.7WeakSet"></a>6.7<code>WeakSet</code></h2></li></ul><p>ECMAScript 6新增的“弱集合”（<code>WeakSet</code>）是一种新的集合类型，为这门语言带来了集合数据结构。<code>WeakSet</code>是<code>Set</code>的“兄弟”类型，其API也是<code>Set</code>的子集。<code>WeakSet</code>中的“weak”（弱），描述的是JavaScript垃圾回收程序对待“弱集合”中值的弱引用。</p><h3 id="6-7-1-基本API"><a href="#6-7-1-基本API" class="headerlink" title="6.7.1　基本API"></a>6.7.1　基本API</h3><p>可以使用<code>new</code>关键字实例化一个空的<code>WeakSet</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br></pre></td></tr></table></figure><p>弱集合中的值只能是<code>Object</code>或者继承自<code>Object</code>的类型，尝试使用非对象设置值会抛出<code>TypeError</code>。<br>如果想在初始化时填充弱集合，则构造函数可以接收一个可迭代对象，其中需要包含有效的值。可迭代对象中的每个值都会按照迭代顺序插入到新实例中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      val3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 使用数组初始化弱集合</span></span><br><span class="line"><span class="keyword">const</span> ws1 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([val1, val2, val3]);</span><br><span class="line">alert(ws1.has(val1)); <span class="comment">// true</span></span><br><span class="line">alert(ws1.has(val2)); <span class="comment">// true</span></span><br><span class="line">alert(ws1.has(val3)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 初始化是全有或全无的操作</span></span><br><span class="line"><span class="comment">// 只要有一个值无效就会抛出错误，导致整个初始化失败</span></span><br><span class="line"><span class="keyword">const</span> ws2 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([val1, <span class="string">&quot;BADVAL&quot;</span>, val3]);</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in WeakSet</span></span><br><span class="line"><span class="keyword">typeof</span> ws2;</span><br><span class="line"><span class="comment">// ReferenceError: ws2 is not defined</span></span><br><span class="line"><span class="comment">// 原始值可以先包装成对象再用作值</span></span><br><span class="line"><span class="keyword">const</span> stringVal = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;val1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ws3 = <span class="keyword">new</span> <span class="built_in">WeakSet</span>([stringVal]);</span><br><span class="line">alert(ws3.has(stringVal)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>初始化之后可以使用<code>add()</code>再添加新值，可以使用<code>has()</code>查询，还可以使用<code>delete()</code>删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> val1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;;</span><br><span class="line">alert(ws.has(val1)); <span class="comment">// false</span></span><br><span class="line">ws.add(val1)</span><br><span class="line">  .add(val2);</span><br><span class="line">alert(ws.has(val1)); <span class="comment">// true</span></span><br><span class="line">alert(ws.has(val2)); <span class="comment">// true</span></span><br><span class="line">ws.delete(val1);     <span class="comment">// 只删除这一个值</span></span><br><span class="line">alert(ws.has(val1)); <span class="comment">// false</span></span><br><span class="line">alert(ws.has(val2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>add()</code>方法返回弱集合实例，因此可以把多个操作连缀起来，包括初始化声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,</span><br><span class="line">      val3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>().add(val1);</span><br><span class="line">ws.add(val2)</span><br><span class="line">  .add(val3);</span><br><span class="line">alert(ws.has(val1)); <span class="comment">// true</span></span><br><span class="line">alert(ws.has(val2)); <span class="comment">// true</span></span><br><span class="line">alert(ws.has(val3)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="6-7-2-弱值"><a href="#6-7-2-弱值" class="headerlink" title="6.7.2　弱值"></a>6.7.2　弱值</h3><p>类似于<code>WeakMap</code>。</p><h3 id="6-7-3-不可迭代值"><a href="#6-7-3-不可迭代值" class="headerlink" title="6.7.3　不可迭代值"></a>6.7.3　不可迭代值</h3><p>类似于<code>WeakMap</code>。</p><h3 id="6-7-4-使用弱集合"><a href="#6-7-4-使用弱集合" class="headerlink" title="6.7.4　使用弱集合"></a>6.7.4　使用弱集合</h3><p>相比于<code>WeakMap</code>实例，<code>WeakSet</code>实例的用处没有那么大。不过，弱集合在给对象打标签时还是有价值的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> disabledElements = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#login&#x27;</span>);</span><br><span class="line"><span class="comment">// 通过加入对应集合，给这个节点打上“禁用”标签</span></span><br><span class="line">disabledElements.add(loginButton);</span><br></pre></td></tr></table></figure><p>这样，通过查询元素在不在<code>disabledElements</code>中，就可以知道它是不是被禁用了。不过，假如元素从DOM树中被删除了，它的引用却仍然保存在<code>Set</code>中，因此垃圾回收程序也不能回收它。<br>为了让垃圾回收程序回收元素的内存，可以在这里使用<code>WeakSet</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> disabledElements = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> loginButton = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#login&#x27;</span>);</span><br><span class="line"><span class="comment">// 通过加入对应集合，给这个节点打上“禁用”标签</span></span><br><span class="line">disabledElements.add(loginButton);</span><br></pre></td></tr></table></figure><p>这样，只要<code>WeakSet</code>中任何元素从DOM树中被删除，垃圾回收程序就可以忽略其存在，而立即释放其内存（假设没有其他地方引用这个对象）。</p><h2 id="6-8-迭代与扩展操作"><a href="#6-8-迭代与扩展操作" class="headerlink" title="6.8　迭代与扩展操作"></a>6.8　迭代与扩展操作</h2><p>ECMAScript 6新增的迭代器和扩展操作符对集合引用类型特别有用。这些新特性让集合类型之间相互操作、复制和修改变得异常方便。</p><p>有4种原生集合类型定义了默认迭代器：</p><ul><li><code>Array</code></li><li>所有定型数组</li><li><code>Map</code></li><li><code>Set</code></li></ul><p>很简单，这意味着上述所有类型都支持顺序迭代，都可以传入<code>for-of</code>循环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterableThings = [</span><br><span class="line">  <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">  typedArr = <span class="built_in">Int16Array</span>.of(<span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]),</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> iterableThing <span class="keyword">of</span> iterableThings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> iterableThing) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// [5, 6]</span></span><br><span class="line"><span class="comment">// [7, 8]</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>这也意味着所有这些类型都兼容扩展操作符。扩展操作符在对可迭代对象执行浅复制时特别有用，只需简单的语法就可以复制整个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];</span><br><span class="line"><span class="built_in">console</span>.log(arr1);          <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2);          <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1 === arr2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>对于期待可迭代对象的构造函数，只要传入一个可迭代对象就可以实现复制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]);</span><br><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>(map1);</span><br><span class="line"><span class="built_in">console</span>.log(map1); <span class="comment">// Map &#123;1 =&gt; 2, 3 =&gt; 4&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(map2); <span class="comment">// Map &#123;1 =&gt; 2, 3 =&gt; 4&#125;</span></span><br></pre></td></tr></table></figure><p>当然，也可以构建数组的部分元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">0</span>, ...arr1, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>浅复制意味着只会复制对象引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [&#123;&#125;];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];</span><br><span class="line">arr1[<span class="number">0</span>].foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr2[<span class="number">0</span>]); <span class="comment">// &#123; foo: &#x27;bar&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>上面的这些类型都支持多种构建方法，比如<code>Array.of()</code>和<code>Array.from()</code>静态方法。在与扩展操作符一起使用时，可以非常方便地实现互操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 把数组复制到定型数组</span></span><br><span class="line"><span class="keyword">let</span> typedArr1 = <span class="built_in">Int16Array</span>.of(...arr1);</span><br><span class="line"><span class="keyword">let</span> typedArr2 = <span class="built_in">Int16Array</span>.from(arr1);</span><br><span class="line"><span class="built_in">console</span>.log(typedArr1);   <span class="comment">// Int16Array [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(typedArr2);   <span class="comment">// Int16Array [1, 2, 3]</span></span><br><span class="line"><span class="comment">// 把数组复制到映射</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr1.map(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, <span class="string">&#x27;val&#x27;</span> + x]));</span><br><span class="line"><span class="built_in">console</span>.log(map);   <span class="comment">// Map &#123;1 =&gt; &#x27;val 1&#x27;, 2 =&gt; &#x27;val 2&#x27;, 3 =&gt; &#x27;val 3&#x27;&#125;</span></span><br><span class="line"><span class="comment">// 把数组复制到集合</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(typedArr2);</span><br><span class="line"><span class="built_in">console</span>.log(set);   <span class="comment">// Set &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment">// 把集合复制回数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [...set];</span><br><span class="line"><span class="built_in">console</span>.log(arr2);  <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="6-9-小结"><a href="#6-9-小结" class="headerlink" title="6.9　小结"></a>6.9　小结</h2><p>JavaScript中的对象是引用值，可以通过几种内置引用类型创建特定类型的对象。</p><ul><li>引用类型与传统面向对象编程语言中的类相似，但实现不同。</li><li><code>Object</code>类型是一个基础类型，所有引用类型都从它继承了基本的行为。</li><li><code>Array</code>类型表示一组有序的值，并提供了操作和转换值的能力。</li><li>定型数组包含一套不同的引用类型，用于管理数值在内存中的类型。</li><li><code>Date</code>类型提供了关于日期和时间的信息，包括当前日期和时间以及计算。</li><li><code>RegExp</code>类型是ECMAScript支持的正则表达式的接口，提供了大多数基本正则表达式以及一些高级正则表达式的能力。</li></ul><p>JavaScript比较独特的一点是，函数其实是<code>Function</code>类型的实例，这意味着函数也是对象。由于函数是对象，因此也就具有能够增强自身行为的方法。</p><p>因为原始值包装类型的存在，所以JavaScript中的原始值可以拥有类似对象的行为。有3种原始值包装类型：<code>Boolean</code>、<code>Number</code>和<code>String</code>。它们都具有如下特点。</p><ul><li>每种包装类型都映射到同名的原始类型。</li><li>在以读模式访问原始值时，后台会实例化一个原始值包装对象，通过这个对象可以操作数据。</li><li>涉及原始值的语句只要一执行完毕，包装对象就会立即销毁。</li></ul><p>JavaScript还有两个在一开始执行代码时就存在的内置对象：<code>Global</code>和<code>Math</code>。其中，<code>Global</code>对象在大多数ECMAScript实现中无法直接访问。不过浏览器将<code>Global</code>实现为<code>window</code>对象。所有全局变量和函数都是<code>Global</code>对象的属性。<code>Math</code>对象包含辅助完成复杂数学计算的属性和方法。</p><p>ECMAScript 6新增了一批引用类型：<code>Map</code>、<code>WeakMap</code>、<code>Set</code>和<code>WeakSet</code>。这些类型为组织应用程序数据和简化内存管理提供了新能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;6-1-Object&quot;&gt;&lt;a href=&quot;#6-1-Object&quot; class=&quot;headerlink&quot; title=&quot;6.1　Object&quot;&gt;&lt;/a&gt;6.1　Object&lt;/h2&gt;&lt;p&gt;大多数引用值的示例使用的是&lt;code&gt;Object&lt;/code&gt;类型。显式地</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript高级程序设计(第四版)" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    <category term="06-集合引用类型" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/06-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>05-基本引用类型</title>
    <link href="http://example.com/2021/03/14/note/JavaScript/05-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2021/03/14/note/JavaScript/05-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-03-14T13:18:40.410Z</published>
    <updated>2021-03-14T13:36:05.679Z</updated>
    
    <content type="html"><![CDATA[<p>引用值（或者对象）是某个特定<strong>引用类型</strong>的实例。在ECMAScript中，引用类型是把数据和功能组织到一起的结构，经常被人错误地称作“类”，ECMAScript缺少传统的面向对象编程语言所具备的某些基本结构，包括类和接口。引用类型有时候也被称为<strong>对象定义</strong>，因为它们描述了自己的对象应有的属性和方法。</p><p>对象被认为是某个特定引用类型的<strong>实例</strong>。新对象通过使用<code>new</code>操作符后跟一个<strong>构造函数</strong>（constructor）来创建。构造函数就是用来创建新对象的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>这行代码创建了引用类型<code>Date</code>的一个新实例，并将它保存在变量<code>now</code>中。<code>Date()</code>在这里就是构造函数，它负责创建一个只有默认属性和方法的简单对象。</p><blockquote><p><strong>注意</strong>函数也是一种引用类型。</p></blockquote><h2 id="5-1-Date"><a href="#5-1-Date" class="headerlink" title="5.1　Date"></a>5.1　Date</h2><p><code>Date</code>类型将日期保存为自协调世界时（UTC）时间1970年1月1日午夜（零时）至今所经过的毫秒数。使用这种存储格式，<code>Date</code>类型可以精确表示1970年1月1日之前及之后285616年的日期。</p><p>要创建日期对象，就使用<code>new</code>操作符来调用<code>Date</code>构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><p>在不给<code>Date</code>构造函数传参数的情况下，创建的对象将保存当前日期和时间。要基于其他日期和时间创建日期对象，必须传入其毫秒表示。ECMAScript为此提供了两个辅助方法：<code>Date.parse()</code>和<code>Date.UTC()</code>。<br><code>Date.parse()</code>方法接收一个表示日期的字符串参数，尝试将这个字符串转换为表示该日期的毫秒数。所有实现都必须支持下列日期格式：</p><ul><li>“月/日/年”，如<code>&quot;5/23/2019&quot;</code>；</li><li>“月 日, 年”，如<code>&quot;May 23, 2019&quot;</code>；</li><li>“周几 月 日 年 时:分:秒 时区”，如<code>&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;</code>；</li><li>ISO 8601扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如<code>2019-05-23T00:00:00</code>（只适用于兼容ES5的实现）。</li></ul><p>比如，要创建一个表示“2019年5月23日”的日期对象，可以使用以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">&quot;May 23, 2019&quot;</span>));</span><br></pre></td></tr></table></figure><p>如果传给<code>Date.parse()</code>的字符串并不表示日期，则该方法会返回<code>NaN</code>。如果直接把表示日期的字符串传给<code>Date</code>构造函数，那么<code>Date</code>会在后台调用<code>Date.parse()</code>。换句话说，下面这行代码跟前面那行代码是等价的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;May 23, 2019&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>不同的浏览器对<code>Date</code>类型的实现有很多问题。比如，很多浏览器会选择用当前日期替代越界的日期，因此有些浏览器会将<code>&quot;January 32, 2019&quot;</code>解释为<code>&quot;February 1, 2019&quot;</code>。Opera则会插入当前月的当前日，返回<code>&quot;January 当前日, 2019&quot;</code>。</p></blockquote><p><code>Date.UTC()</code>方法也返回日期的毫秒表示，但使用的是跟<code>Date.parse()</code>不同的信息来生成这个值。传给<code>Date.UTC()</code>的参数是年、零起点月数（1月是0，2月是1，以此类推）、日（1<del>31）、时（0</del>23）、分、秒和毫秒。这些参数中，只有前两个（年和月）是必需的。如果不提供日，那么默认为1日。其他参数的默认值都是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GMT时间2000年1月1日零点</span></span><br><span class="line"><span class="keyword">let</span> y2k = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2000</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">// GMT时间2005年5月5日下午5点55分55秒</span></span><br><span class="line"><span class="keyword">let</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2005</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>));</span><br></pre></td></tr></table></figure><p>与<code>Date.parse()</code>一样，<code>Date.UTC()</code>也会被<code>Date</code>构造函数隐式调用，但有一个区别：这种情况下创建的是本地日期，不是GMT日期。不过<code>Date</code>构造函数跟<code>Date.UTC()</code>接收的参数是一样的。前面的例子也可以这样来写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地时间2000年1月1日零点</span></span><br><span class="line"><span class="keyword">let</span> y2k = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2000</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 本地时间2005年5月5日下午5点55分55秒</span></span><br><span class="line"><span class="keyword">let</span> allFives = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2005</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">55</span>);</span><br></pre></td></tr></table></figure><p>以上代码创建了与前面例子中相同的两个日期，但这次的两个日期是（由于系统设置决定的）本地时区的日期。<br>ECMAScript还提供了<code>Date.now()</code>方法，返回表示方法执行时日期和时间的毫秒数。这个方法可以方便地用在代码分析中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 起始时间</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">doSomething();</span><br><span class="line"><span class="comment">// 结束时间</span></span><br><span class="line"><span class="keyword">let</span> stop = <span class="built_in">Date</span>.now(),</span><br><span class="line">result = stop - start;</span><br></pre></td></tr></table></figure><h3 id="5-1-1-继承的方法"><a href="#5-1-1-继承的方法" class="headerlink" title="5.1.1　继承的方法"></a>5.1.1　继承的方法</h3><p><code>Date</code>类型重写了<code>toLocaleString()</code>、<code>toString()</code>和<code>valueOf()</code>方法。但与其他类型不同，重写后这些方法的返回值不一样。<code>Date</code>类型的<code>toLocaleString()</code>方法返回与浏览器运行的本地环境一致的日期和时间。这通常意味着格式中包含针对时间的AM（上午）或PM（下午），但不包含时区信息（具体格式可能因浏览器而不同）。<code>toString()</code>方法通常返回带时区信息的日期和时间，而时间也是以24小时制（0~23）表示的。下面给出了<code>toLocaleString()</code>和<code>toString()</code>返回的2019年2月1日零点的示例（地区为<code>&quot;en-US&quot;</code>的PST，即Pacific Standard Time，太平洋标准时间）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toLocaleString() - <span class="number">2</span>/<span class="number">1</span>/<span class="number">2019</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">00</span> AM</span><br><span class="line">toString() - Thu Feb <span class="number">1</span> <span class="number">2019</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> GMT-<span class="number">0800</span> (Pacific Standard Time)</span><br></pre></td></tr></table></figure><p>在比较老的浏览器上，每个方法返回的结果可能在每个浏览器上都是不同的。这些差异意味着<code>toLocaleString()</code>和<code>toString()</code>可能只对调试有用，不能用于显示。<br><code>Date</code>类型的<code>valueOf()</code>方法不返回字符串，这个方法被重写后返回的是日期的毫秒表示。因此，操作符（如小于号和大于号）可以直接使用它返回的值。这也是确保日期先后的一个简单方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">0</span>, <span class="number">1</span>);    <span class="comment">// 2019年1月1日</span></span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>);    <span class="comment">// 2019年2月1日</span></span><br><span class="line"><span class="built_in">console</span>.log(date1 &lt; date2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="5-1-2-日期格式化方法"><a href="#5-1-2-日期格式化方法" class="headerlink" title="5.1.2　日期格式化方法"></a>5.1.2　日期格式化方法</h3><p><code>Date</code>类型有几个专门用于格式化日期的方法，它们都会返回字符串：</p><ul><li><code>toDateString()</code>显示日期中的周几、月、日、年（格式特定于实现）；</li><li><code>toTimeString()</code>显示日期中的时、分、秒和时区（格式特定于实现）；</li><li><code>toLocaleDateString()</code>显示日期中的周几、月、日、年（格式特定于实现和地区）；</li><li><code>toLocaleTimeString()</code>显示日期中的时、分、秒（格式特定于实现和地区）；</li><li><code>toUTCString()</code>显示完整的UTC日期（格式特定于实现）。</li></ul><p>这些方法的输出与<code>toLocaleString()</code>和<code>toString()</code>一样，会因浏览器而异。因此不能用于在用户界面上一致地显示日期。</p><blockquote><p><strong>注意</strong>还有一个方法叫<code>toGMTString()</code>，这个方法跟<code>toUTCString()</code>是一样的，目的是为了向后兼容。不过，规范建议新代码使用<code>toUTCString()</code>。</p></blockquote><h3 id="5-1-3-日期-时间组件方法"><a href="#5-1-3-日期-时间组件方法" class="headerlink" title="5.1.3　日期/时间组件方法"></a>5.1.3　日期/时间组件方法</h3><p><code>Date</code>类型剩下的方法（见下表）直接涉及取得或设置日期值的特定部分。注意表中“UTC日期”，指的是没有时区偏移（将日期转换为GMT）时的日期。</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">getTime()/setTime(<em>milliseconds</em>)</td><td align="left">返回/设置日期的毫秒表示；返回与valueOf()相同</td></tr><tr><td align="left">getFullYear()/getUTCFullYear()<br>setFullYear(<em>year</em>)/setUTCFullYear(<em>year</em>)</td><td align="left">返回/设置4位数年（即2019而不是19）</td></tr><tr><td align="left">getMonth()/getUTCMonth()<br>setMonth(<em>month</em>)/setUTCMonth(<em>month</em>)</td><td align="left">返回/设置日期的月（0表示1月，11表示12月），设置大于11加年</td></tr><tr><td align="left">getDate()/getUTCDate()<br>setUTCDate(<em>date</em>)/setDate(<em>date</em>)</td><td align="left">返回/设置日期中的日（1~31），设置大于该月天数，则加月</td></tr><tr><td align="left">getDay()/getUTCDay()</td><td align="left">返回日期中表示周几的数值（0表示周日，6表示周六）</td></tr><tr><td align="left">getHours()/getUTCHours()<br>setHours(<em>hours</em>)/setUTCHours(<em>hours</em>)</td><td align="left">返回/设置日期中的时（0~23），设置<em>hours</em>大于23，则加日</td></tr><tr><td align="left">getMinutes()/getUTCMinutes()<br>setMinutes(<em>minutes</em>)/setUTCMinutes(<em>minutes</em>)</td><td align="left">返回日期中的分（0~59），设置<em>minutes</em>大于59，则加时</td></tr><tr><td align="left">getSeconds()/getUTCSeconds()<br>setSeconds(<em>seconds</em>)/setUTCSeconds(<em>seconds</em>)</td><td align="left">返回/设置日期中的秒（0~59），设置<em>seconds</em>大于59，则加分</td></tr><tr><td align="left">getMilliseconds()/getUTCMilliseconds()<br>setMilliseconds(<em>milliseconds</em>)/setUTCMilliseconds(<em>milliseconds</em>)</td><td align="left">返回/设置日期中的毫秒</td></tr><tr><td align="left">getTimezoneOffset()</td><td align="left">返回以分钟计的UTC与本地时区的偏移量</td></tr></tbody></table><h2 id="5-2-RegExp"><a href="#5-2-RegExp" class="headerlink" title="5.2　RegExp"></a>5.2　RegExp</h2><p>ECMAScript通过<code>RegExp</code>类型支持正则表达式。正则表达式使用类似Perl的简洁语法来创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> expression = <span class="regexp">/pattern/</span>flags;</span><br></pre></td></tr></table></figure><p>这个正则表达式的<code>pattern</code>（模式）可以是任何的正则表达式，包括字符类、限定符、分组、向前查找和反向引用。每个正则表达式可以带零个或多个<code>flags</code>（标记），用于控制正则表达式的行为。下面给出了表示匹配模式的标记。</p><ul><li><code>g</code>：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。</li><li><code>i</code>：不区分大小写，表示在查找匹配时忽略<code>pattern</code>和字符串的大小写。</li><li><code>m</code>：多行模式，表示查找到一行文本末尾时会继续查找。</li><li><code>y</code>：粘附模式，表示只查找从<code>lastIndex</code>开始及之后的字符串。</li><li><code>u</code>：Unicode模式，启用Unicode匹配。</li><li><code>s</code>：<code>dotAll</code>模式，表示元字符<code>.</code>匹配任何字符（包括<code>\n</code>或<code>\r</code>）。</li></ul><p>使用不同模式和标记可以创建出各种正则表达式，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配字符串中的所有&quot;at&quot;</span></span><br><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/at/g</span>;</span><br><span class="line"><span class="comment">// 匹配第一个&quot;bat&quot;或&quot;cat&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"><span class="comment">// 匹配所有以&quot;at&quot;结尾的三字符组合，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern3 = <span class="regexp">/.at/gi</span>;</span><br></pre></td></tr></table></figure><p>与其他语言中的正则表达式类似，所有<strong>元字符</strong>在模式中也必须转义，包括：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( [ &#123; \ ^ $ | ) ] &#125; ? * + .</span><br></pre></td></tr></table></figure><p>元字符在正则表达式中都有一种或多种特殊功能，所以要匹配上面这些字符本身，就必须使用反斜杠来转义。下面是几个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配第一个&quot;[bc]at&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line"><span class="comment">// 匹配所有&quot;.at&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern4 = <span class="regexp">/\.at/gi</span>;</span><br></pre></td></tr></table></figure><p>前面例子中的正则表达式都是使用字面量形式定义的。正则表达式也可以使用<code>RegExp</code>构造函数来创建，它接收两个参数：模式字符串和（可选的）标记字符串。任何使用字面量定义的正则表达式也可以通过构造函数来创建，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配第一个&quot;bat&quot;或&quot;cat&quot;，忽略大小写</span></span><br><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"><span class="comment">// 跟pattern1一样，只不过是用构造函数创建的</span></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[bc]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>RegExp</code>构造函数的两个参数都是字符串。因为<code>RegExp</code>的模式参数是字符串，所以在某些情况下需要二次转义。所有元字符都必须二次转义，包括转义字符序列，如<code>\n</code>（<code>\</code>转义后的字符串是<code>\\</code>，在正则表达式字符串中则要写成<code>\\\\</code>）。<br>|字面量模式|对应的字符串|<br>|:—-|:—-|<br>|/[bc]at/|”\[bc\]at”|<br>|/.at/|”\.at”|<br>|/name/age/|”name\/age”|<br>|/\w\hello\123/|”\w\\hello\\123”|</p><p>此外，使用<code>RegExp</code>也可以基于已有的正则表达式实例，并可选择性地修改它们的标记：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> re1 = <span class="regexp">/cat/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(re1);  <span class="comment">// &quot;/cat/g&quot;</span></span><br><span class="line"><span class="keyword">const</span> re3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(re1, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(re3);  <span class="comment">// &quot;/cat/i&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-1-RegExp实例属性"><a href="#5-2-1-RegExp实例属性" class="headerlink" title="5.2.1   RegExp实例属性"></a>5.2.1   <code>RegExp</code>实例属性</h3><p>每个<code>RegExp</code>实例都有下列属性，提供有关模式的各方面信息。</p><ul><li><code>global</code>：布尔值，表示是否设置了<code>g</code>标记。</li><li><code>ignoreCase</code>：布尔值，表示是否设置了<code>i</code>标记。</li><li><code>unicode</code>：布尔值，表示是否设置了<code>u</code>标记。</li><li><code>sticky</code>：布尔值，表示是否设置了<code>y</code>标记。</li><li><code>lastIndex</code>：整数，表示在源字符串中下一次搜索的开始位置，始终从0开始。</li><li><code>multiline</code>：布尔值，表示是否设置了<code>m</code>标记。</li><li><code>dotAll</code>：布尔值，表示是否设置了<code>s</code>标记。</li><li><code>source</code>：正则表达式的字面量字符串（不是传给构造函数的模式字符串），没有开头和结尾的斜杠。</li><li><code>flags</code>：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回（没有前后斜杠）。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\[bc\\]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pattern2.global);      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.ignoreCase);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.multiline);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.lastIndex);   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.source);      <span class="comment">// &quot;\[bc\]at&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern2.flags);       <span class="comment">// &quot;i&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-RegExp实例方法"><a href="#5-2-2-RegExp实例方法" class="headerlink" title="5.2.2   RegExp实例方法"></a>5.2.2   <code>RegExp</code>实例方法</h3></li></ul><p><code>RegExp</code>实例的主要方法是<code>exec()</code>，主要用于配合捕获组使用。这个方法只接收一个参数，即要应用模式的字符串。如果找到了匹配项，则返回包含第一个匹配信息的数组；如果没找到匹配项，则返回<code>null</code>。返回的数组虽然是<code>Array</code>的实例，但包含两个额外的属性：<code>index</code>和<code>input</code>。<code>index</code>是字符串中匹配模式的起始位置，<code>input</code>是要查找的字符串。这个数组的第一个元素是匹配整个模式的字符串，其他元素是与表达式中的捕获组匹配的字符串。如果模式中没有捕获组，则数组只包含一个元素。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;mom and dad and baby&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);   <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input);   <span class="comment">// &quot;mom and dad and baby&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);      <span class="comment">// &quot;mom and dad and baby&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]);      <span class="comment">// &quot; and dad and baby&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]);      <span class="comment">// &quot; and baby&quot;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，模式包含两个捕获组：最内部的匹配项<code>&quot; and baby&quot;</code>，以及外部的匹配项<code>&quot; and dad&quot;</code>或<code>&quot; and dad and baby&quot;</code>。调用<code>exec()</code>后找到了一个匹配项。因为整个字符串匹配模式，所以<code>matchs</code>数组的<code>index</code>属性就是0。数组的第一个元素是匹配的整个字符串，第二个元素是匹配第一个捕获组的字符串，第三个元素是匹配第二个捕获组的字符串。<br>如果模式设置了全局标记，则每次调用<code>exec()</code>方法会返回一个匹配的信息。如果没有设置全局标记，则无论对同一个字符串调用多少次<code>exec()</code>，也只会返回第一个匹配的信息，<code>lastIndex</code>在非全局模式下始终不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);      <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);         <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 0</span></span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);      <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);         <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>如果在这个模式上设置了<code>g</code>标记，则每次调用<code>exec()</code>都会在字符串中向前搜索下一个匹配项，直到搜索到字符串末尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);      <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);         <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 3</span></span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);      <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);         <span class="comment">// bat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 8</span></span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);      <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);         <span class="comment">// sat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>在全局匹配模式下，每次调用<code>exec()</code>都会更新<code>lastIndex</code>值，以反映上次匹配的最后一个字符的索引。<br>如果模式设置了粘附标记<code>y</code>，则每次调用<code>exec()</code>就只会在<code>lastIndex</code>的位置上寻找匹配项。粘附标记覆盖全局标记。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/y</span>;</span><br><span class="line"><span class="keyword">let</span> matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);          <span class="comment">// cat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);   <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 以索引3对应的字符开头找不到匹配项，因此exec()返回null</span></span><br><span class="line"><span class="comment">// exec()没找到匹配项，于是将lastIndex设置为0</span></span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches);             <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);   <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 向前设置lastIndex可以让粘附的模式通过exec()找到下一个匹配项：</span></span><br><span class="line">pattern.lastIndex = <span class="number">5</span>;</span><br><span class="line">matches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);       <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);          <span class="comment">// bat</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);   <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>正则表达式的另一个方法是<code>test()</code>，接收一个字符串参数。如果输入的文本与模式匹配，则参数返回<code>true</code>，否则返回<code>false</code>。这个方法适用于只想测试模式是否匹配，而不需要实际匹配内容的情况，常用于验证用户输入。<code>test()</code>经常用在<code>if</code>语句中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;000-00-0000&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span>;</span><br><span class="line"><span class="keyword">if</span> (pattern.test(text)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;The pattern was matched.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论正则表达式是怎么创建的，继承的方法<code>toLocaleString()</code>和<code>toString()</code>都返回正则表达式的字面量表示。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\[bc\\]at&quot;</span>, <span class="string">&quot;gi&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pattern.toString());       <span class="comment">// /\[bc\]at/gi</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.toLocaleString()); <span class="comment">// /\[bc\]at/gi</span></span><br></pre></td></tr></table></figure><p>这里的模式是通过<code>RegExp</code>构造函数创建的，但<code>toLocaleString()</code>和<code>toString()</code>返回的都是其字面量的形式。</p><blockquote><p><strong>注意</strong>正则表达式的<code>valueOf()</code>方法返回正则表达式本身。</p><h3 id="5-2-3-RegExp构造函数属性"><a href="#5-2-3-RegExp构造函数属性" class="headerlink" title="5.2.3   RegExp构造函数属性"></a>5.2.3   <code>RegExp</code>构造函数属性</h3></blockquote><p><code>RegExp</code>构造函数本身也有几个属性。（在其他语言中，这种属性被称为静态属性。）这些属性适用于作用域中的所有正则表达式，而且会根据最后执行的正则表达式操作而变化。这些属性还有一个特点，就是可以通过两种不同的方式访问它们。换句话说，每个属性都有一个全名和一个简写。下表列出了<code>RegExp</code>构造函数的属性。</p><table><thead><tr><th align="left">全名</th><th align="left">简写</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">input</td><td align="left">$_</td><td align="left">最后搜索的字符串（非标准特性）</td></tr><tr><td align="left">lastMatch</td><td align="left">$&amp;</td><td align="left">最后匹配的文本</td></tr><tr><td align="left">lastParen</td><td align="left">$+</td><td align="left">最后匹配的捕获组（非标准特性）</td></tr><tr><td align="left">leftContext</td><td align="left">$`</td><td align="left">input字符串中出现在lastMatch前面的文本</td></tr><tr><td align="left">rightContext</td><td align="left">$’</td><td align="left">input字符串中出现在lastMatch后面的文本</td></tr></tbody></table><p>通过这些属性可以提取出与<code>exec()</code>和<code>test()</code>执行的操作相关的信息。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;this has been a short summer&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/(.)hort/g</span>;</span><br><span class="line"><span class="keyword">if</span> (pattern.test(text)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.input);        <span class="comment">// this has been a short summer</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.leftContext);  <span class="comment">// this has been a</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.rightContext); <span class="comment">// summer</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastMatch);    <span class="comment">// short</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.lastParen);    <span class="comment">// s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些属性名也可以替换成简写形式，只不过要使用中括号语法来访问，如下面的例子所示，因为大多数简写形式都不是合法的ECMAScript标识符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;this has been a short summer&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/(.)hort/g</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 注意：Opera 不支持简写属性名</span></span><br><span class="line"><span class="comment"> * IE 不支持多行匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (pattern.test(text)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$_);      <span class="comment">// this has been a short summer</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">&quot;$`&quot;</span>]);   <span class="comment">// this has been a</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">&quot;$&#x27;&quot;</span>]);   <span class="comment">// summer</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">&quot;$&amp;&quot;</span>]);   <span class="comment">// short</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>[<span class="string">&quot;$+&quot;</span>]);   <span class="comment">// s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RegExp</code>还有其他几个构造函数属性，可以存储最多9个捕获组的匹配项。这些属性通过<code>RegExp.$1~RegExp.$9</code>来访问，分别包含第1~9个捕获组的匹配项。在调用<code>exec()</code>或<code>test()</code>时，这些属性就会被填充，然后就可以像下面这样使用它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;this has been a short summer&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/(..)or(.)/g</span>;</span><br><span class="line"><span class="keyword">if</span> (pattern.test(text)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1);  <span class="comment">// sh</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$2);  <span class="comment">// t</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，模式包含两个捕获组。调用<code>test()</code>搜索字符串之后，因为找到了匹配项所以返回<code>true</code>，而且可以打印出通过<code>RegExp</code>构造函数的<code>$1</code>和<code>$2</code>属性取得的两个捕获组匹配的内容。</p><blockquote><p><strong>注意</strong><code>RegExp</code>构造函数的所有属性没有任何Web标准出处，因此不要在生产环境中使用它们。</p><h3 id="5-2-4-模式局限"><a href="#5-2-4-模式局限" class="headerlink" title="5.2.4   模式局限"></a>5.2.4   模式局限</h3></blockquote><p>正则表达式的下列特性目前还没有得到ECMAScript的支持：</p><ul><li><code>\A</code>和<code>\Z</code>锚（分别匹配字符串的开始和末尾）</li><li>联合及交叉类</li><li>原子组</li><li><code>x</code>（忽略空格）匹配模式</li><li>条件式匹配</li><li>正则表达式注释<h3 id="5-2-5-正则表达式（补充）"><a href="#5-2-5-正则表达式（补充）" class="headerlink" title="5.2.5   正则表达式（补充）"></a>5.2.5   正则表达式（补充）</h3></li></ul><table><thead><tr><th align="left">字符</th><th align="left">含义</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">只有在特殊字符之前的反斜杠表示下一个字符不是特殊字符，按照字面理解。</td><td align="left"></td></tr><tr><td align="left">^</td><td align="left">匹配输入的开始。如果有多行标记m，那么也匹配换行符后紧跟的位置。</td><td align="left">/^A/并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。</td></tr><tr><td align="left">$</td><td align="left">匹配输入的结束。如果有多行标记m，那么也匹配换行符前的位置。<br>如果 ^和 $ 在一起，表示必须是精确匹配。</td><td align="left">/t$/并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</td></tr><tr><td align="left">*</td><td align="left">匹配前一个表达式 0 次或多次。等价于{0,}。</td><td align="left">/bo*/会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</td></tr><tr><td align="left">+</td><td align="left">匹配前面一个表达式 1 次或者多次。等价于{1,}。</td><td align="left">/a+/会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’。</td></tr><tr><td align="left">?</td><td align="left">匹配前面一个表达式 0 次或者 1 次。等价于{0,1}。<br>如果*<em>紧跟在任何量词 <em>、 +、? 或 {} 的后面</em></em>，将会使量词变为<strong>非贪婪</strong>（匹配尽量少的字符），和缺省使用的<strong>贪婪模式</strong>（匹配尽可能多的字符）正好相反。</td><td align="left">/e?le?/匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。<br>“123abc” 使用/\d+/将会匹配 “123”，而使用/\d+?/则只会匹配到 “1”。</td></tr><tr><td align="left">.</td><td align="left">（小数点）默认匹配除换行符之外的任何单个字符。</td><td align="left">/.n/将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’。如果有s(“dotAll”) 标记，也会匹配换行符。</td></tr><tr><td align="left">(x)</td><td align="left">匹配 ‘x’ 并且记住匹配项，供此后使用。其中括号被称为<em>捕获括号</em>。</td><td align="left">/(foo) (bar) \1 \2/ 中的 ‘(foo)’ 和 ‘(bar)’ 匹配并记住”foo bar foo bar” 中的前两个单词’foo’和’bar’。模式中的\1和\2表示第一个和第二个被捕获括号匹配的子字符串，即foo和bar，匹配原字符串中的后两个单词。注意\1、\2、…、\n是用在正则表达式的匹配环节。而在正则表达式的替换环节，则要使用像$1、$2、…、$n这样的语法，例如，’bar foo’.replace(/(…) (…)/, ‘$2 $1’)。</td></tr><tr><td align="left">\n</td><td align="left">返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)，这里的n是数字。</td><td align="left">/apple(,)\sorange\1/匹配”apple, orange, cherry, peach.”中的’apple, orange,’ 。</td></tr><tr><td align="left">(?:x)</td><td align="left">匹配 ‘x’ 但是不记住匹配项。这种括号叫作<em>非捕获括号</em>，使得定义与正则表达式运算符一起使用的子表达式。</td><td align="left">/foo{1,2}/只应用于 ‘foo’ 的最后一个字符 ‘o’。如果使用非捕获括号，/(?:foo){1,2}/，则会应用于整个 ‘foo’ 单词。</td></tr><tr><td align="left">x(?=y)</td><td align="left">匹配’x’仅仅当’x’后面跟着’y’.这种叫做先行断言。</td><td align="left">/Jack(?=Sprat|Frost)/匹配’Jack’仅当它后面跟着’Sprat’或者是’Frost’。但是’Sprat’和’Frost’都不是匹配结果的一部分。</td></tr><tr><td align="left">(?&lt;=y)x</td><td align="left">匹配’x’仅当’x’前面是’y’.这种叫做后行断言。</td><td align="left">/(?&lt;=Jack|Tom)Sprat/匹配’ Sprat ‘仅仅当它前面是’Jack’或者是’Tom’。但是’Jack’和’Tom’都不是匹配结果的一部分。</td></tr><tr><td align="left">x(?!y)</td><td align="left">仅仅当’x’后面不跟着’y’时匹配’x’，这被称为正向否定查找。</td><td align="left">仅仅当这个数字后面没有跟小数点的时候，/\d+(?!.)/ 匹配一个数字。正则表达式/\d+(?!.)/.exec(“3.141”)匹配’141’而不是’3.141</td></tr><tr><td align="left">(?&lt;!<em>y</em>)<em>x</em></td><td align="left">仅仅当’x’前面不是’y’时匹配’x’，这被称为反向否定查找。</td><td align="left">仅仅当这个数字前面没有负号的时候，/(?&lt;!-)\d+/匹配一个数字。/(?&lt;!-)\d+/.exec(‘3’)匹配到 “3”./(?&lt;!-)\d+/.exec(‘-3’)因为这个数字前有负号，所以没有匹配到。</td></tr><tr><td align="left">x|y</td><td align="left">匹配’x’或者’y’。</td><td align="left">/green|red/匹配“green apple”中的’green’和“red apple”中的’red’</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个正整数，匹配了前面一个字符必须刚好出现了 n 次。</td><td align="left">/a{2}/ 不会匹配“candy”中的’a’,但匹配“caaandy”中的前两个’a’。</td></tr><tr><td align="left">{n,}</td><td align="left">n是一个正整数，匹配前一个字符至少出现了n次。</td><td align="left">/a{2,}/ 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</td></tr><tr><td align="left">{n,m}</td><td align="left">n 和 m 都是整数。匹配前面的字符至少n次，最多m次。如果 n 或者 m 的值是0， 这个值被忽略。</td><td align="left">/a{1, 3}/ 配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。</td></tr><tr><td align="left">[xyz]</td><td align="left">一个字符集合。匹配方括号中的任意字符，包括转义序列。可以使用破折号（-）来指定一个字符范围。点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。不必进行转义，不过转义也是起作用的。</td><td align="left">[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的’b’,也都匹配“city”中的’c’。/[a-z.]+/ 和/[\w.]+/与字符串“test.i.ng”匹配。</td></tr><tr><td align="left">[^xyz]</td><td align="left">一个反向字符集。它匹配任何没有包含在方括号中的字符。可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</td><td align="left">[^abc] 和 [^a-c] 是一样的。他们匹配”brisket”中的’r’，也匹配“chop”中的’h’。</td></tr><tr><td align="left">[\b]</td><td align="left">匹配一个退格(U+0008)。（特例）</td><td align="left"></td></tr><tr><td align="left">\b</td><td align="left">匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。</td><td align="left">/\bm/匹配“moon”中的’m’；  /oon\b/匹配”moon”中的’oon’。<br><strong>注意：</strong>大写和小写的罗马字母，十进制数字和下划线字符被视为断词，不作为“字”字符。</td></tr><tr><td align="left">\B</td><td align="left">匹配一个非单词边界。匹配如下几种情况：<br>字符串第一个字符为非“字”字符字符串最后一个字符为非“字”字符<br>两个单词字符之间两个非单词字符之间<br>空字符串。</td><td align="left">/\B../匹配”noonday”中的’oo’, 而/y\B../匹配”possibly yesterday”中的’yes’</td></tr><tr><td align="left">\cX</td><td align="left">当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。</td><td align="left">/\cM/匹配字符串中的 control-M (U+000D)。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字。等价于[0-9]。</td><td align="left">/\d/或者/[0-9]/匹配”B2 is the suite number.”中的’2’。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于[^0-9]。</td><td align="left">/\D/或者/[^0-9]/匹配”B2 is the suite number.”中的’B’ 。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符 (U+000C)。</td><td align="left"></td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符 (U+000A)。</td><td align="left"></td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符 (U+000D)。</td><td align="left"></td></tr><tr><td align="left">\s</td><td align="left">匹配一个空白字符，包括空格、制表符、换页符和换行符。</td><td align="left">/\s\w*/匹配”foo bar.”中的’ bar’。</td></tr><tr><td align="left">\S</td><td align="left">匹配一个非空白字符。</td><td align="left">/\S\w*/匹配”foo bar.”中的’foo’。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个水平制表符 (U+0009)。</td><td align="left"></td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符 (U+000B)。</td><td align="left"></td></tr><tr><td align="left">\w</td><td align="left">匹配一个单字字符（字母、数字或者下划线）。等价于[A-Za-z0-9_]。</td><td align="left">/\w/匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</td></tr><tr><td align="left">\W</td><td align="left">匹配一个非单字字符。等价于[^A-Za-z0-9_]。</td><td align="left">/\W/或者/[^A-Za-z0-9_]/匹配 “50%.”中的 ‘%’。</td></tr><tr><td align="left">\0</td><td align="left">匹配 NULL（U+0000）字符， 后面不能跟其它小数，因为\0<digits>是一个八进制转义序列。</td><td align="left"></td></tr><tr><td align="left">\xhh</td><td align="left">匹配一个两位十六进制数（\x00-\xFF）表示的字符。</td><td align="left">\x0A等价于\n</td></tr><tr><td align="left">\uhhhh</td><td align="left">匹配一个四位十六进制数表示的 UTF-16 代码单元。</td><td align="left">\u0009等价于\t</td></tr><tr><td align="left">\u{hhhh}或\u{hhhhh}</td><td align="left">（仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</td><td align="left"></td></tr></tbody></table><h2 id="5-3-原始值包装类型"><a href="#5-3-原始值包装类型" class="headerlink" title="5.3　原始值包装类型"></a>5.3　原始值包装类型</h2><p>为了方便操作原始值，ECMAScript提供了3种特殊的引用类型：<code>Boolean</code>、<code>Number</code>和<code>String</code>。每当用到某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始值的各种方法。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> s2 = s1.substring(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>在这里，<code>s1</code>是一个包含字符串的变量，它是一个原始值。第二行紧接着在<code>s1</code>上调用了<code>substring()</code>方法，并把结果保存在<code>s2</code>中。我们知道，原始值本身不是对象，因此逻辑上不应该有方法。这是因为当第二行访问<code>s1</code>时，是以读模式访问的，也就是从内存中读取变量保存的值。在以读模式访问字符串值的任何时候，后台都会执行以下3步：<br>(1) 创建一个<code>String</code>类型的实例；</p><p>(2) 调用实例上的特定方法；</p><p>(3) 销毁实例。</p><p>可以把这3步想象成执行了如下3行ECMAScript代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;some text&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.substring(<span class="number">2</span>);</span><br><span class="line">s1 = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>这种行为可以让原始值拥有对象的行为。对布尔值和数值而言，以上3步也类似如此。<br>引用类型与原始值包装类型的主要区别在于对象的生命周期。在通过<code>new</code>实例化引用类型后，得到的实例会在离开作用域时被销毁，而自动创建的原始值包装对象则只存在于访问它的那行代码执行期间，也就是无法在运行时给原始值添加属性和方法。比如下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line">s1.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s1.color);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>这里的第二行代码尝试给字符串<code>s1</code>添加了一个<code>color</code>属性。可是，第三行代码访问<code>color</code>属性时，它却不见了。原因就是第二行代码运行时会临时创建一个<code>String</code>对象，而当第三行代码执行时，这个对象已经被销毁了。实际上，第三行代码在这里又创建了一个新的<code>String</code>对象，但这个对象没有<code>color</code>属性。<br>可以显式地使用<code>Boolean</code>、<code>Number</code>和<code>String</code>构造函数创建原始值包装对象。不过应该在确实必要时再这么做，否则容易让开发者疑惑，分不清它们到底是原始值还是引用值。在显式创建的原始值包装类型的实例上调用<code>typeof</code>会返回<code>&quot;object&quot;</code>，所有原始值包装对象都会转换为布尔值<code>true</code>。</p><p>另外，<code>Object</code>构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(<span class="string">&quot;some text&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">String</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果传给<code>Object</code>的是字符串，则会创建一个<code>String</code>的实例。如果是数值，则会创建<code>Number</code>的实例。布尔值则会得到<code>Boolean</code>的实例。<br>注意，使用<code>new</code>调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;25&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> number = <span class="built_in">Number</span>(value);    <span class="comment">// 转型函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> number);    <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Number</span>(value);   <span class="comment">// 构造函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> obj);       <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，变量<code>number</code>中保存的是一个值为25的原始数值，而变量<code>obj</code>中保存的是一个<code>Number</code>的实例。</p><h3 id="5-3-1Boolean"><a href="#5-3-1Boolean" class="headerlink" title="5.3.1Boolean"></a>5.3.1<code>Boolean</code></h3><p><code>Boolean</code>是对应布尔值的引用类型。要创建一个<code>Boolean</code>对象，就使用<code>Boolean</code>构造函数并传入<code>true</code>或<code>false</code>，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> booleanObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><code>Boolean</code>的实例会重写<code>valueOf()</code>方法，返回一个原始值<code>true</code>或<code>false</code>。<code>toString()</code>方法被调用时也会被覆盖，返回字符串<code>&quot;true&quot;</code>或<code>&quot;false&quot;</code>。强烈建议永远不要使用<code>Boolean</code>对象。因为在布尔表达式中使用<code>Boolean</code>对象时，容易引起误会，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> falseObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(falseObject &amp;&amp; <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> falseValue = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(falseValue &amp;&amp; <span class="literal">true</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>因为这个表达式是对<code>falseObject</code>对象而不是对它表示的值（<code>false</code>）求值，而所有对象在布尔表达式中都会自动转换为<code>true</code>。<br>原始值和引用值（<code>Boolean</code>对象）还有几个区别。首先，<code>typeof</code>操作符对原始值返回<code>&quot;boolean&quot;</code>，但对引用值返回<code>&quot;object&quot;</code>。同样，<code>Boolean</code>对象是<code>Boolean</code>类型的实例，在使用<code>instaceof</code>操作符时返回<code>true</code>，但对原始值则返回<code>false</code>，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> falseObject);             <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> falseValue);              <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(falseObject <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(falseValue <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2Number"><a href="#5-3-2Number" class="headerlink" title="5.3.2Number"></a>5.3.2<code>Number</code></h3><p><code>Number</code>是对应数值的引用类型。要创建一个<code>Number</code>对象，就使用<code>Number</code>构造函数并传入一个数值，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numberObject = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>与<code>Boolean</code>类型一样，<code>Number</code>类型重写了<code>valueOf()</code>、<code>toLocaleString()</code>和<code>toString()</code>方法。<code>valueOf()</code>方法返回<code>Number</code>对象表示的原始数值，另外两个方法返回数值字符串。<code>toString()</code>方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());   <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>));  <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>));  <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure><p>除了继承的方法，<code>Number</code>类型还提供了几个用于将数值格式化为字符串的方法。<br><code>toFixed()</code>方法返回包含指定小数点位数的数值字符串，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// &quot;10.00&quot;</span></span><br></pre></td></tr></table></figure><p>这里的<code>toFixed()</code>方法接收了参数<code>2</code>，表示返回的数值字符串要包含两位小数。结果返回值为<code>&quot;10.00&quot;</code>，小数位填充了0。如果数值本身的小数位超过了参数指定的位数，则四舍五入到最接近的小数位：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10.005</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">2</span>)); <span class="comment">// &quot;10.01&quot;</span></span><br></pre></td></tr></table></figure><p><code>toFixed()</code>自动舍入的特点可以用于处理货币。不过要注意的是，多个浮点数值的数学计算不一定得到精确的结果。比如，<code>0.1 + 0.2 = 0.30000000000000004</code>。</p><blockquote><p><strong>注意</strong><code>toFixed()</code>方法可以表示有0~20个小数位的数值。某些浏览器可能支持更大的范围。</p></blockquote><p><code>toExponential()</code>，返回以科学记数法（也称为指数记数法）表示的数值字符串。与<code>toFixed()</code>一样，<code>toExponential()</code>也接收一个参数，表示结果中小数的位数。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toExponential(<span class="number">1</span>));  <span class="comment">// &quot;1.0e+1&quot;</span></span><br></pre></td></tr></table></figure><p>这段代码的输出为<code>&quot;1.0e+1&quot;</code>。一般来说，这么小的数不用表示为科学记数法形式。如果想得到数值最适当的形式，那么可以使用<code>toPrecision()</code>。<br><code>toPrecision()</code>方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。这个方法接收一个参数，表示结果中数字的总位数（不包含指数）。来看几个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">99</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">1</span>)); <span class="comment">// &quot;1e+2&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">2</span>)); <span class="comment">// &quot;99&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toPrecision(<span class="number">3</span>)); <span class="comment">// &quot;99.0&quot;</span></span><br></pre></td></tr></table></figure><p>本质上，<code>toPrecision()</code>方法会根据数值和精度来决定调用<code>toFixed()</code>还是<code>toExponential()</code>。为了以正确的小数位精确表示数值，这3个方法都会向上或向下舍入。</p><blockquote><p><strong>注意</strong><code>toPrecision()</code>方法可以表示带1~21个小数位的数值。某些浏览器可能支持更大的范围，但这是通常被支持的范围。</p></blockquote><p>与<code>Boolean</code>对象类似，同样不建议直接实例化<code>Number</code>对象。在处理原始数值和引用数值时，<code>typeof</code>和<code>instacnceof</code>操作符会返回不同的结果，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numberObject = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> numberValue = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numberObject);             <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numberValue);              <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(numberObject <span class="keyword">instanceof</span> <span class="built_in">Number</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(numberValue <span class="keyword">instanceof</span> <span class="built_in">Number</span>);   <span class="comment">// false </span></span><br></pre></td></tr></table></figure><p><code>Number.isInteger()</code>方法，用于辨别一个数值是否保存为整数。有时候，小数位的0可能会让人误以为数值是一个浮点值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.00</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(<span class="number">1.01</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>IEEE 754数值格式有一个特殊的数值范围，在这个范围内二进制值可以表示一个整数值。这个数值范围从<code>Number.MIN_SAFE_INTEGER</code>（<img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/14/rLyY1VZMH5oQtD9.gif"                      alt="gif.gif"                >）到<code>Number.MAX_SAFE_INTEGER</code>（<img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/14/3YnaD86ptI9Zwly.gif"                      alt="gif _1_.gif"                >）。对超出这个范围的数值，即使尝试保存为整数，IEEE 754编码格式也意味着二进制值可能会表示一个完全不同的数值。为了鉴别整数是否在这个范围内，可以使用<code>Number.isSafeInteger()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger(<span class="number">2</span> ** <span class="number">53</span>));             <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isSafeInteger((<span class="number">2</span> ** <span class="number">53</span>) - <span class="number">1</span>));       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="5-3-3String"><a href="#5-3-3String" class="headerlink" title="5.3.3String"></a>5.3.3<code>String</code></h3><p><code>String</code>是对应字符串的引用类型。要创建一个<code>String</code>对象，使用<code>String</code>构造函数并传入一个数值，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObject = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>String</code>对象的方法可以在所有字符串原始值上调用。3个继承的方法<code>valueOf()</code>、<code>toLocaleString()</code>和<code>toString()</code>都返回对象的原始字符串值。<br>每个<code>String</code>对象都有一个<code>length</code>属性，表示字符串中字符的数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.length); <span class="comment">// &quot;11&quot;</span></span><br></pre></td></tr></table></figure><p>注意，即使字符串中包含双字节字符（而不是单字节的ASCII字符），也仍然会按单字符来计数。</p><h4 id="5-3-3-1-JavaScript字符"><a href="#5-3-3-1-JavaScript字符" class="headerlink" title="5.3.3.1   JavaScript字符"></a><strong>5.3.3.1   JavaScript字符</strong></h4><p>JavaScript字符串由16位码元（code unit）组成。对多数字符来说，每16位码元对应一个字符。换句话说，字符串的<code>length</code>属性表示字符串包含多少16位码元：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.length); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><code>charAt()</code>方法返回给定索引位置的字符，由传给方法的整数参数指定。具体来说，这个方法查找指定索引位置的16位码元，并返回该码元对应的字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.charAt(<span class="number">2</span>)); <span class="comment">// &quot;c&quot;</span></span><br></pre></td></tr></table></figure><p>JavaScript字符串使用了两种Unicode编码混合的策略：UCS-2和UTF-16。对于可以采用16位编码的字符（U+0000~U+FFFF），这两种编码实际上是一样的。<br>使用<code>charCodeAt()</code>方法可以查看指定码元的字符编码。这个方法返回指定索引位置的码元值，索引以整数指定。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="comment">// Unicode &quot;Latin small letter C&quot;的编码是U+0063</span></span><br><span class="line"><span class="built_in">console</span>.log(message.charCodeAt(<span class="number">2</span>));  <span class="comment">// 99</span></span><br><span class="line"><span class="comment">// 十进制99等于十六进制63</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">99</span> === <span class="number">0x63</span>);            <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>fromCharCode()</code>方法用于根据给定的UTF-16码元创建字符串中的字符。这个方法可以接受任意多个数值，并返回将所有数值对应的字符拼接起来的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>));  <span class="comment">// &quot;abcde&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>));          <span class="comment">// &quot;abcde&quot;</span></span><br></pre></td></tr></table></figure><p>对于U+0000~U+FFFF范围内的字符，<code>length</code>、<code>charAt()</code>、<code>charCodeAt()</code>和<code>fromCharCode()</code>返回的结果都跟预期是一样的。这是因为在这个范围内，每个字符都是用16位表示的，而这几个方法也都基于16位码元完成操作。只要字符编码大小与码元大小一一对应，这些方法就能如期工作。<br>这个对应关系在扩展到Unicode增补字符平面时就不成立了。问题很简单，即16位只能唯一表示65 536个字符。这对于大多数语言字符集是足够了，在Unicode中称为<strong>基本多语言平面</strong>（BMP）。为了表示更多的字符，Unicode采用了一个策略，即每个字符使用另外16位去选择一个<strong>增补平面</strong>。这种每个字符使用两个16位码元的策略称为<strong>代理对</strong>。</p><p>在涉及增补平面的字符时，前面讨论的字符串方法就会出问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &quot;smiling face with smiling eyes&quot; 表情符号的编码是U+1F60A</span></span><br><span class="line"><span class="comment">// 0x1F60A === 128522</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;ab😊de&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.length);          <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(message.charAt(<span class="number">2</span>));       <span class="comment">// &lt;?&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(message.charAt(<span class="number">3</span>));       <span class="comment">// &lt;?&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(message.charCodeAt(<span class="number">2</span>));   <span class="comment">// 55357</span></span><br><span class="line"><span class="built_in">console</span>.log(message.charCodeAt(<span class="number">3</span>));   <span class="comment">// 56842</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">0x1F60A</span>)); <span class="comment">// 😊</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">98</span>, <span class="number">55357</span>, <span class="number">56842</span>, <span class="number">100</span>, <span class="number">101</span>)); <span class="comment">// ab😊de</span></span><br></pre></td></tr></table></figure><p>这些方法仍然将16位码元当作一个字符，事实上索引2和索引3对应的码元应该被看成一个代理对，只对应一个字符。<code>fromCharCode()</code>方法仍然返回正确的结果，因为它实际上是基于提供的二进制表示直接组合成字符串。浏览器可以正确解析代理对（由两个码元构成），并正确地将其识别为一个Unicode笑脸字符。<br>为正确解析既包含单码元字符又包含代理对字符的字符串，可以使用<code>codePointAt()</code>来代替<code>charCodeAt()</code>。<code>codePointAt()</code>接收16位码元的索引并返回该索引位置上的码点（code point）。<strong>码点</strong>是Unicode中一个字符的完整标识。码点可能是16位，也可能是32位，而<code>codePointAt()</code>方法可以从指定码元位置识别完整的码点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;ab😊de&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">1</span>)); <span class="comment">// 98</span></span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">2</span>)); <span class="comment">// 128522</span></span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">3</span>)); <span class="comment">// 56842</span></span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">4</span>)); <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p>注意，如果传入的码元索引并非代理对的开头，就会返回错误的码点。这种错误只有检测单个字符的时候才会出现，可以通过从左到右按正确的码元数遍历字符串来规避。迭代字符串可以智能地识别代理对的码点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([...<span class="string">&quot;ab😊de&quot;</span>]); <span class="comment">//[&quot;a&quot;, &quot;b&quot;, &quot;😊&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure><p><code>fromCharCode()</code>也有一个对应的<code>fromCodePoint()</code>。这个方法接收任意数量的码点，返回对应字符拼接起来的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">97</span>, <span class="number">98</span>, <span class="number">128522</span>, <span class="number">100</span>, <span class="number">101</span>));   <span class="comment">// ab😊de</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-2normalize-方法"><a href="#5-3-3-2normalize-方法" class="headerlink" title="5.3.3.2normalize()方法"></a>5.3.3.2<code>normalize()</code><strong>方法</strong></h4><p>某些Unicode字符可以有多种编码方式。有的字符既可以通过一个BMP字符表示，也可以通过一个代理对表示。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// U+00C5：上面带圆圈的大写拉丁字母A</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>));          <span class="comment">// Å</span></span><br><span class="line"><span class="comment">// U+212B：长度单位“埃”</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>));          <span class="comment">// Å</span></span><br><span class="line"><span class="comment">// U+004：大写拉丁字母A</span></span><br><span class="line"><span class="comment">// U+030A：上面加个圆圈</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>));  <span class="comment">// Å</span></span><br></pre></td></tr></table></figure><p>比较操作符不在乎字符看起来是什么样的，因此这3个字符互不相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>),</span><br><span class="line">    a2 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>),</span><br><span class="line">    a3 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1, a2, a3); <span class="comment">// Å, Å, Å</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a2);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a3);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a3);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>为解决这个问题，Unicode提供了4种规范化形式，可以将类似上面的字符规范化为一致的格式，无论底层字符的代码是什么。这4种规范化形式是：NFD（Normalization Form D）、NFC（Normalization Form C）、NFKD（Normalization Form KD）和NFKC（Normalization Form KC）。可以使用<code>normalize()</code>方法对字符串应用上述规范化形式，使用时需要传入表示哪种形式的字符串：<code>&quot;NFD&quot;</code>、<code>&quot;NFC&quot;</code>、<code>&quot;NFKD&quot;</code>或<code>&quot;NFKC&quot;</code>。<br>通过比较字符串与其调用<code>normalize()</code>的返回值，就可以知道该字符串是否已经规范化了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>),</span><br><span class="line">    a2 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>),</span><br><span class="line">    a3 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>);</span><br><span class="line"><span class="comment">// U+00C5是对0+212B进行NFC/NFKC规范化之后的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFD&quot;</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFC&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFKD&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// U+212B是未规范化的</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFD&quot;</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFC&quot;</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFKD&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// U+0041/U+030A是对0+212B进行NFD/NFKD规范化之后的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFD&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFC&quot;</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFKD&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>选择同一种规范化形式可以让比较操作符返回正确的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>),</span><br><span class="line">    a2 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>),</span><br><span class="line">    a3 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1.normalize(<span class="string">&quot;NFD&quot;</span>) === a2.normalize(<span class="string">&quot;NFD&quot;</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.normalize(<span class="string">&quot;NFKC&quot;</span>) === a3.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.normalize(<span class="string">&quot;NFC&quot;</span>) === a3.normalize(<span class="string">&quot;NFC&quot;</span>));   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-3-字符串操作方法"><a href="#5-3-3-3-字符串操作方法" class="headerlink" title="5.3.3.3   字符串操作方法"></a><strong>5.3.3.3   字符串操作方法</strong></h4><p><code>concat()</code>，用于将一个或多个字符串拼接成一个新字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = stringValue.concat(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);      <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p><code>concat()</code>方法可以接收任意多个参数，因此可以一次性拼接多个字符串，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = stringValue.concat(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);      <span class="comment">// &quot;hello world!&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue); <span class="comment">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>虽然<code>concat()</code>方法可以拼接字符串，但更常用的方式是使用加号操作符（<code>+</code>）。而且多数情况下更方便。<br>ECMAScript提供了3个从字符串中提取子字符串的方法：<code>slice()</code>、<code>substr()</code>和<code>substring()</code>。这3个方法都返回调用它们的字符串的一个子字符串，而且都接收一或两个参数。第一个参数表示子字符串开始的位置，第二个参数表示子字符串结束的位置。对<code>slice()</code>和<code>substring()</code>而言，第二个参数是提取结束的位置（即该位置之前的字符会被提取出来,不包含该位置）。对<code>substr()</code>而言，第二个参数表示返回的子字符串数量。任何情况下，省略第二个参数都意味着提取到字符串末尾。与<code>concat()</code>方法一样，<code>slice()</code>、<code>substr()</code>和<code>substring()</code>也不会修改调用它们的字符串，而只会返回提取到的原始新字符串值。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>));       <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>));   <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>));      <span class="comment">// &quot;lo world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>, <span class="number">7</span>));    <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>,<span class="number">7</span>)); <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>, <span class="number">7</span>));   <span class="comment">// &quot;lo worl&quot;</span></span><br></pre></td></tr></table></figure><p>当某个参数是负值时，这3个方法的行为又有不同。<code>slice()</code>方法将所有负值参数都当成字符串长度加上负参数值。<code>substring()</code>方法会将所有负参数值都转换为0。<code>substr()</code>方法将第一个负参数值当成字符串长度加上该值，将第二个负参数值转换为0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(-<span class="number">3</span>));         <span class="comment">// &quot;rld&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(-<span class="number">3</span>));     <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(-<span class="number">3</span>));        <span class="comment">// &quot;rld&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.slice(<span class="number">3</span>, -<span class="number">4</span>));      <span class="comment">// &quot;lo w&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substring(<span class="number">3</span>, -<span class="number">4</span>));  <span class="comment">// &quot;hel&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.substr(<span class="number">3</span>, -<span class="number">4</span>));     <span class="comment">// &quot;&quot; (empty string)</span></span><br></pre></td></tr></table></figure><p><code>substring(3, 0)</code>，等价于<code>substring(0, 3)</code>，这是因为这个方法会将较小的参数作为起点，将较大的参数作为终点。对<code>substr()</code>来说，第二个参数会被转换为<code>0</code>，意味着返回的字符串包含零个字符，因而会返回一个空字符串。</p><h4 id="5-3-3-4-字符串位置方法"><a href="#5-3-3-4-字符串位置方法" class="headerlink" title="5.3.3.4   字符串位置方法"></a><strong>5.3.3.4   字符串位置方法</strong></h4><p>有两个方法用于在字符串中定位子字符串：<code>indexOf()</code>和<code>lastIndexOf()</code>。这两个方法从字符串中搜索传入的字符串，并返回位置（如果没找到，则返回<code>-1</code>）。两者的区别在于，<code>indexOf()</code>方法从字符串开头开始查找子字符串，而<code>lastIndexOf()</code>方法从字符串末尾开始查找子字符串。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.indexOf(<span class="string">&quot;o&quot;</span>));     <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.lastIndexOf(<span class="string">&quot;o&quot;</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>这两个方法都可以接收可选的第二个参数，表示开始搜索的位置。这意味着，<code>indexOf()</code>会从这个参数指定的位置开始向字符串末尾搜索，忽略该位置之前的字符；<code>lastIndexOf()</code>则会从这个参数指定的位置开始向字符串开头搜索，忽略该位置之后直到字符串末尾的字符。下面看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.indexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>));     <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.lastIndexOf(<span class="string">&quot;o&quot;</span>, <span class="number">6</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>像这样使用第二个参数并循环调用<code>indexOf()</code>或<code>lastIndexOf()</code>，就可以在字符串中找到所有的目标子字符串，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;Lorem ipsum dolor sit amet, consectetur adipisicing elit&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> positions = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> pos = stringValue.indexOf(<span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(pos &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">  positions.push(pos);</span><br><span class="line">  pos = stringValue.indexOf(<span class="string">&quot;e&quot;</span>, pos + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(positions); <span class="comment">// [3,24,32,35,52]</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-5字符串包含方法"><a href="#5-3-3-5字符串包含方法" class="headerlink" title="5.3.3.5字符串包含方法"></a>5.3.3.5<strong>字符串包含方法</strong></h4><p>ECMAScript 6增加了3个用于判断字符串中是否包含另一个字符串的方法：<code>startsWith()</code>、<code>endsWith()</code>和<code>includes()</code>。这些方法都会从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值。它们的区别在于，<code>startsWith()</code>检查开始于索引0的匹配项，<code>endsWith()</code>检查开始于索引<code>(string.length - substring.length)</code>的匹配项，而<code>includes()</code>检查整个字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;bar&quot;</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;baz&quot;</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;bar&quot;</span>));    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;qux&quot;</span>));    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>startsWith()</code>和<code>includes()</code>方法接收可选的第二个参数，表示开始搜索的位置。如果传入第二个参数，则意味着这两个方法会从指定位置向着字符串末尾搜索，忽略该位置之前的所有字符。下面是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.startsWith(<span class="string">&quot;foo&quot;</span>, <span class="number">1</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(message.includes(<span class="string">&quot;bar&quot;</span>, <span class="number">4</span>));    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>endsWith()</code>方法接收可选的第二个参数，表示应该当作字符串末尾的位置。如果不提供这个参数，那么默认就是字符串长度。如果提供这个参数，那么就好像字符串只有那么多字符一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;foobarbaz&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;bar&quot;</span>));     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(message.endsWith(<span class="string">&quot;bar&quot;</span>, <span class="number">6</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-6trim-方法"><a href="#5-3-3-6trim-方法" class="headerlink" title="5.3.3.6trim()方法"></a>5.3.3.6<code>trim()</code><strong>方法</strong></h4><p>ECMAScript在所有字符串上都提供了<code>trim()</code>方法。这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;  hello world  &quot;</span>;</span><br><span class="line"><span class="keyword">let</span> trimmedStringValue = stringValue.trim();</span><br><span class="line"><span class="built_in">console</span>.log(stringValue);         <span class="comment">// &quot;  hello world &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(trimmedStringValue);  <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>由于<code>trim()</code>返回的是字符串的副本，因此原始字符串不受影响，即原本的前、后空格符都会保留。<br>另外，<code>trimLeft()</code>和<code>trimRight()</code>方法分别用于从字符串开始和末尾清理空格符。</p><h4 id="5-3-3-7repeat-方法"><a href="#5-3-3-7repeat-方法" class="headerlink" title="5.3.3.7repeat()方法"></a>5.3.3.7<code>repeat()</code><strong>方法</strong></h4><p>ECMAScript在所有字符串上都提供了<code>repeat()</code>方法。这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;na &quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.repeat(<span class="number">16</span>) + <span class="string">&quot;batman&quot;</span>);</span><br><span class="line"><span class="comment">// na na na na na na na na na na na na na na na na batman</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-8padStart-和padEnd-方法"><a href="#5-3-3-8padStart-和padEnd-方法" class="headerlink" title="5.3.3.8padStart()和padEnd()方法"></a>5.3.3.8<code>padStart()</code><strong>和</strong><code>padEnd()</code><strong>方法</strong></h4><p><code>padStart()</code>和<code>padEnd()</code>方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件。这两个方法的第一个参数是长度，第二个参数是可选的填充字符串，默认为空格（U+0020）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">6</span>));       <span class="comment">// &quot;   foo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>));  <span class="comment">// &quot;......foo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">6</span>));         <span class="comment">// &quot;foo   &quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">9</span>, <span class="string">&quot;.&quot;</span>));    <span class="comment">// &quot;foo......&quot;</span></span><br></pre></td></tr></table></figure><p>可选的第二个参数并不限于一个字符。如果提供了多个字符的字符串，则会将其拼接并截断以匹配指定长度。此外，如果长度小于或等于字符串长度，则会返回原始字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">8</span>, <span class="string">&quot;bar&quot;</span>)); <span class="comment">// &quot;barbafoo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padStart(<span class="number">2</span>));        <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">8</span>, <span class="string">&quot;bar&quot;</span>));   <span class="comment">// &quot;foobarba&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.padEnd(<span class="number">2</span>));          <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-9字符串迭代与解构"><a href="#5-3-3-9字符串迭代与解构" class="headerlink" title="5.3.3.9字符串迭代与解构"></a>5.3.3.9<strong>字符串迭代与解构</strong></h4><p>字符串的原型上暴露了一个<code>@@iterator</code>方法，表示可以迭代字符串的每个字符。可以像下面这样手动使用迭代器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> stringIterator = message[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next());  <span class="comment">// &#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next());  <span class="comment">// &#123;value: &quot;b&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next());  <span class="comment">// &#123;value: &quot;c&quot;, done: false&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringIterator.next());  <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>在<code>for-of</code>循环中可以通过这个迭代器按序访问每个字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> c <span class="keyword">of</span> <span class="string">&quot;abcde&quot;</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// d</span></span><br><span class="line"><span class="comment">// e</span></span><br></pre></td></tr></table></figure><p>有了这个迭代器之后，字符串就可以通过解构操作符来解构了。比如，可以更方便地把字符串分割为字符数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log([...message]); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-10-字符串大小写转换"><a href="#5-3-3-10-字符串大小写转换" class="headerlink" title="5.3.3.10   字符串大小写转换"></a><strong>5.3.3.10   字符串大小写转换</strong></h4><p>下一组方法涉及大小写转换，包括4个方法：<code>toLowerCase()</code>、<code>toLocaleLowerCase()</code>、<code>toUpperCase()</code>和<code>toLocaleUpperCase()</code>。<code>toLocaleLowerCase()</code>和<code>toLocaleUpperCase()</code>方法旨在基于特定地区实现。在少数语言中，Unicode大小写转换需应用特殊规则，要使用地区特定的方法才能实现正确转换。通常，如果不知道代码涉及什么语言，则最好使用地区特定的转换方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLocaleUpperCase());  <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toUpperCase());        <span class="comment">// &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLocaleLowerCase());  <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.toLowerCase());        <span class="comment">// &quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-3-3-11字符串模式匹配方法"><a href="#5-3-3-11字符串模式匹配方法" class="headerlink" title="5.3.3.11字符串模式匹配方法"></a>5.3.3.11<strong>字符串模式匹配方法</strong></h4><p><code>match()</code>方法，这个方法本质上跟<code>RegExp</code>对象的<code>exec()</code>方法相同。<code>match()</code>方法接收一个参数，可以是一个正则表达式字符串，也可以是一个<code>RegExp</code>对象。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="comment">// 等价于pattern.exec(text)</span></span><br><span class="line"><span class="keyword">let</span> matches = text.match(pattern);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);      <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);         <span class="comment">// &quot;cat&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>match()</code>方法返回的数组与<code>RegExp</code>对象的<code>exec()</code>方法返回的数组是一样的：第一个元素是与整个模式匹配的字符串，其余元素则是与表达式中的捕获组匹配的字符串（如果有的话）。<br>另一个查找模式的字符串方法是<code>search()</code>。这个方法唯一的参数与<code>match()</code>方法一样：正则表达式字符串或<code>RegExp</code>对象。这个方法返回模式第一个匹配的位置索引，如果没找到则返回-1。<code>search()</code>始终从字符串开头向后匹配模式。看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pos = text.search(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pos);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>replace()</code>方法，接收两个参数，第一个参数可以是一个<code>RegExp</code>对象或一个字符串（但这个字符串不会转换为正则表达式），第二个参数可以是一个字符串或一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。要想替换所有子字符串，第一个参数必须为正则表达式并且带全局标记，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = text.replace(<span class="string">&quot;at&quot;</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">// &quot;cond, bat, sat, fat&quot;</span></span><br><span class="line">result = text.replace(<span class="regexp">/at/g</span>, <span class="string">&quot;ond&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">// &quot;cond, bond, sond, fond&quot;</span></span><br></pre></td></tr></table></figure><p>第二个参数是字符串的情况下，有几个特殊的字符序列，可以用来插入正则表达式操作的值。ECMA-262中规定了下表中的值。<br>|字符序列|替换文本|<br>|:—-|:—-|<br>|$$|$|<br>|$&amp;|匹配整个模式的子字符串。与RegExp.lastMatch相同|<br>|$’|匹配的子字符串之前的字符串。与RegExp.rightContext相同|<br>|$`|匹配的子字符串之后的字符串。与RegExp.leftContext相同|<br>|$<em>n</em>|匹配第<em>n</em>个捕获组的字符串，其中<em>n</em>是0<del>9。比如，$1是匹配第一个捕获组的字符串，$2是匹配第二个捕获组的字符串，以此类推。如果没有捕获组，则值为空字符串|<br>|$<em>nn</em>|匹配第<em>nn</em>个捕获组字符串，其中<em>nn</em>是01</del>99。比如，$01是匹配第一个捕获组的字符串，$02是匹配第二个捕获组的字符串，以此类推。如果没有捕获组，则值为空字符串|</p><p>使用这些特殊的序列，可以在替换文本中使用之前匹配的内容，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;cat, bat, sat, fat&quot;</span>;</span><br><span class="line">result = text.replace(<span class="regexp">/(.at)/g</span>, <span class="string">&quot;word ($1)&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">// word (cat), word (bat), word (sat), word (fat)</span></span><br></pre></td></tr></table></figure><p><code>replace()</code>的第二个参数可以是一个函数。在只有一个匹配项时，这个函数会收到3个参数：与整个模式匹配的字符串、匹配项在字符串中的开始位置，以及整个字符串。在有多个捕获组的情况下，每个匹配捕获组的字符串也会作为参数传给这个函数，但最后两个参数还是与整个模式匹配的开始位置和原始字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;&quot;&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, pos, originalText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&lt;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&amp;lt;&quot;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&gt;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&amp;gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;&amp;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&amp;amp;&quot;</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;\&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&amp;quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(htmlEscape(<span class="string">&quot;&lt;p class=\&quot;greeting\&quot;&gt;Hello world!&lt;/p&gt;&quot;</span>));</span><br><span class="line"><span class="comment">// &quot;&amp;lt;p class=&amp;quot;greeting&amp;quot;&amp;gt;Hello world!&lt;/p&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>最后一个与模式匹配相关的字符串方法是<code>split()</code>。这个方法会根据传入的分隔符将字符串拆分成数组。作为分隔符的参数可以是字符串，也可以是<code>RegExp</code>对象。（字符串分隔符不会被这个方法当成正则表达式。）还可以传入第二个参数，即数组大小，确保返回的数组不会超过指定大小。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colorText = <span class="string">&quot;red,blue,green,yellow&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> colors1 = colorText.split(<span class="string">&quot;,&quot;</span>);       <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class="line"><span class="keyword">let</span> colors2 = colorText.split(<span class="string">&quot;,&quot;</span>, <span class="number">2</span>);    <span class="comment">// [&quot;red&quot;, &quot;blue&quot;]</span></span><br><span class="line"><span class="keyword">let</span> colors3 = colorText.split(<span class="regexp">/[^,]+/</span>);   <span class="comment">// [&quot;&quot;, &quot;,&quot;, &quot;,&quot;, &quot;,&quot;, &quot;&quot;]</span></span><br></pre></td></tr></table></figure><p>注意在最后一次调用<code>split()</code>时，返回的数组前后包含两个空字符串。这是因为正则表达式指定的分隔符出现在了字符串开头（<code>&quot;red&quot;</code>）和末尾（<code>&quot;yellow&quot;</code>）。</p><h4 id="5-3-3-12localeCompare-方法"><a href="#5-3-3-12localeCompare-方法" class="headerlink" title="5.3.3.12localeCompare()方法"></a>5.3.3.12<code>localeCompare()</code><strong>方法</strong></h4><p><code>localeCompare()</code>，比较两个字符串，返回如下3个值中的一个。</p><pre><code>1. 如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是`-1`，具体还要看与实际值相关的实现。）2. 如果字符串与字符串参数相等，则返回`0`。3. 如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。（通常是`1`，具体还要看与实际值相关的实现。）</code></pre><p>下面是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;brick&quot;</span>));  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;yellow&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(stringValue.localeCompare(<span class="string">&quot;zoo&quot;</span>));    <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><p>在这里，字符串<code>&quot;yellow&quot;</code>与3个不同的值进行了比较：<code>&quot;brick&quot;</code>、<code>&quot;yellow&quot;</code>和<code>&quot;zoo&quot;</code>。<code>&quot;brick&quot;</code>按字母表顺序应该排在<code>&quot;yellow&quot;</code>前头，因此<code>localeCompare()</code>返回1。<code>&quot;yellow&quot;</code>等于<code>&quot;yellow&quot;</code>，因此<code>&quot;localeCompare()&quot;</code>返回<code>0</code>。最后，<code>&quot;zoo&quot;</code>在<code>&quot;yellow&quot;</code>后面，因此<code>localeCompare()</code>返回<code>-1</code>。强调一下，因为返回的具体值可能因具体实现而异，所以最好像下面的示例中一样使用<code>localeCompare()</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">determineOrder</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = stringValue.localeCompare(value);</span><br><span class="line">  <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The string &#x27;yellow&#x27; comes before the string &#x27;<span class="subst">$&#123;value&#125;</span>&#x27;.`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The string &#x27;yellow&#x27; comes after the string &#x27;<span class="subst">$&#123;value&#125;</span>&#x27;.`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The string &#x27;yellow&#x27; is equal to the string &#x27;<span class="subst">$&#123;value&#125;</span>&#x27;.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">determineOrder(<span class="string">&quot;brick&quot;</span>);</span><br><span class="line">determineOrder(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">determineOrder(<span class="string">&quot;zoo&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样一来，就可以保证在所有实现中都能正确判断字符串的顺序了。<br><code>localeCompare()</code>的独特之处在于，实现所在的地区（国家和语言）决定了这个方法如何比较字符串。在美国，英语是ECMAScript实现的标准语言，<code>localeCompare()</code>区分大小写，大写字母排在小写字母前面。</p><h4 id="5-3-3-13HTML方法"><a href="#5-3-3-13HTML方法" class="headerlink" title="5.3.3.13HTML方法"></a>5.3.3.13<strong>HTML方法</strong></h4><p>早期的浏览器开发商认为使用JavaScript动态生成HTML标签是一个需求。因此，早期浏览器扩展了规范，增加了辅助生成HTML标签的方法。下表总结了这些HTML方法。这些方法基本上已经没有人使用了，因为结果通常不是语义化的标记。</p><table><thead><tr><th align="left">方法</th><th align="left">输出</th></tr></thead><tbody><tr><td align="left">anchor(<em>name</em>)</td><td align="left"><a name="*name*"><em>string</em></a></td></tr><tr><td align="left">big()</td><td align="left"><big><em>string</em></big></td></tr><tr><td align="left">bold()</td><td align="left"><b><em>string</em></b></td></tr><tr><td align="left">fixed()</td><td align="left"><tt><em>string</em></tt></td></tr><tr><td align="left">fontcolor(<em>color</em>)</td><td align="left"><font color="*color*"><em>string</em></font></td></tr><tr><td align="left">fontsize(<em>size</em>)</td><td align="left"><font size="*size*"><em>string</em></font></td></tr><tr><td align="left">italics()</td><td align="left"><i><em>string</em></i></td></tr><tr><td align="left">link(url)</td><td align="left"><a href="*url*"><em>string</em></a></td></tr><tr><td align="left">small()</td><td align="left"><small><em>string</em></small></td></tr><tr><td align="left">strike()</td><td align="left"><strike><em>string</em></strike></td></tr><tr><td align="left">sub()</td><td align="left"><sub><em>string</em></sub></td></tr><tr><td align="left">sup()</td><td align="left"><sup><em>string</em></sup></td></tr></tbody></table><h2 id="5-4-单例内置对象"><a href="#5-4-单例内置对象" class="headerlink" title="5.4　单例内置对象"></a>5.4　单例内置对象</h2><p>ECMA-262对内置对象的定义是“任何由ECMAScript实现提供、与宿主环境无关，并在ECMAScript程序开始执行时就存在的对象”。这就意味着，开发者不用显式地实例化内置对象，因为它们已经实例化好了。前面我们已经接触了大部分内置对象，包括<code>Object</code>、<code>Array</code>和<code>String</code>。另外两个单例内置对象：<code>Global</code>和<code>Math</code>。</p><h3 id="5-4-1Global"><a href="#5-4-1Global" class="headerlink" title="5.4.1Global"></a>5.4.1<code>Global</code></h3><p><code>Global</code>对象是ECMAScript中最特别的对象，因为代码不会显式地访问它。ECMA-262规定<code>Global</code>对象为一种兜底对象，它所针对的是不属于任何对象的属性和方法。事实上，不存在全局变量或全局函数这种东西。在全局作用域中定义的变量和函数都会变成<code>Global</code>对象的属性 。包括<code>isNaN()</code>、<code>isFinite()</code>、<code>parseInt()</code>和<code>parseFloat()</code>，实际上都是<code>Global</code>对象的方法。除了这些，<code>Global</code>对象上还有另外一些方法。</p><h4 id="5-4-1-1-URL编码方法"><a href="#5-4-1-1-URL编码方法" class="headerlink" title="5.4.1.1   URL编码方法"></a><strong>5.4.1.1   URL编码方法</strong></h4><p><code>encodeURI()</code>和<code>encodeURIComponent()</code>方法用于编码统一资源标识符（URI），以便传给浏览器。有效的URI不能包含某些字符，比如空格。使用URI编码方法来编码URI可以让浏览器能够理解它们，同时又以特殊的UTF-8编码替换掉所有无效字符。</p><p><code>ecnodeURI()</code>方法用于对整个URI进行编码，比如<code>&quot;www.wrox.com/illegal value.js&quot;</code>。而<code>encodeURIComponent()</code>方法用于编码URI中单独的组件，比如前面URL中的<code>&quot;illegal value.js&quot;</code>。这两个方法的主要区别是，<code>encodeURI()</code>不会编码属于URL组件的特殊字符，比如：、/、?、#，而<code>encodeURIComponent()</code>会编码它发现的所有非标准字符。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http://www.wrox.com/illegal value.js#start&quot;</span>;</span><br><span class="line"><span class="comment">// &quot;http://www.wrox.com/illegal%20value.js#start&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURI</span>(uri));</span><br><span class="line"><span class="comment">// &quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">encodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>一般来说，使用<code>encodeURIComponent()</code>应该比使用<code>encodeURI()</code>的频率更高，这是因为编码查询字符串参数比编码基准URI的次数更多。</p></blockquote><p>与<code>encodeURI()</code>和<code>encodeURIComponent()</code>相对的是<code>decodeURI()</code>和<code>decodeURIComponent()</code>。<code>decodeURI()</code>只对使用<code>encodeURI()</code>编码过的字符解码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start&quot;</span>;</span><br><span class="line"><span class="comment">// http%3A%2F%2Fwww.wrox.com%2Fillegal value.js%23start</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURI</span>(uri));</span><br><span class="line"><span class="comment">// http:// www.wrox.com/illegal value.js#start</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(uri));</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>URI方法<code>encodeURI()</code>、<code>encodeURIComponent()</code>、<code>decodeURI()</code>和<code>decodeURIComponent()</code>取代了<code>escape()</code>和<code>unescape()</code>方法，后者在ECMA-262第3版中就已经废弃了。URI方法始终是首选方法，因为它们对所有Unicode字符进行编码，而原来的方法只能正确编码ASCII字符。不要在生产环境中使用<code>escape()</code>和<code>unescape()</code>。</p></blockquote><h4 id="5-4-1-2eval-方法"><a href="#5-4-1-2eval-方法" class="headerlink" title="5.4.1.2eval()方法"></a>5.4.1.2<code>eval()</code><strong>方法</strong></h4><p><code>eval()</code>方法就是一个完整的ECMAScript解释器，它接收一个参数，即一个要执行的ECMAScript（JavaScript）字符串。来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;hi&#x27;)&quot;</span>);</span><br><span class="line"><span class="comment">//上面这行代码的功能与下一行等价：</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br></pre></td></tr></table></figure><p>当解释器发现<code>eval()</code>调用时，会将参数解释为实际的ECMAScript语句，然后将其插入到该位置。通过<code>eval()</code>执行的代码属于该调用所在上下文，被执行的代码与该上下文拥有相同的作用域链。这意味着定义在包含上下文中的变量可以在<code>eval()</code>调用内部被引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(msg)&quot;</span>);  <span class="comment">// &quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;let msg = &#x27;hello world&#x27;;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(msg); <span class="comment">//Reference Error: msg is not defined,这里不明白</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;var msg = &#x27;hello world&#x27;;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(msg); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p>通过<code>eval()</code>定义的任何变量和函数都不会被提升，这是因为在解析代码的时候，它们是被包含在一个字符串中的。它们只是在<code>eval()</code>执行的时候才会被创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sayHi();<span class="comment">// hi</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">&#x27;hi&#x27;</span>); &#125;<span class="comment">//函数提升</span></span><br><span class="line">sayHi();<span class="comment">// sayHi is not defined</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;function sayHi() &#123; console.log(&#x27;hi&#x27;); &#125;&quot;</span></span><br></pre></td></tr></table></figure><p>但在严格模式下，在<code>eval()</code>内部创建的变量和函数无法被外部访问，赋值给<code>eval</code>也会导致错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">eval</span> = <span class="string">&quot;hi&quot;</span>;  <span class="comment">// 导致错误</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>解释代码字符串的能力是非常强大的，但也非常危险。在使用<code>eval()</code>的时候必须极为慎重，特别是在解释用户输入的内容时。因为这个方法会对XSS利用暴露出很大的攻击面。恶意用户可能插入会导致你网站或应用崩溃的代码。</p></blockquote><h4 id="5-4-1-3Global对象属性"><a href="#5-4-1-3Global对象属性" class="headerlink" title="5.4.1.3Global对象属性"></a>5.4.1.3<code>Global</code><strong>对象属性</strong></h4><p><code>Global</code>对象有很多属性，其中一些前面已经提到过了。像<code>undefined</code>、<code>NaN</code>和<code>Infinity</code>等特殊值都是<code>Global</code>对象的属性。此外，所有原生引用类型构造函数，比如<code>Object</code>和<code>Function</code>，也都是<code>Global</code>对象的属性。下表列出了所有这些属性。</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">undefined</td><td align="left">特殊值undefined</td></tr><tr><td align="left">NaN</td><td align="left">特殊值NaN</td></tr><tr><td align="left">Infinity</td><td align="left">特殊值Infinity</td></tr><tr><td align="left">Object</td><td align="left">Object的构造函数</td></tr><tr><td align="left">Array</td><td align="left">Array的构造函数</td></tr><tr><td align="left">Function</td><td align="left">Function的构造函数</td></tr><tr><td align="left">Boolean</td><td align="left">Boolean的构造函数</td></tr><tr><td align="left">String</td><td align="left">String的构造函数</td></tr><tr><td align="left">Number</td><td align="left">Number的构造函数</td></tr><tr><td align="left">Date</td><td align="left">Date的构造函数</td></tr><tr><td align="left">RegExp</td><td align="left">RegExp的构造函数</td></tr><tr><td align="left">Symbol</td><td align="left">Symbol的伪构造函数</td></tr><tr><td align="left">Error</td><td align="left">Error的构造函数</td></tr><tr><td align="left">EvalError</td><td align="left">EvalError的构造函数</td></tr><tr><td align="left">RangeError</td><td align="left">RangeError的构造函数</td></tr><tr><td align="left">ReferenceError</td><td align="left">ReferenceError的构造函数</td></tr><tr><td align="left">SyntaxError</td><td align="left">SyntaxError的构造函数</td></tr><tr><td align="left">TypeError</td><td align="left">TypeError的构造函数</td></tr><tr><td align="left">URIError</td><td align="left">URIError的构造函数</td></tr></tbody></table><h4 id="5-4-1-4window对象"><a href="#5-4-1-4window对象" class="headerlink" title="5.4.1.4window对象"></a>5.4.1.4<code>window</code><strong>对象</strong></h4><p>虽然ECMA-262没有规定直接访问<code>Global</code>对象的方式，但浏览器将<code>window</code>对象实现为<code>Global</code>对象的代理。因此，所有全局作用域中声明的变量和函数都变成了<code>window</code>的属性。来看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">window</span>.color);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.sayColor(); <span class="comment">// &quot;red&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong><code>window</code>对象在JavaScript中远不止实现了<code>ECMAScript</code>的<code>Global</code>对象那么简单。关于<code>window</code>对象的更多介绍，请参考第12章。</p></blockquote><p>另一种获取<code>Global</code>对象的方式是使用如下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">global</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>这段代码创建一个立即调用的函数表达式，返回了<code>this</code>的值。如前所述，当一个函数在没有明确（通过成为某个对象的方法，或者通过<code>call()</code>/<code>apply()</code>）指定<code>this</code>值的情况下执行时，<code>this</code>值等于<code>Global</code>对象。因此，调用一个简单返回<code>this</code>的函数是在任何执行上下文中获取<code>Global</code>对象的通用方式。</p><h3 id="5-4-2Math"><a href="#5-4-2Math" class="headerlink" title="5.4.2Math"></a>5.4.2<code>Math</code></h3><p>ECMAScript提供了<code>Math</code>对象作为保存数学公式、信息和计算的地方。<code>Math</code>对象提供了一些辅助计算的属性和方法。</p><blockquote><p><strong>注意</strong><code>Math</code>对象上提供的计算要比直接在JavaScript实现的快得多，因为<code>Math</code>对象上的计算使用了JavaScript引擎中更高效的实现和处理器指令。但使用<code>Math</code>计算的问题是精度会因浏览器、操作系统、指令集和硬件而异。</p></blockquote><h4 id="5-4-2-1Math对象属性"><a href="#5-4-2-1Math对象属性" class="headerlink" title="5.4.2.1Math对象属性"></a>5.4.2.1<code>Math</code><strong>对象属性</strong></h4><p><code>Math</code>对象有一些属性，主要用于保存数学中的一些特殊值。下表列出了这些属性。</p><table><thead><tr><th align="left">属性</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Math.E</td><td align="left">自然对数的基数e的值</td></tr><tr><td align="left">Math.LN10</td><td align="left">10为底的自然对数</td></tr><tr><td align="left">Math.LN2</td><td align="left">2为底的自然对数</td></tr><tr><td align="left">Math.LOG2E</td><td align="left">以2为底e的对数</td></tr><tr><td align="left">Math.LOG10E</td><td align="left">以10为底e的对数</td></tr><tr><td align="left">Math.PI</td><td align="left">π的值</td></tr><tr><td align="left">Math.SQRT1_2</td><td align="left">1/2的平方根</td></tr><tr><td align="left">Math.SQRT2</td><td align="left">2的平方根</td></tr></tbody></table><h4 id="5-4-2-2min-和max-方法"><a href="#5-4-2-2min-和max-方法" class="headerlink" title="5.4.2.2min()和max()方法"></a>5.4.2.2<code>min()</code><strong>和</strong><code>max()</code><strong>方法</strong></h4><p><code>min()</code>和<code>max()</code>方法用于确定一组数值中的最小值和最大值。这两个方法都接收任意多个参数，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(max);  <span class="comment">// 54</span></span><br><span class="line"><span class="keyword">let</span> min = <span class="built_in">Math</span>.min(<span class="number">3</span>, <span class="number">54</span>, <span class="number">32</span>, <span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(min);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>使用这两个方法可以避免使用额外的循环和<code>if</code>语句来确定一组数值的最大最小值。<br>要知道数组中的最大值和最小值，可以像下面这样使用扩展操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...val);</span><br></pre></td></tr></table></figure><h4 id="5-4-2-3舍入方法"><a href="#5-4-2-3舍入方法" class="headerlink" title="5.4.2.3舍入方法"></a>5.4.2.3<strong>舍入方法</strong></h4><p>接下来是用于把小数值舍入为整数的4个方法：<code>Math.ceil()</code>、<code>Math.floor()</code>、<code>Math.round()</code>和<code>Math.fround()</code>。这几个方法处理舍入的方式如下所述。</p><pre><code>1. `Math.ceil()`方法始终向上舍入为最接近的整数。2. `Math.floor()`方法始终向下舍入为最接近的整数。3. `Math.round()`方法执行四舍五入。4. `Math.fround()`方法返回数值最接近的单精度（32位）浮点值表示。</code></pre><p>以下示例展示了这些方法的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">25.1</span>));   <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.5</span>));  <span class="comment">// 26</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">25.1</span>));  <span class="comment">// 25</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">0.4</span>));  <span class="comment">// 0.4000000059604645</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">0.5</span>));  <span class="comment">// 0.5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.fround(<span class="number">25.9</span>)); <span class="comment">// 25.899999618530273</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">25.9</span>));  <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>5.4.2.4<code>random()</code><strong>方法</strong></p><p><code>Math.random()</code>方法返回一个0~1范围内的随机数，其中包含0但不包含1。<code>Math.random()</code>从一组整数中随机选择一个数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * total_number_of_choices + first_possible_value)</span><br></pre></td></tr></table></figure><p>比如如果想从1~10范围内随机选择一个数，代码就是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>很多时候，通过函数来算出可选总数和最小可能的值可能更方便，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectFrom</span>(<span class="params">lowerValue, upperValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> choices = upperValue - lowerValue + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * choices + lowerValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> num = selectFrom(<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 2~10范围内的值，其中包含2和10</span></span><br></pre></td></tr></table></figure><p>这里的函数<code>selectFrom()</code>接收两个参数：应该返回的最小值和最大值。通过将这两个值相减再加<code>1</code>得到可选总数，然后再套用上面的公式。于是，调用<code>selectFrom(2,10)</code>就可以从2~10（包含）范围内选择一个值了。使用这个函数，从一个数组中随机选择一个元素就很容易，比如：</p><blockquote><p><strong>注意</strong><code>Math.random()</code>方法在这里出于演示目的是没有问题的。如果是为了加密而需要生成随机数（传给生成器的输入需要较高的不确定性），那么建议使用<code>window.crypto.getRandomValues()</code>。</p></blockquote><h4 id="5-4-2-5其他方法"><a href="#5-4-2-5其他方法" class="headerlink" title="5.4.2.5其他方法"></a>5.4.2.5<strong>其他方法</strong></h4><p><code>Math</code>对象还有很多涉及各种简单或高阶数运算的方法。下表总结了<code>Math</code>对象的其他方法。</p><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Math.abs(<em>x</em>)</td><td align="left">返回<em>x</em>的绝对值</td></tr><tr><td align="left">Math.e<em>x</em>p(<em>x</em>)</td><td align="left">返回Math.E的<em>x</em>次幂</td></tr><tr><td align="left">Math.e<em>x</em>pm1(<em>x</em>)</td><td align="left">等于Math.e<em>x</em>p(<em>x</em>) - 1</td></tr><tr><td align="left">Math.log(<em>x</em>)</td><td align="left">返回<em>x</em>的自然对数</td></tr><tr><td align="left">Math.log1p(<em>x</em>)</td><td align="left">等于1 + Math.log(<em>x</em>)</td></tr><tr><td align="left">Math.pow(<em>x</em>,<em>power</em>)</td><td align="left">返回<em>x</em>的<em>power</em>次幂</td></tr><tr><td align="left">Math.hypot(<em>…nums</em>)</td><td align="left">返回<em>nums</em>中每个数平方和的平方根</td></tr><tr><td align="left">Math.clz32(<em>x</em>)</td><td align="left">返回32位整数<em>x</em>的前置零的数量</td></tr><tr><td align="left">Math.sign(<em>x</em>)</td><td align="left">返回表示<em>x</em>符号的1、0、-0或-1</td></tr><tr><td align="left">Math.trunc(<em>x</em>)</td><td align="left">返回<em>x</em>的整数部分，删除所有小数</td></tr><tr><td align="left">Math.sqrt(<em>x</em>)</td><td align="left">返回<em>x</em>的平方根</td></tr><tr><td align="left">Math.cbrt(<em>x</em>)</td><td align="left">返回<em>x</em>的立方根</td></tr><tr><td align="left"></td><td align="left">返回<em>x</em>的</td></tr><tr><td align="left">Math.atan2(<em>y</em>,<em>x</em>)</td><td align="left">返回<em>y</em>/<em>x</em>的反正切</td></tr><tr><td align="left">Math.cos(<em>x</em>)/Math.acos(<em>x</em>)/Math.acosh(<em>x</em>)</td><td align="left">返回<em>x</em>的余弦/反余弦/反双曲余弦</td></tr><tr><td align="left">Math.sin(<em>x</em>)/Math.asin(<em>x</em>)/Math.asinh(<em>x</em>)</td><td align="left">返回<em>x</em>的正弦/反正弦/反双曲正弦</td></tr><tr><td align="left">Math.tan(<em>x</em>)/Math.atan(<em>x</em>)/Math.atanh(<em>x</em>)</td><td align="left">返回<em>x</em>的正切/反正切/反双曲正切</td></tr></tbody></table><p>即便这些方法都是由ECMA-262定义的，对正弦、余弦、正切等计算的实现仍然取决于浏览器，因为计算这些值的方式有很多种。因此，这些方法的精度可能因实现而异。</p><h2 id="5-5-小结"><a href="#5-5-小结" class="headerlink" title="5.5　小结"></a>5.5　小结</h2><p>JavaScript中的对象称为引用值，几种内置的引用类型可用于创建特定类型的对象。</p><ul><li>引用值与传统面向对象编程语言中的类相似，但实现不同。</li><li><code>Date</code>类型提供关于日期和时间的信息，包括当前日期、时间及相关计算。</li><li><code>RegExp</code>类型是ECMAScript支持正则表达式的接口，提供了大多数基础的和部分高级的正则表达式功能。</li></ul><p>JavaScript比较独特的一点是，函数实际上是<code>Function</code>类型的实例，也就是说函数也是对象。因为函数也是对象，所以函数也有方法，可以用于增强其能力。</p><p>由于原始值包装类型的存在，JavaScript中的原始值可以被当成对象来使用。有3种原始值包装类型：<code>Boolean</code>、<code>Number</code>和<code>String</code>。它们都具备如下特点。</p><ul><li>每种包装类型都映射到同名的原始类型。</li><li>以读模式访问原始值时，后台会实例化一个原始值包装类型的对象，借助这个对象可以操作相应的数据。</li><li>涉及原始值的语句执行完毕后，包装对象就会被销毁。</li></ul><p>当代码开始执行时，全局上下文中会存在两个内置对象：<code>Global</code>和<code>Math</code>。其中，<code>Global</code>对象在大多数ECMAScript实现中无法直接访问。不过，浏览器将其实现为<code>window</code>对象。所有全局变量和函数都是<code>Global</code>对象的属性。<code>Math</code>对象包含辅助完成复杂计算的属性和方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;引用值（或者对象）是某个特定&lt;strong&gt;引用类型&lt;/strong&gt;的实例。在ECMAScript中，引用类型是把数据和功能组织到一起的结构，经常被人错误地称作“类”，ECMAScript缺少传统的面向对象编程语言所具备的某些基本结构，包括类和接口。引用类型有时候也被称为</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript高级程序设计(第四版)" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/"/>
    
    <category term="05-基本引用类型" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%89%88/05-%E5%9F%BA%E6%9C%AC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建的想法</title>
    <link href="http://example.com/2021/03/09/diary/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%83%B3%E6%B3%95/"/>
    <id>http://example.com/2021/03/09/diary/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%83%B3%E6%B3%95/</id>
    <published>2021-03-09T02:41:14.138Z</published>
    <updated>2021-03-09T02:55:12.106Z</updated>
    
    <content type="html"><![CDATA[<p>长久的坚持学习并监督自己发布到博客上绝非易事，在我从刚开始浏览他人博客，到自己学习搭建博客这段时间，发现很多人的文章已是很早之前，或许是工作生活和其他压力，早将此事抛之脑后。</p><p>我更希望这个博客记载着我从一个前端小白到略懂一二的树洞，也正如我网站的标语，慢慢来，深几度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;长久的坚持学习并监督自己发布到博客上绝非易事，在我从刚开始浏览他人博客，到自己学习搭建博客这段时间，发现很多人的文章已是很早之前，或许是工作生活和其他压力，早将此事抛之脑后。&lt;/p&gt;
&lt;p&gt;我更希望这个博客记载着我从一个前端小白到略懂一二的树洞，也正如我网站的标语，慢慢来，</summary>
      
    
    
    
    <category term="日记随笔" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    <category term="博客搭建的想法" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML Standard阅读初体验</title>
    <link href="http://example.com/2021/03/09/tech/HTML%20Standard/"/>
    <id>http://example.com/2021/03/09/tech/HTML%20Standard/</id>
    <published>2021-03-09T01:29:43.971Z</published>
    <updated>2021-03-09T02:39:16.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Abstract："><a href="#Abstract：" class="headerlink" title="Abstract："></a>Abstract：</h1><p>通过背景、针对人群、发展历程等几个方面说明了HTML规范的意义和适用范围，同时对规范中的表单序列化、对其他规范的兼容性、可扩展性三个设计目标进行详细说明。其次引入元素、节点、DOM树等概念简单介绍了HTML，最后举例来说明Web可能存在的安全问题并提供了易行的解决方法。</p><h1 id="Note："><a href="#Note：" class="headerlink" title="Note："></a>Note：</h1><p>通览目录和前言的介绍，对近期所要学习的内容即HTM规范及其重要性有了一个初步的了解，比如对一些基础知识，譬如元素和节点两个概念的区别、DOM树的概念理解更加清晰。</p><p>另一方面，在之前的前端学习中，只考虑到兼容性，至于安全性，除了post、HTTPS比get和HTTP安全以外就不甚了解，有些攻击甚至能威胁到服务器中的数据。</p><p>如同规范里所说，“对于完整理解本规范的某些技术性部分，必须熟悉DOM的基础”，同时，在阅读途中也能了解到不仅限于所阅读的内容，比如1.10.2中所举的例子，也顺带去了解一下事件的捕获和冒泡机制，这些都要求我需要花更多的时间精力，但我想也才能更好的理解HTML规范，同时全英文的规范阅读对我的英语水平也将有极大的提升，相信不久，目前较为吃力的我也能逐渐以英语来记录我的笔记，</p><p>总而言之，我目前的认知，阅读并理解HTML规范，就如同使用产品之前看说明书一样，能有助于安全、有效的开发的同时，也减少了后期的维护成本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Abstract：&quot;&gt;&lt;a href=&quot;#Abstract：&quot; class=&quot;headerlink&quot; title=&quot;Abstract：&quot;&gt;&lt;/a&gt;Abstract：&lt;/h1&gt;&lt;p&gt;通过背景、针对人群、发展历程等几个方面说明了HTML规范的意义和适用范围，同时对规范</summary>
      
    
    
    
    <category term="日记随笔" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    <category term="HTML Standard阅读初体验" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/HTML-Standard%E9%98%85%E8%AF%BB%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>The elements of HTML（四）</title>
    <link href="http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2021-03-08T13:18:00.197Z</published>
    <updated>2021-03-08T13:36:37.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><strong>表单</strong>是一种网页组件，可以包含表单控件如文本，按钮，复选框，范围或颜色选择器控件。 用户可以与这样的表单进行交互并提供数据，随后这些数据被发送到服务器用于进一步处理 （例如返回搜索或计算结果）。</p><p>编写表单的步骤（没有顺序）：编写用户界面、实现服务器端的处理、用户界面与服务器端通信的配置。</p><h1 id="用户界面的编写"><a href="#用户界面的编写" class="headerlink" title="用户界面的编写"></a>用户界面的编写</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;  </span><br><span class="line"> &lt;p&gt;&lt;label&gt;Customer name: &lt;input&gt;&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;p&gt;&lt;label&gt;Telephone: &lt;input type&#x3D;tel&gt;&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;p&gt;&lt;label&gt;E-mail address: &lt;input type&#x3D;email&gt;&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;fieldset&gt;</span><br><span class="line">  &lt;legend&gt; Pizza Size &lt;&#x2F;legend&gt;   </span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;radio name&#x3D;size&gt; Small &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;radio name&#x3D;size&gt; Medium &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;radio name&#x3D;size&gt; Large &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;&#x2F;fieldset&gt;</span><br><span class="line"> &lt;fieldset&gt;</span><br><span class="line">  &lt;legend&gt; Pizza Toppings &lt;&#x2F;legend&gt;</span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;checkbox&gt; Bacon &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;checkbox&gt; Extra Cheese &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;checkbox&gt; Onion &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;label&gt; &lt;input type&#x3D;checkbox&gt; Mushroom &lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;&#x2F;fieldset&gt;</span><br><span class="line"> &lt;p&gt;&lt;label&gt;Preferred delivery time: &lt;input type&#x3D;time min&#x3D;&quot;11:00&quot; max&#x3D;&quot;21:00&quot; step&#x3D;&quot;900&quot;&gt;&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;p&gt;&lt;label&gt;Delivery instructions: &lt;textarea&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;p&gt;&lt;button&gt;Submit order&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">**简要说明：**</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>表单都以form元素开始。多数控件都由 input 元素表示，它默认提供一个文本控件。</li><li>使用 label 元素来描述控件，标签文本和控件自己都会进入 label 元素内。</li><li>表单的每一部分都是一个段落，一般用 p 元素来与其他部分分隔。</li><li>单选按钮用 input 元素，设置 type 属性，值为 radio。 name属性值一样让单选按钮成组。</li><li>fieldset 元素让一批控件成为一组，控件组的标题由 fieldset 中的 legend 表示。</li><li>这些复选框使用 input 元素， type 属性值为 checkbox：。</li><li>电话号码的表单控件（type 属性设为 tel 的 input 元素）， e-mail 地址（type 属性设为 email 的 input 元素）：</li><li>type 属性设为 time 的 input 元素来询问配送时间。 很多控件都可以设置可选值的范围；这个例子中的属性是 min, max 和step。这些属性分别用来设置最小时间，最大时间， 以及允许的值之间的间隔（单位为秒）。</li><li>textarea 元素可以用来提供多行文本。</li><li>为了让表单可以提交，用一个 button 元素。<h1 id="用户界面与服务器端通信的配置"><a href="#用户界面与服务器端通信的配置" class="headerlink" title="用户界面与服务器端通信的配置"></a>用户界面与服务器端通信的配置</h1></li></ol><p>表单提交通常是GET 或 POST 请求。在 form 元素上使用 method 属性来指定使用哪种方法。 指定编码方式要使用 enctype 属性。action 属性来指定处理提交的数据服务的 URL。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">action</span>=<span class="string">&quot;https://pizza.example.com/order.cgi&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个需要提交的表单控件都要有一个名字来对应提交的数据。属性name指定了提交的名字。他们之间可以通过 value 属性给它们不同的值来区分。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">size</span> <span class="attr">value</span>=<span class="string">&quot;small&quot;</span>&gt;</span> Small <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">size</span> <span class="attr">value</span>=<span class="string">&quot;medium&quot;</span>&gt;</span> Medium <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">radio</span> <span class="attr">name</span>=<span class="string">size</span> <span class="attr">value</span>=<span class="string">&quot;large&quot;</span>&gt;</span> Large <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="客户端表单验证"><a href="#客户端表单验证" class="headerlink" title="客户端表单验证"></a>客户端表单验证</h1><p>通过表单标记使得用户代理可以在表单提交之前检查用户输入，但服务器仍然必须校验输入是有效的（因为恶意用户可以很容易绕过表单验证）， 但这使我们可以避免因为只能在服务器上检查而造成用户等待。input 元素上的required 属性，表示只有给出值之后表单才可以提交。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>Customer name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;custname&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 maxlength 属性来限制输入的长度。 把这个属性添加到 textarea 元素上，我们可以限制用户输入到 1000 字符。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>Delivery instructions: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">maxlength</span>=<span class="string">1000</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交表单时，每个不合法的表单控件上，以及 form 元素上都会触发 invalid 事件， 这个事件可以用来显示表单存在哪些问题的一个描述。</p><h1 id="启用表单控件的客户端自动填充"><a href="#启用表单控件的客户端自动填充" class="headerlink" title="启用表单控件的客户端自动填充"></a>启用表单控件的客户端自动填充</h1><p>浏览器可以帮助用户自动填充表单控件，避免让用户每次重新输入。为了帮助用户代理做自动填充，可以使用 autocomplete 属性来描述字段的用途。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>Customer name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;custname&quot;</span> <span class="attr">required</span> <span class="attr">autocomplete</span>=<span class="string">&quot;shipping name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="提高用户手机端体验"><a href="#提高用户手机端体验" class="headerlink" title="提高用户手机端体验"></a>提高用户手机端体验</h1><p>有些设备使用inputmode属性为用户提供多种输入方式。例如，在输入信用卡号码时，用户可能希望只看到0-9数字键，而在输入姓名时，用户可能希望看到每个单词默认大写的表单字段。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>Buzzer code: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;custbuzz&quot;</span> <span class="attr">inputmode</span>=<span class="string">&quot;number&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="type-autocomplete-inputmode之间的区别"><a href="#type-autocomplete-inputmode之间的区别" class="headerlink" title="type, autocomplete, inputmode之间的区别"></a>type, autocomplete, inputmode之间的区别</h1><p>input元素上的type属性决定用户代理将使用哪种控件来公开字段。</p><p>autocomplete属性描述了用户将输入的值实际表示的内容。</p><p>当控件是文本控件时，inputmode属性决定使用哪种输入方式。</p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><table><thead><tr><th><strong>element</strong></th><th><strong>meaning</strong></th><th><strong>Categories</strong></th><th><strong>Contexts in which this element can be used</strong></th><th><strong>Content model</strong></th><th><strong>Tag omission in text/html</strong></th><th><strong>Content attributes</strong></th><th><strong>remark</strong></th></tr></thead><tbody><tr><td>form</td><td>表单</td><td>Flow content、Palpable content</td><td>flow content</td><td>Flow content,但没有form元素后代</td><td>不可省略</td><td>accept-charset—服务器处理表单数据的字符集action — 表单提交的urlautocomplete—form内控件设置自动填充enctype—发送表单数据之前如何对其进行编码method —表单提交使用的HTTP方法name — 用于使用API时的名称novalidate —表单提交时不用进行验证target —表单提交的上下文rel</td><td></td></tr><tr><td>label</td><td>为 input 元素定义标注</td><td>Flow content、Phrasing content、Interactive content、Palpable content</td><td>phrasing content</td><td>Phrasing content，但没有后代labelable元素，除非它是元素的 labeled control且没有后代label</td><td>不可省略</td><td>for — 绑定到哪个表单元素</td><td>1.要么通过for属性（属性值和需要绑定控件id一样），要么将控件放在label元素内。</td></tr></tbody></table><h1 id="Input-type"><a href="#Input-type" class="headerlink" title="Input type"></a>Input type</h1><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>button</td><td>定义可单击的按钮（主要与JavaScript一起使用以激活脚本）</td><td></td></tr><tr><td>checkbox</td><td>定义一个复选框</td><td></td></tr><tr><td>color</td><td>定义颜色选择器</td><td></td></tr><tr><td>date</td><td>定义日期控件（年，月，日（无时间））</td><td></td></tr><tr><td>datetime-local</td><td>定义日期和时间控件（年，月，日，时间（无时区））</td><td></td></tr><tr><td>file</td><td>定义文件选择字段和“浏览”按钮（用于文件上载）</td><td></td></tr><tr><td>image</td><td>将图像定义为提交按</td><td></td></tr><tr><td>month</td><td>定义月份和年份控件（无时区）</td><td></td></tr><tr><td>number</td><td>定义用于输入数字的字段</td><td></td></tr><tr><td>password</td><td>定义密码字段</td><td></td></tr><tr><td>radio</td><td>定义单选按钮</td><td></td></tr><tr><td>range</td><td>定义范围控件（如滑块控件）</td><td></td></tr><tr><td>reset</td><td>定义重置按钮</td><td></td></tr><tr><td>submit</td><td>定义提交按钮</td><td></td></tr><tr><td>time</td><td>定义用于输入时间的控件（无时区）</td><td></td></tr><tr><td>week</td><td>定义周和年控制（无时区）</td><td></td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td><td>禁止进行约束验证；如果那么name和 <em>charset</em> 值相同，必须省略value属性。</td></tr><tr><td>text</td><td>定义单行文本字段</td><td>没有指定type值或无效，默认为文本控件。输入值和value值禁止使用回车符或换行符。</td></tr><tr><td>search</td><td>定义用于输入搜索字符串的文本字段</td><td>没有指定type值或无效，默认为文本控件。输入值和value值禁止使用回车符或换行符。</td></tr><tr><td>tel</td><td>定义用于输入电话号码的字段</td><td>输入值和value值禁止使用回车符或换行符。不强制使用特定规则</td></tr><tr><td>url</td><td>定义用于输入URL的字段</td><td>可以为空字符串，但不能使用回车符或换行符。当元素的值既不是空字符串，也不是有效的绝对URL，元素的类型不匹配</td></tr><tr><td>email</td><td>定义电子邮件地址的字段</td><td>定义电子邮件地址的字段当设置了multiple属性：</td></tr></tbody></table><h1 id="定义电子邮件地址的字段当设置了multiple属性：Input-attribute"><a href="#定义电子邮件地址的字段当设置了multiple属性：Input-attribute" class="headerlink" title="定义电子邮件地址的字段当设置了multiple属性：Input attribute"></a>定义电子邮件地址的字段当设置了multiple属性：Input attribute</h1><table><thead><tr><th align="left">accept</th><th align="left">规定通过文件上传来提交</th></tr></thead><tbody><tr><td align="left">alt</td><td align="left">图像不可用的替代文本</td></tr><tr><td align="left">autocomplete</td><td align="left">是否使用输入字段的自动</td></tr><tr><td align="left">checked</td><td align="left">首次加载时是否被选中</td></tr><tr><td align="left">dirname</td><td align="left">输入字段的文本方向</td></tr><tr><td align="left">disabled</td><td align="left">是否禁用此元素</td></tr><tr><td align="left">form</td><td align="left">规定输入字段所属的一个</td></tr><tr><td align="left">formaction</td><td align="left">覆盖表单的 action 属性</td></tr><tr><td align="left">formenctype</td><td align="left">覆盖表单的 enctype 属性</td></tr><tr><td align="left">formmethod</td><td align="left">覆盖表单的 method 属性</td></tr><tr><td align="left">formnovalidate</td><td align="left">覆盖表单的 novalidate</td></tr><tr><td align="left">formtarget</td><td align="left">覆盖表单的 target 属性n</td></tr><tr><td align="left">height</td><td align="left">高</td></tr><tr><td align="left">list</td><td align="left">预定义的选项列表</td></tr><tr><td align="left">max</td><td align="left">输入字段的最大值</td></tr><tr><td align="left">maxlength</td><td align="left">输入字段的最大长度</td></tr><tr><td align="left">min</td><td align="left">输入字段的最小值</td></tr><tr><td align="left">minlength</td><td align="left">输入字段的最小长度</td></tr><tr><td align="left">multiple</td><td align="left">是否允许多个值</td></tr><tr><td align="left">name</td><td align="left">元素名称</td></tr><tr><td align="left">pattern</td><td align="left">输入字段的值的格式</td></tr><tr><td align="left">placeholder</td><td align="left">用户填写输入字段的提示</td></tr><tr><td align="left">readonly</td><td align="left">是否允许用户修改</td></tr><tr><td align="left">required</td><td align="left">是否必须填写</td></tr><tr><td align="left">size</td><td align="left">控件尺寸</td></tr><tr><td align="left">src</td><td align="left">资源地址</td></tr><tr><td align="left">step</td><td align="left">输入的间隔</td></tr><tr><td align="left">type</td><td align="left">控件类型</td></tr><tr><td align="left">value</td><td align="left">元素的值</td></tr><tr><td align="left">width</td><td align="left">宽</td></tr><tr><td align="left">title</td><td align="left">pattern的描述</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;表单&lt;/strong&gt;是一种网页组件，可以包</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML standard" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/"/>
    
    <category term="The elements of HTML（四）" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/The-elements-of-HTML%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>The elements of HTML（三）</title>
    <link href="http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2021-03-08T12:31:17.696Z</published>
    <updated>2021-03-08T13:06:35.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="area元素"><a href="#area元素" class="headerlink" title="area元素"></a><strong>area元素</strong></h2><p>图像映射上文本和对应区域的超链接或图像映射上的dead area</p><p><strong>Categories</strong>:Flow content、Phrasing content.</p><p><strong>Contexts in which this element can be used</strong>:仅当有一个map祖先，phrasing content</p><p><strong>Content model</strong>:无</p><p><strong>Tag omission in text/html</strong>:没有结束标签</p><p><strong>Content attributes:</strong></p><p><strong>Global attributes：</strong></p><ol><li><p>alt —定义此区域的替换文本。</p></li><li><p>coords — 可点击区域的坐标</p></li><li><p>shape —定义区域的形状</p></li><li><p>href — 超链接地址</p></li><li><p>target — 在何处打开 href 属性指定的目标 URL</p></li><li><p>download — 是否下载资源后不是导航</p></li><li><p>ping — URLs to ping</p></li><li><p>rel —超链接的文档中的位置与目标资源之间的关系</p></li><li><p>referrerpolicy — Referrer policy</p></li></ol><p>1、area的父元素一定是map</p><p>2、area有href属性，代表超链接，这种情况下，必须有alt属性。如果没有href属性，alt属性可以省略，target, download, ping, rel, referrerpolicy 必须省略。</p><p>3、shape</p><table><thead><tr><th>State</th><th>Keywords</th><th>Notes</th></tr></thead><tbody><tr><td>Circle state</td><td>circle/circ</td><td>必须有 coords 属性（3个整数，最后一个非负）</td></tr><tr><td>Default state</td><td>default</td><td>不能有 coords 属性</td></tr><tr><td>Polygon state</td><td>poly/polygon</td><td>必须有 coords 属性（至少6个整数，且是偶数）</td></tr><tr><td>Rectangle state</td><td>rect/rectangle</td><td>必须有 coords 属性（4个整数，第一个小于第三个，第二个小于第四个）</td></tr></tbody></table><p>4、如果area有itemprop属性，则也必须设置href属性</p><h2 id="MathML"><a href="#MathML" class="headerlink" title="MathML"></a><strong>MathML</strong></h2><p>MathML 是数学标记语言，是一种基于XML的标准，用来在互联网上书写数学符号和公式的置标语言。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;math&gt;</span><br><span class="line"></span><br><span class="line">&lt;mi&gt;x&lt;&#x2F;mi&gt;</span><br><span class="line"></span><br><span class="line">&lt;mo&gt;&#x3D;&lt;&#x2F;mo&gt;</span><br><span class="line"></span><br><span class="line">&lt;mfrac&gt;</span><br><span class="line"></span><br><span class="line">&lt;mrow&gt;</span><br><span class="line"></span><br><span class="line">&lt;mo form&#x3D;&quot;prefix&quot;&gt;−&lt;&#x2F;mo&gt; &lt;mi&gt;b&lt;&#x2F;mi&gt;</span><br><span class="line"></span><br><span class="line">&lt;mo&gt;±&lt;&#x2F;mo&gt;</span><br><span class="line"></span><br><span class="line">&lt;msqrt&gt;</span><br><span class="line"></span><br><span class="line">&lt;msup&gt; &lt;mi&gt;b&lt;&#x2F;mi&gt; &lt;mn&gt;2&lt;&#x2F;mn&gt; &lt;&#x2F;msup&gt;</span><br><span class="line"></span><br><span class="line">&lt;mo&gt;−&lt;&#x2F;mo&gt;</span><br><span class="line"></span><br><span class="line">&lt;mn&gt;4&lt;&#x2F;mn&gt; &lt;mo&gt;⁢&lt;&#x2F;mo&gt; &lt;mi&gt;a&lt;&#x2F;mi&gt; &lt;mo&gt;⁢&lt;&#x2F;mo&gt; &lt;mi&gt;c&lt;&#x2F;mi&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;msqrt&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mrow&gt;</span><br><span class="line"></span><br><span class="line">&lt;mrow&gt;</span><br><span class="line"></span><br><span class="line">&lt;mn&gt;2&lt;&#x2F;mn&gt; &lt;mo&gt;⁢&lt;&#x2F;mo&gt; &lt;mi&gt;a&lt;&#x2F;mi&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mrow&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mfrac&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;math&gt;</span><br></pre></td></tr></table></figure><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a><strong>SVG</strong></h2><p>是一种用于描述二维的矢量图形，基于 XML 的标记语言。SVG 相对于图像，就好比 HTML 相对于文本。</p><p>doc = iframe . getSVGDocument()</p><p>doc = embed . getSVGDocument()</p><p>doc = object . getSVGDocument()</p><p>如果iframe、embed或object元素用于嵌入SVG，则返回Document对象。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;area元素&quot;&gt;&lt;a href=&quot;#area元素&quot; class=&quot;headerlink&quot; title=&quot;area元素&quot;&gt;&lt;/a&gt;&lt;strong&gt;area元素&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;图像映射上文本和对应区域的超链接或图像映射上的dead area&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML standard" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/"/>
    
    <category term="The elements of HTML（三）" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/The-elements-of-HTML%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>The elements of HTML（二）</title>
    <link href="http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-03-08T12:31:15.086Z</published>
    <updated>2021-03-08T12:41:42.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p><strong>基于设备像素比。</strong>缩放级别和屏幕像素密度（上一点）都会影响单个CSS pixel 上的物理屏幕像素。适用当图片的于染大小固定的情况下，在 img 元素上用 src 和 srcset 属性， 使用 x 描述符来提供多个只有大小不同的图片（小图是大图的缩略版）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/uploads/100-marie-lloyd.jpg&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;/uploads/150-marie-lloyd.jpg 1.5x, /uploads/200-marie-lloyd.jpg 2x&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>基于视口的选择：</strong>作者可能要显示同一张图片，但渲染大小根据 viewport 宽度有所不同。 可以使用 srcset 和 sizes 属性，使用 w 描述符来提供多个只有大小不同的图片 （小图是大图的缩略版）。 用户代理将会根据指定的 w 描述符和 sizes 属性指定的渲染大小为每个图片计算等效像素密度。 然后它可以根据用户屏幕的像素密度、缩放级别和任何可能的其他因素（比如用户网络状态）选择任何一个资源。  通过使用 w 描述符和 sizes 属性， 不论用户设备有多大用户代理都可以选择下载正确的图片资源。 在新的用户代理中，当 srcset 属性使用 w 描述符时， src 属性会被忽略。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">sizes</span>=<span class="string">&quot;100vw&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;wolf-400.jpg 400w, wolf-800.jpg 800w, wolf-1600.jpg 1600w&quot;</span>   <span class="attr">src</span>=<span class="string">&quot;wolf-400.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;The rad wolf&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>基于艺术选择：</strong>作者可能会根据图片的渲染大小显示不同的图片内容。可以用 picture 元素和 source 元素和 media 属性提供多张内容不同的图片 （例如小的图片是大图的裁剪版）。 用户代理会选择 media 属性中的媒体查询匹配的第一个 source 元素，然后从它的 srcset 属性中选择一个合适的 URL。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 45em)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;large.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">media</span>=<span class="string">&quot;(min-width: 32em)&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;med.jpg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;small.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;The wolf runs through the snow.&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>基于图片格式的选择：</strong>作者可能希望显示同样的图片内容但根据用户代理的支持情况使用不同的图片格式。 可以使用 source 元素上的 type 属性来提供多种格式的图片。在这个例子中，用户代理会选择第一个 type 属性为支持的 MIME 类型的源。 如果用户代理支持 WebP 就会选择第一个 source 元素。 如果不支持 WebP，但支持 JPEG XR 就会选择第二个 source 元素。 如果这两种都不支持，就会选择 img 元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;/uploads/100-marie-lloyd.webp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/webp&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;/uploads/100-marie-lloyd.jxr&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/vnd.ms-photo&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/uploads/100-marie-lloyd.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Decoding"><a href="#Decoding" class="headerlink" title="Decoding"></a><strong>Decoding</strong></h2><table><thead><tr><th align="left">Keyword</th><th align="left">State</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">sync</td><td align="left">Sync</td><td align="left">表示优先同步解码此图像，以便与其他内容进行原子表示。</td></tr><tr><td align="left">async</td><td align="left">Async</td><td align="left">指示优先选择异步解码此图像，以避免延迟其他内容的呈现。</td></tr><tr><td align="left">auto</td><td align="left">Auto</td><td align="left">表示默认值，用户代理可以自由选择任何解码行为。</td></tr></tbody></table><p>可以使用该decode()方法来控制解码行为。由于该decode()方法独立于负责将内容呈现到屏幕的过程执行解码，因此它不受decoding属性的影响</p><h2 id="alt使用"><a href="#alt使用" class="headerlink" title="alt使用"></a><strong>alt使用</strong></h2><p>除非另有说明，必须指定 alt 属性且它的值不能为空，且必须适合替代图片。 对 alt 属性具体的要求取决于它要表示什么图片.编写替代文本时要考虑的最一般规则如下：1、 alt 属性的文本替换每个图像不会改变页面的含义。2、 alt 属性的值不应该包含图片的 caption, title 或 legend 文本。3、 应该包含的替代文本是用于替代图片的，而不是图片的补充， 用 title 属性可以提供补充信息。5、 alt 属性的值不应该重复已经由后面的文字提供的信息。</p><p><strong>使用情况：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、当创建 超链接 的 a 元素或 button 元素没有文本内容只包含一个或更多图片时，alt 属性必须包含一些文字来传达链接或按钮的用途。</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;green.html&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;green.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>2、具有替代图形表示形式的短语或段落：图表，图表，图形，地图，插图，文本必须在alt属性中给出，并且必须传达与src 属性中指定的图像相同的消息。重要的是要意识到替代文本是图像的替代品，而不是图像的描述。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;house.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;The house is white, with a boarded front door.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、一个文档可以包含图标信息，图标是为了帮助视觉浏览器的用户一目了然地识别功能。有些情况下，图标是文本标签的补充，它们传达同样的含义。 那些情况下，alt 属性必须存在且为空。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/help/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/icons/help.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> Help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外一些情况下，图标旁边没有文字来描述它的含义；这样的图标就应该解释自己的含义。 那些情况下，同等的文本标签必须通过alt 属性给出。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;movies.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、图像仅由文本组成，并且图像的目的是不是突出显示用于渲染文本的实际印刷效果，而是传达文本本身。在这种情况下，alt必须存在属性，但属性必须包含与图像本身相同的文本。在这种情况下，替代文本就是图像所代表的字符。（ps:如果由于作者的默认系统字体不支持给定字符而使他们倾向于使用图像，那么考虑Web字体。）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;initials/o.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;O&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、图像实际上只是补充，它的存在只会增强周围的文本。在这些情况下，alt必须存在该属性，但其值必须为空字符串。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>According to a study covering several billion pages,about 9% triggered the Standards mode.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;rendering-mode-pie-chart.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、辅助图像。图像对内容并不重要，但它既不是纯粹的装饰，也不是文本的全部多余。在这些情况下，该alt属性必须存在，并且其值应为空字符串或图像传达的信息的文本表示形式。</p><p>7、纯装饰性图像，这样的图像是装饰性的，但仍构成内容的一部分。alt必须存在该属性，但其值必须为空字符串。</p><p>8、组成但个没有链接的大图的图片组，当一张图片被切分为若干个小图片文件，用来拼装成原来的大图时，这些图片中要有一个的 alt 属性按照相关规则设置为大图的替代文本。 然后其他所有剩余图片必须把 alt 属性设为空字符串。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;XYZ Corp&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9、组成单个有链接的大图的图片组。通常带连接的图片应该使用 图片映射 而不是切分图片。但是，如果图片确实已经被切分了，而且切分后的部分是链接的唯一内容， 那么每个链接必须有一个图片必须把它的 alt 属性设置为表示链接用途的替代文本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?go=left&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;fsm-left.png&quot;</span>  <span class="attr">alt</span>=<span class="string">&quot;Left side. &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;fsm-middle.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?go=right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;fsm-right.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Right side.&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>10、内容的关键部分，图片是内容的关键部分。比如照片库页面中的图片，如何为内容关键的图片提供替代文本，取决于图片的出处。</p><p>通常情况：通过 alt 属性给出替代图片的文字。</p><p>难以提供完整描述的图片： alt 属性也必须包含一些适当的替代文本， 但可以比较简短。</p><p>未知内容的图片：alt 属性可以忽略，但必须符合以下条件之一：（1）img 元素在 包含 figcaption 的 figure 元素中， 且这个 figcaption 元素包含除元素间空白的内容，而且忽略 figcaption 元素及其后代节点后， figure 元素没有其他 流式内容 后代， 元素间空白 和 img 元素除外。（2）title 属性存在且值非空。</p><p>11、不是给用户看的图片，首先应该避免使用不用来显示的 img 元素。如果一个 img 元素不是用于显示的，比如用于计算页面浏览量的服务。 那么 alt 属性必须为空字符串。在这些场景下，width 和 height 属性必须设为 0。</p><p>12、给特定的、已知一定可以查看图片的人的 e-mail 或私人文档中的图片，可以省略alt 属性。但是，即使在这种情况下，也强烈建议作者包括替代文本，如上所示。</p><p>13、标记生成器指引</p><p>标记生成器应尽可能从用户那里获取替代文本。但是在许多情况下这是不可能的。</p><p>对于仅作为链接内容的图像，标记生成器应检查链接目标以确定目标标题或目标URL，并将以此方式获得的信息用作替代文本。</p><p>对于具有标题的图像，标记生成器应使用figure和 figcaption元素或title属性来提供图像的标题。</p><p>作为最后的选择，实现者应在图像为纯装饰性图像下（第7条），将alt 属性设置为空字符串，或假设图像是内容的关键部分（第10条未知内容的图片）完全省略alt属性。</p><p>标记生成器可以 在img元素上指定generator-unable-to-provide-required-alt 属性，这些元素他们无法为其获取替代文本，因此为其省略了该alt属性。</p><p>14、规范检查工具指引</p><p>规范检查工具必须把缺少 alt 属性报告为错误， 以下除外：上面第10条、12条、13条所举特殊情况。</p><h1 id="Media"><a href="#Media" class="headerlink" title="Media"></a><strong>Media</strong></h1><p>audio和video元素，都可用于音频和视频。主要区别只是audio元素没有视觉内容（例如视频或字幕）的播放区域，而video元素却有 。</p><h2 id="error-codes"><a href="#error-codes" class="headerlink" title="error codes"></a><strong>error codes</strong></h2><p>media.error  返回一个表示该元素当前错误状态的MediaError 对象。如无，返回null</p><p>media.error.code   返回当错错误状态的代码</p><p>media.error.message返回有关遇到的错误情况的特定信息诊断消息。消息和消息格式通常在不同的用户代理之间不一致。如果没有此类消息，则返回空字符串。</p><ul><li>1 = MEDIA_ERR_ABORTED - 取回过程被用户中止</li><li>2 = MEDIA_ERR_NETWORK - 当下载时某种网络发生错误</li><li>3 = MEDIA_ERR_DECODE - 当解码时发生错误</li><li>4 = MEDIA_ERR_SRC_NOT_SUPPORTED - 不支持音频/视频<h2 id="媒体资源位置"><a href="#媒体资源位置" class="headerlink" title="媒体资源位置"></a><strong>媒体资源位置</strong></h2></li></ul><p>media . srcObject [ = source ]    允许为media元素分配一个media provider对象。</p><p>media . currentSrc 返回当前媒体资源的URL。没有媒体资源或没有 URL时返回空字符串。</p><p>有三种方法可以指定媒体资源（优先级从大到小）：srcObjectIDL属性，src内容属性和source元素。</p><h2 id="MIME-types"><a href="#MIME-types" class="headerlink" title="MIME types"></a><strong>MIME types</strong></h2><p>只有不带参数的 application/octet-stream”MIME类型 “是特殊情况；如果出现任何参数，则将其与任何其他MIME type一样对待。</p><p>media . canPlayType(type)    检测浏览器是否能播放指定的音频/视频类型</p><p>返回值：</p><ol><li>“probably” - 浏览器最可能支持该音频/视频类型</li><li>“maybe” - 浏览器也许支持该音频/视频类型</li><li>“” - （空字符串）浏览器不支持该音频/视频类型</li></ol><p>source元素的type属性允许用户代理避免下载使用其无法呈现的格式的资源。</p><h2 id="Network-states"><a href="#Network-states" class="headerlink" title="Network states"></a><strong>Network states</strong></h2><p>media . networkState  从下面的代码列表中，返回该元素网络活动的当前状态。</p><ol><li>0 = NETWORK_EMPTY - 音频/视频尚未初始化</li><li>1 = NETWORK_IDLE - 音频/视频是活动的且已选取资源，但并未使用网络</li><li>2 = NETWORK_LOADING - 浏览器正在下载数据</li><li>3 = NETWORK_NO_SOURCE - 未找到音频/视频来源<h2 id="Loading-the-media-resource"><a href="#Loading-the-media-resource" class="headerlink" title="Loading the media resource"></a><strong>Loading the media resource</strong></h2></li></ol><p>media . load()    重新加载音频/视频元素。</p><p>media . buffered  属性返回 TimeRanges 对象，表示用户的音视频缓冲范围。</p><p>TimeRanges 对象属性：</p><ol><li>length - 获得音视频中已缓冲范围的数量</li><li>start(index) - 获得某个已缓冲范围的开始位置</li><li>end(index) - 获得某个已缓冲范围的结束位置<h2 id="Offsets-into-the-media-resource"><a href="#Offsets-into-the-media-resource" class="headerlink" title="Offsets into the media resource"></a><strong>Offsets into the media resource</strong></h2></li></ol><p>media . duration  返回当前音频/视频的长度，以秒计。如果未设置音频/视频，则返回NaN，如果是无限流，返回 Infinity</p><p>media . currentTime [ = value ]    设置或返回音频/视频播放的当前位置</p><h2 id="Playing-the-media-resource"><a href="#Playing-the-media-resource" class="headerlink" title="Playing the media resource"></a><strong>Playing the media resource</strong></h2><p>media . paused   返回音频/视频是否已暂停。true 指示音频/视频已暂停。否则为 false。</p><p>media . ended  返回音频/视频是否已结束。如果播放已结束，则返回 true。否则返回 false。</p><p>media . defaultPlaybackRate [ = value ]  设置或返回音频/视频的默认播放速度。</p><p>media . playbackRate [ = value ]   属性设置或返回音频/视频的当前播放速度。</p><p>media . played   返回TimeRanges 对象。TimeRanges 对象表示用户已经播放或看到的音频/视频范围。</p><p>media . play() 开始播放当前的音频或视频。</p><p>media . pause()  暂停当前播放的音频/视频</p><h2 id="Seeking"><a href="#Seeking" class="headerlink" title="Seeking"></a><strong>Seeking</strong></h2><p>media . seeking  返回用户目前是否在音频/视频中寻址，如果用户正在寻址，则为 true。否则为 false。</p><p>media . seekable  返回TimeRanges对象。表示音频/视频中用户可寻址的范围。</p><ol><li>length - 获得音频/视频中可寻址范围的数量</li><li>start(<em>index</em>) - 获得可寻址范围的开始位置</li><li>end(<em>index</em>) - 获得可寻址范围的结束位置</li></ol><p>media . fastSeek( time )  寻求尽可能快地接近给定的时间，以精度换取速度。（要查找精确的时间，使用currentTime属性。）如果媒体资源尚未加载，则不执行任何操作。</p><h2 id="Media-resources-with-multiple-media-tracks"><a href="#Media-resources-with-multiple-media-tracks" class="headerlink" title="Media resources with multiple media tracks"></a><strong>Media resources with multiple media tracks</strong></h2><p>media . audioTracks返回一个表示该媒体资源可用的音频轨的AudioTrackList对象(包含有audioTrack对象)</p><p>media . videoTracks   返回一个表示该媒体资源可用的视频轨道的 videoTrackList对象。(包含有videoTrack对象)</p><p>media . audioTracks . length           media . videoTracks . length</p><p>返回可用音轨的数量</p><p>audioTrack=media.audioTracks[index]       videoTrack=media.videoTracks[index]</p><p>通过 index 来获得 AudioTrack或VideoTrack 对象</p><p>audioTrack=media.audioTracks.getTrackById(id)</p><p>videoTrack=media.videoTracks.getTrackById(id)</p><p>通过 id 来获得AudioTrack或VideoTrack 对象</p><p>audioTrack . id           videoTrack . id</p><p>获得音轨、视频轨道的 id</p><p>audioTrack . kind      videoTrack . kind</p><p>获得音轨、视频轨道的类型</p><p>audioTrack . label          videoTrack . label</p><p>获得音轨、视频轨道的标签</p><p>audioTrack . language          videoTrack . language</p><p>获得音轨、视频轨道的语言</p><p>audioTrack . enabled [ = value ]    获得或设置音轨是否是活动的 (true|false)</p><p>videoTrack . selected [ = value ]    获得或设置视频轨道是否是活动的 (true|false)</p><p>media . videoTracks . selectedIndex获得当前 VideoTrack 对象的下标，没有返回-1</p><h2 id="AudioTrack和VideoTrack的kind-关键字"><a href="#AudioTrack和VideoTrack的kind-关键字" class="headerlink" title="AudioTrack和VideoTrack的kind 关键字"></a>AudioTrack和VideoTrack的kind 关键字</h2><p>|类别|定义|适用于|<br>|:—-:|:—-|:—-:|:—-|:—-:|:—-|<br>|“ alternative”|主音轨的一种替代，例如不同的歌曲（音频）或不同的角度（视频）。|音频和视频。|<br>|“ captions”|带有字幕的主视频轨道的版本。（对于旧内容，新内容将使用文本轨道。）|仅视频。|<br>|“ descriptions”|视频轨道的音频描述。|仅音频。|<br>|“ main”|主要音频或视频轨道。|音频和视频。|<br>|“ main-desc”|主要音轨，混合有音频说明。|仅音频。|<br>|“ sign”|音轨的手语解释。|仅视频。|<br>|“ subtitles”|带有字幕的主视频轨道版本。（对于旧内容，新内容将使用文本轨道。）|仅视频。|<br>|“ translation”|主音轨的翻译版本。|仅音频。|<br>|“ commentary”|有关主要音频或视频轨道的评论，例如导演的评论。|音频和视频。|<br>|“ ”|用户代理无法识别任何明确的种类或轨道的元数据给出的种类。|音频和视频。<br>|</p><h2 id="Text-track-API"><a href="#Text-track-API" class="headerlink" title="Text track API"></a><strong>Text track API</strong></h2><p>media . textTracks . length    获得音频/视频中可用的文本轨道的数量</p><p>media . textTracks[ n ]    返回TextTrack对象，表示媒体元素的文本轨道列表中的第n个文本轨道。</p><p>textTrack = media . textTracks . getTrackById( id )     返回给定id的TextTrack对象，如果没有，则返回null。</p><p>textTrack = media . addTextTrack( kind [, label [, language ] ] )</p><p>创建和返回新的文本轨道。新的TextTrack对象会被添加到视频/音频元素的文本轨道列表中。</p><p>textTrack . kind    返回文本轨道的类型。</p><p>textTrack . label   返回文本轨道的标签。</p><p>textTrack . language    返回文本轨道的语言。</p><p>textTrack . id    返回文本轨道的id</p><p>textTrack.inBandMetadataTrackDispatchType     返回文本轨道 in-band metadata track dispatch type字符串。</p><p>textTrack.mode [=value]</p><p>获得或设置该轨道是否是活动的(“disabled”|”hidden”|”showing”)</p><p>textTrack . cues        获得 TextTrackCueList 对象的 cues 列表</p><p>textTrack . activeCues       获得 TextTrackCueList 对象形式的当前活动文本轨道 cues</p><p>textTrack . addCue( cue )          向 cues 列表添加一个 cue</p><p>textTrack . removeCue( cue )      向 cues 列表删除一个 cue</p><p>cuelist . length    返回cuse列表的cue数量</p><p>cuelist[index]        返回给定index的cue</p><p>cuelist . getCueById( id )   返回给定id的cue</p><p>cue . track    返回属于文本轨道cue的TextTract</p><p>cue . id [ = value ]   返回或设置cue的id</p><p>cue . startTime [ = value ]   返回或设置cue的开始时间的id</p><p>cue . endTime [ = value ]    返回或设置cue的结束时间的id</p><p>cue . pauseOnExit [ = value ]   是否设置暂停或退出标志，是则返回true,否则为false</p><h2 id="User-interface"><a href="#User-interface" class="headerlink" title="User interface"></a><strong>User interface</strong></h2><p>media . volume [ = value ]</p><p>设置或返回音频/视频的当前音量,必须是介于 0.0 与 1.0 之间的数字。0是静音，1最大</p><p>media . muted [ = value ]</p><p>设置或返回音频/视频是否应该被静音（true）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Image&quot;&gt;&lt;a href=&quot;#Image&quot; class=&quot;headerlink&quot; title=&quot;Image&quot;&gt;&lt;/a&gt;Image&lt;/h1&gt;&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML standard" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/"/>
    
    <category term="The elements of HTML（二）" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/The-elements-of-HTML%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>The elements of HTML（一）</title>
    <link href="http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2021/03/08/note/HTML%20Standard/The%20elements%20of%20HTML%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-03-08T12:31:12.775Z</published>
    <updated>2021-03-08T12:40:51.209Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center"><strong>element</strong></th><th><strong>meaning</strong></th><th align="center"><strong>Categories</strong></th><th align="left"><strong>Contexts in which this element can be used</strong></th><th align="center"><strong>Content model</strong></th><th align="left"><strong>Tag omission in text/html</strong></th><th align="center"><strong>Content attributes</strong></th><th align="left"><strong>remark</strong></th></tr></thead><tbody><tr><td align="center">html</td><td>文档的根</td><td align="center">none</td><td align="left">document、子片段</td><td align="center">head后面跟一个body</td><td align="left">第一个子元素不是注释，可以省略起始标签。html后没有紧跟注释，可以省略结束标签</td><td align="center">manifest （现已不建议使用）</td><td align="left">建议在htm添加lang属性</td></tr><tr><td align="center">head</td><td>metadata的集合（title、link、script、meta）</td><td align="center">none</td><td align="left">html内的第一个元素</td><td align="center">如果是 iframe srcdoc 文档，可以有没有或多个元数据，title和base最多各有一个,其他类型，至少有一个以上的元数据，且必须有且只有一个title，最多一个base</td><td align="left">head内为空可以省略起始标签，结束标签没有紧跟空格或者注释可以省略</td><td align="center">Global attributes</td><td align="left">大多数情况必须含title,除非html用作电子邮件格式</td></tr><tr><td align="center">titile</td><td>文档标题或名称</td><td align="center">Metadata content</td><td align="left">head内</td><td align="center">text文本</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">text属性的getter方法返回title元素的子文本内容，text属性的setter方法用该元素内的给定值替换所有字符串title。用户代理在其用户界面中引用文档时，应使用文档标题。在用户界面titile的directionality应该设置为文档title的directionality（directionality暂未理解）</td></tr><tr><td align="center">base</td><td>页面上的所有链接规定默认地址或默认目标</td><td align="center">Metadata content</td><td align="left">head内</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">href— 文档基本URL<br>target— 用于超链接导航和表单提交的默认浏览上下文</td><td align="left">target、href两个属性至少有一个。多个base的href,只有第一个有效果。href如果指定了content属性，则该属性必须包含一个有效的URL。base如果有href属性，必须在其他有定义获取url属性的元素之前（除了html元素，它的maifest不受影响）。target的frozen base URL这个概念不理解，那里一坨都没看懂</td></tr><tr><td align="center">link</td><td>文档链接到其他资源</td><td align="center">Metadata content</td><td align="left">head内、在noscript 元素作为head元素的子元素、allowed in the body:phrasing content元素</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">href— 超链接的地址<br>crossorigin —元素如何处理跨域请求<br>rel—包含超链接的文档和目标资源之间的关系<br>media —适用媒体<br>integrity—子资源完整性检查中使用的完整性元数据<br>hreflang —链接资源的语言<br>type —提示所引用资源的类型<br>referrerpolicy-  Referrer policy的取发起由元素<br>sizes—图标的大小（用于“ rel=“ icon”）<br>imagesrcset —在不同情况下使用的图像（例如，高分辨率显示器，小型显示器等）<br>imagesizes —不同页面布局的图像大小<br>as— 预加载请求的Potential destination（对于rel=“ preload”和rel=“ modulepreload”）<br>color—自定义网站图标时使用的颜色（对于rel=“ mask-icon”）<br>disabled —是否禁用链接<br>title —链接的标题；CSS样式表集名称。</td><td align="left">必须有rel或者itemprop属性，不能同时使用。如果link元素具有itemprop属性，或者仅包含关键字的rel属性 ，也就是body-ok.link元素可以创建外部资源链接（stylesheet）和超链接(next)，链接类型和数量取决于rel属性的关键字,每个链接对会被单独处理。link创建的超链接和rel属性作用于全文档，a和area相反。</td></tr><tr><td align="center">meta</td><td>提供有关页面的元信息</td><td align="center">Metadata content</td><td align="left">如果charset存在，或者元素的http-equiv属性处于Encoding声明状态：head内。<br>如果http-equiv存在但不处于Encoding声明状态：head内。<br>如果http-equiv存在，但不处于Encoding声明状态：在作为head元素的子元素的noscript元素中。<br>如果name存在： metadata content。<br>如果itemprop存在： metadata content。<br>如果itemprop属性存在： phrasing content。</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">name —元数据名称<br>http-equiv —编译指示指令<br>content —元素的值<br>charset— 字符编码声明</td><td align="left">每个文档meta的charset属性不得超过一个。name的值：application-name（提供页面代表的Web应用程序的名称）、author（作者）、description（描述页面）、generator（标识用于生成文档的软件包）、keywords（关键字，许多搜索引擎不考虑）、referrer（没懂）、theme-color（定义建议的颜色），以及其他自己定义的。http-equiv：content-language（设置编译设定的默认语言,鼓励使用lang）、content-type（字符编码声明）、default-style（设置默认 CSS样式表集的名称）、refresh（定义文档自动刷新的时间间隔）、set-cookie（此实用程序不符合要求，没有任何效果）、    x-ua-compatible（指定网页的兼容性模式设置）、content-security-policy（启用CSP内容安全策略）。</td></tr><tr><td align="center">style</td><td>将CSS样式表嵌入其文档中</td><td align="center">Metadata content</td><td align="left">metadata content、在作为head元素的子元素的noscript元素中</td><td align="center">Text that gives a conformant style sheet</td><td align="left">不可省略</td><td align="center">media —适用媒体<br>title属性–CSS样式表集名称</td><td align="left">如果media 省略该属性，则默认值为“ all”，这意味着默认情况下样式适用于所有媒体</td></tr><tr><td align="center">body</td><td>文档的内容</td><td align="center">Sectioning root</td><td align="left">html内的第二个元素</td><td align="center">Flow content</td><td align="left">如果元素为空，或第一个子元素不是空格或注释，除非第一个子元素是meta, link, script, style, 或者 template元素，起始标签可以省略。如果元素后面没有紧跟注释，可以省略结束标签。</td><td align="center">onafterprint<br>onbeforeprint<br>onbeforeunload<br>onhashchange<br>onlanguagechange<br>onmessage<br>onmessageerror<br>onoffline<br>ononline<br>onpagehide<br>onpageshow<br>onpopstate<br>onrejectionhandled<br>onstorage<br>onunhandledrejection<br>onunload</td><td align="left">文档只能有一个body元素。onerror事件将从目标冒泡到body、html、document、window，而body上的事件处理程序监视的是window而不是body。但是，使用addEventListener（）添加的事件侦听器将在事件冒泡通过body时运行，而不是在事件到达window对象时运行。</td></tr><tr><td align="center">article</td><td>规定独立的自包含内容，比如论坛帖子、报纸文章、博客条目、用户评论</td><td align="center">Flow content<br>Sectioning content<br>Palpable content</td><td align="left">flow content</td><td align="center">flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">与article元素关联的作者信息不适用于嵌套的article元素。</td></tr><tr><td align="center">scetion</td><td>文档或应用的通用部分，比如比如章节、页眉、页脚等</td><td align="center">Flow content<br>Sectioning content<br>Palpable content</td><td align="left">flow content</td><td align="center">flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">当需要syndicate元素内容时，使用article而不是section.使用section时可以一直使h1</td></tr><tr><td align="center">nav</td><td>定义导航链接的部分</td><td align="center">Flow content<br>Sectioning content<br>Palpable content</td><td align="left">flow content</td><td align="center">flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">用于服务条款、版权信息的链接一般放在底部的footer而不是nav</td></tr><tr><td align="center">aside</td><td>与页面主内容无关，比如侧边栏，广告、拉引号</td><td align="center">Flow content<br>Sectioning content<br>Palpable content</td><td align="left">flow content</td><td align="center">flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">aside仅将元素用于括号是不合适的</td></tr><tr><td align="center">h1、h2、h3……</td><td>定义标题</td><td align="center">Flow content<br>Sectioning content<br>Palpable content</td><td align="left">作为hgroup的子元素，flow content 、heading content</td><td align="center">flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">不要因为字体大小，来选择不同的h,一般css里改</td></tr><tr><td align="center">hgroup</td><td>标题部分，比如副标题、标语等</td><td align="center">Flow content<br>Heading conten<br>Palpable content</td><td align="left">flow content、heading content</td><td align="center">包含一个以上h1-h6，并可以选择性的与支持脚本的元素（script、template）一起使用</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">hgroup的rank是其包含的h标签里的最高的一个。hgroup对两个标题进行分组，即便都是同等级的h标签，也是不对等的</td></tr><tr><td align="center">header</td><td>定义文档的页眉（介绍信息、导航辅助）</td><td align="center">Flow content<br>Palpable content</td><td align="left">flow content</td><td align="center">没有footer和header子代的flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">header不会引入新的部分</td></tr><tr><td align="center">footer</td><td>义文档或节的页脚，通常包含文档的作者、版权信息、使用条款链接、联系信息等等</td><td align="center">Flow content<br>Palpable content</td><td align="left">flow content</td><td align="center">没有footer和header子代的flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">通常在底部，但不是绝对的。比如像联系信息等有可能在footer也可以在address</td></tr><tr><td align="center">address</td><td>定义文档或文章作者的联系信息</td><td align="center">Flow content<br>Palpable content</td><td align="left">flow content</td><td align="center">没有heading content 、sectioning content 、header, footer,  address 子代的Flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">address可以在articel内，也可以在body内(引用于整个文档)。address不能用于任何地址比如邮政地址（通常用P标签）,也不得用于除联系方式以外的信息，通常和其他信息包含在footer内。</td></tr><tr><td align="center">p</td><td>段落</td><td align="center">Flow content<br>Palpable content</td><td align="left">flow content</td><td align="center">Phrasing content</td><td align="left">结束标签省略：p后紧跟address, p, aside, div, 等，或父元素没有内容，且父元素不是 a, audio, del, ins, map, noscript, video或自定义元素</td><td align="center">Global attributes</td><td align="left">当有更适用的标签时，不应该使用p。p 元素会自动在其前后创建一些空白。列表元素特别是ol、ul不能作为p的子元素。设计由多个结构段落组成的逻辑段落时，用div来代替p。</td></tr><tr><td align="center">hr</td><td>水平线</td><td align="center">Flow content</td><td align="left">Flow content</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">Global attributes</td><td align="left">hr不影响文档的轮廓</td></tr><tr><td align="center">pre</td><td>预格式化的文本块</td><td align="center">Flow content<br>Palpable content</td><td align="left">flow content</td><td align="center">Phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">pre的结构是由印刷规定而不是元素来表示。常用于表示：电子邮件、代码块（与code、samp、kbd一起使用）、ASCII文字</td></tr><tr><td align="center">blockquote</td><td>引用块</td><td align="center">Flow content<br>Sectioning root<br>Palpable content</td><td align="left">flow content</td><td align="center">flow content</td><td align="left">不可省略</td><td align="center">Global attributes<br>cite —链接引用和编辑信息资源</td><td align="left">blockquote中的内容是引用的其他资源， blockquote中的内容可以缩写，也可以按照文本语言的传统方式添加上下文。引用内容的属性必须放在blockquote外部。</td></tr><tr><td align="center">ol</td><td>有序列表</td><td align="center">Flow content.<br>如果至少含有一个li:Palpable content</td><td align="left">flow content</td><td align="center">li和脚本支持元素</td><td align="left">不可省略</td><td align="center">reversed —降序<br>start— 列表的起始值<br>type —列表标记的类型</td><td align="left">type关键字：1（十进制数）、a（小写拉丁字母）、A（大写拉丁字母）、i（小写罗马数字）、I（大写罗马数字）</td></tr><tr><td align="center">ul</td><td>无序列表</td><td align="center">Flow content.<br>如果至少含有一个li:Palpable content</td><td align="left">flow content</td><td align="center">li和脚本支持元素</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">menu</td><td>代表命令的工具栏</td><td align="center">Flow content.<br>如果至少含有一个li:Palpable content</td><td align="left">flow content</td><td align="center">li和脚本支持元素</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">li</td><td>列表项</td><td align="center">none</td><td align="left">ol、ul、menu内</td><td align="center">Flow content</td><td align="left">如果li后紧跟另一个li元素或者其父元素没有内容，则结束标签可以省略</td><td align="center">value—只有在ol内情况下，代表列表项的顺序值，必须为整数</td><td align="left">不建议在li内放入h1元素</td></tr><tr><td align="center">dl</td><td>描述性列表</td><td align="center">Flow content、Palpable content</td><td align="left">flow content</td><td align="center">一个以上的dt后面跟着一个以上的dd，或者一个以上的div,可以和脚本支持的元素搭配使用</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">在单个dl元素中，每个名称不应该有多个dt元素。dl可以被包含在div内</td></tr><tr><td align="center">dt</td><td>列表中的项目（术语部分、名称）</td><td align="center">none</td><td align="left">在dl内的dd、dt之前，或者在div内的dd、dt之前</td><td align="center">Flow content(没有footer、header、 sectioning content、heading content后代)</td><td align="left">dt元素后面紧跟其他dd、dt，则结束标签可以省略</td><td align="center">Global attributes</td><td align="left">可以使用dfn元素表示术语的定义</td></tr><tr><td align="center">dd</td><td>条目的定义部分</td><td align="center">none</td><td align="left">在dl内的dd、dt之后，或者在div内的dd、dt之后</td><td align="center">Flow content</td><td align="left">dd元素后面紧跟其他dd、dt，或父元素没有内容，则结束标签可以省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">figure</td><td>独立的流内容（图表，图片，代码）</td><td align="center">Flow content<br>Sectioning root<br>Palpable content</td><td align="left">Flow content</td><td align="center">Flow content 或Flow content后跟figcaption，或者figcaption前跟Flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">figure被删除后，不能对文档流产生影响</td></tr><tr><td align="center">figcaption</td><td>figure的标题</td><td align="center">none</td><td align="left">figure内的第一个或最后一个元素</td><td align="center">Flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">mian</td><td>文档的主要内容</td><td align="center">Flow content<br>Palpable content</td><td align="left">Flow content，但只能有一个</td><td align="center">Flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">如果有多个main必须有hidden属性。main的父元素只能是html, body, div, form</td></tr><tr><td align="center">div</td><td>块级元素，无特殊含义</td><td align="center">Flow content<br>Palpable content</td><td align="left">Flow content，或作为dl的子元素</td><td align="center">如果是dl的子元素：一个以上的dt后跟一个以上dd，且可以与脚本支持元素使用。否则，Flow content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">当没有元素适合，建议使用div</td></tr><tr><td align="center">a</td><td>如果有href属性，代表资源的超链接。没有则表示为占位符。</td><td align="center">Flow content.<br>Phrasing content.<br>Interactive content:如果存在href属性.<br>Palpable content.</td><td align="left">phrasing content</td><td align="center">不能有交互式内容的子代，a元素子代，或者带有tabindex属性的子代</td><td align="left">不可省略</td><td align="center">href — 超链接的地址<br>target — 在何处打开链接文档<br>download — 被下载的超链接目标<br>ping — ping 的URL地址<br>rel —当前文档与被链接文档之间的关系<br>hreflang — 被链接资源的语言<br>type —提示被链接资源的的 MIME 类型<br>referrerpolicy— Referrer policy for fetches initiated by the element</td><td align="left">如果没有href属性，则a元素其他属性必须省略。如果有 itemprop 属性，则必须有href属性。</td></tr><tr><td align="center">em</td><td>强调重点的内容</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">强调的级别由em数量决定。</td></tr><tr><td align="center">strong</td><td>对内容极其强调</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">strong通常强调标题、段落、警告、危险标志、用户更需要长时间看见的内容等，比em强调程度更大。</td></tr><tr><td align="center">small</td><td>小号字体</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">常用于免责声明、警告、法律限制、版权信息、属性、许可要求等。使用small并不代表内容不重要，不重要只需不使用em、strong即可，small和strong、em也可嵌套使用。small不适用于大篇幅如段落、列表等。只用于小段文本，也不适用于副标题。</td></tr><tr><td align="center">s</td><td>无关或不准确的内容（文本添加删除线）</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">更推荐使用del元素。</td></tr><tr><td align="center">cite</td><td>引用或参考的内容，也可以是顺带提及的内容，通常是论文、文章、杂志等的标题</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">不能用于人名。</td></tr><tr><td align="center">q</td><td>引用了其他资源的phrasing content</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">cite — 引用的资源链接</td><td align="left">不需要添加标点符号，UA会渲染添加。引用的资源可以是虚构的，不适合引用单独一个单词。不能用q代替不表示引用的引用（讽刺语句，通常会加标点符号，但这并不是引用）</td></tr><tr><td align="center">dfn</td><td>定义术语</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content，不包含dfn的子代</td><td align="left">不可省略</td><td align="center">title— 显示完整的术语或缩写的扩展</td><td align="left">dfn的父元素需包含dfn内术语的定义，且其title属性不影响dfn。title只能是这个术语的定义，不能包含其他。</td></tr><tr><td align="center">abbr</td><td>简称或缩写</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">title— 显示完整的术语或缩写的扩展</td><td align="left">适用情况：开发者想要解释缩写的含义；用户不熟悉的术语；存在需要进行语义注释的缩写。有title的abbr与没有title的abbr不会影响。</td></tr><tr><td align="center">ruby</td><td>定义 ruby 注释（有注音或其他注释）</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">Phrasing content，不包含ruby或ruby子元素。单独的ruby,且自身不喊ruby。一个或多个rt。一个rb包含一个或多个rt</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">在没有ruby父元素的ruby中，内容被分为三段：基本文本片段；注释片段；可忽略片段（空格或rp）。其中tr对应注释片段，通常只有一个。</td></tr><tr><td align="center">rt</td><td>标记ruby注释的ruby文本组件</td><td align="center">none</td><td align="left">ruby的子元素</td><td align="center">Phrasing content</td><td align="left">rt后紧跟rt或tp，或其父元素没有内容，则结束标签可以省略</td><td align="center">Global attributes</td><td align="left">当它是ruby元素的子元素时，它本身并不表示任何东西，但是ruby元素使用它来确定它所代表的内容。</td></tr><tr><td align="center">rp</td><td>在ruby注释的ruby文本组件周围提供括号或其他内容</td><td align="center">none</td><td align="left">ruby的子元素，紧跟在rt之前或之后</td><td align="center">Text</td><td align="left">tp后紧跟tr或rp，或其父元素没有内容，则结束标签可以省略</td><td align="center">Global attributes</td><td align="left">由不支持ruby注释的UA显示。</td></tr><tr><td align="center">data</td><td>本身的内容及其value的值</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">value — 机器可读的值</td><td align="left">value属性必须存在，并且是以机器可读的格式来代表元素的内容。当内容与时间有关，使用time。适用于：当与微格式或微数据属性相结合时，元素用于提供用于数据处理的机器可读值和用于在Web浏览器中呈现的人可读值。在这种情况下，value的格式由所使用的微格式或微数据决定；当脚本有一个文本值要与人可读的值一起存储时，可以与页面中的脚本一起使用，value格式只取决于脚本的需要。</td></tr><tr><td align="center">time</td><td>时间相关的内容及其value的值</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">当有datatime属性：phrasing content ，否则为Text</td><td align="left">不可省略</td><td align="center">datetime — 机器可读的值</td><td align="left">time的datetime值是datetime内容属性的值，否则为time元素的子文本内容。没有datetime属性的time元素不能有子元素。</td></tr><tr><td align="center">code</td><td>计算机代码片段</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">可以添加一个值为“language-XX”的class属性来指示所使用的语言。</td></tr><tr><td align="center">var</td><td>变量</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">samp</td><td>样本；程序或计算机输出的引用</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">kbd</td><td>用户输入（通常是键盘文本）</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">当kbd嵌套在samp中，表示系统回显的输入；当包含samp，表示基于系统输出的输入，例如调用菜单项；当kbd嵌套在另一个kbd中，表示一个实际的键或其他适合输入机制的单个输入单元。code、var、samp、kbd这些常与pre一起使用。</td></tr><tr><td align="center">sub/sup</td><td>上标/下标</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">特殊的排版要求才使用。</td></tr><tr><td align="center">i</td><td>斜体文本效果</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">适用于i的情况，要考虑是否用em和dfn更合适。</td></tr><tr><td align="center">b</td><td>粗体</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">当没有其他元素适合时，才考虑用b。并非有重要的语义。</td></tr><tr><td align="center">u</td><td>下划线</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">注意避免导致用户错认为超链接。</td></tr><tr><td align="center">mark</td><td>突出显示文本</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">bdi</td><td>从周围的文本格式设置中隔离</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">dir –默认为auto,不会继承父元素的样式</td><td align="left">在发布用户生成的内容时，该标签很有用。</td></tr><tr><td align="center">bdo</td><td>可覆盖默认的文本方向</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">dir –定义文字的方向（ltr<br>、rtl）</td><td align="left">必须设置dir属性，不能设置为auto。</td></tr><tr><td align="center">sapn</td><td>行内元素</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">phrasing content</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">br</td><td>换行符</td><td align="center">Flow content<br>Phrasing content</td><td align="left">phrasing content</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">Global attributes</td><td align="left">当段落只有br元素，代表占位符空行</td></tr><tr><td align="center">wbr</td><td>换行符的时机</td><td align="center">Flow content<br>Phrasing content</td><td align="left">phrasing content</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">Global attributes</td><td align="left">如果文本过长，可能会导致换行，浏览器会按照wbr来换行，避免语义混乱。</td></tr><tr><td align="center">ins</td><td>文档新的添加</td><td align="center">Flow content<br>Phrasing content<br>Palpable content</td><td align="left">phrasing content</td><td align="center">Transparent</td><td align="left">不可省略</td><td align="center">cite —引用文档的URL（解释变动原因）。<br>datetime —变化的日期和时间</td><td align="left">ins 不应该跨越 implied paragraph边界</td></tr><tr><td align="center">del</td><td>文档的删除部分</td><td align="center">Flow content<br>Phrasing content</td><td align="left">phrasing content</td><td align="center">Transparent</td><td align="left">不可省略</td><td align="center">cite —引用文档的URL（解释变动原因）。<br>datetime —变化的日期和时间</td><td align="left">ins和del不能作为ul、ol的子元素。</td></tr><tr><td align="center">img</td><td>图片的展示</td><td align="center">Flow content<br>Phrasing content<br>Embedded content<br>Form-associated element<br>Interactive content(有usemap属性)<br>Palpable content</td><td align="left">embedded content</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">alt —不能正常显示时的替代文本<br>src —资源的地址<br>srcset — 图片应用的场景<br>sizes —图片设置的尺寸<br>crossorigin — 如何处理跨域请求<br>usemap—定义为客户器端图像映射<br>ismap—定义为服务器端图像映射<br>width — 宽度<br>height — 高度<br>referrerpolicy— 设置引用策略<br>decoding —图像解码的首选方法<br>loading — 确定懒加载时使用</td><td align="left">建议懒加载的图片设置宽高属性，防止加载后页面布局改变。img元素不能当做页面的布局工具或展示透明的图片。设置了src和alt属性，但alt属性值为空字符串，图片是内容的装饰或补充，没有设置alt属性，代表图片是内容的关键部分，但没有可替换的文本内容。</td></tr><tr><td align="center">iframe</td><td>嵌套的浏览上下文</td><td align="center">Flow content<br>Phrasing content<br>Embedded content<br>Interactive content<br>Palpable content</td><td align="left">embedded content</td><td align="center">无</td><td align="left">不可省略</td><td align="center">src — 资源地址<br>srcdoc —需要渲染的html文档<br>name — 名称<br>sandbox — 嵌套内容的安全规则<br>allow — iframe内容的功能策略<br>allowfullscreen—允许使用requestFullscreen()方法<br>allowpaymentrequest—允许使用PaymentRequest 界面处理支付请求<br>width — 宽度<br>height — 高度<br>referrerpolicy —引用策略</td><td align="left">1、srcdoc属性“”内的&amp;和‘“”符号必须转义的,否则会提前结束，沙盒内容中提到的原始&amp;必须双重转义，以便在最初解析srcdoc属性时保留&amp;，防止再一次解析沙盒内容时误解&amp;。<br>2、同时有src和srcdoc属性，则后者的优先级更高。<br>3、iframe可能会延迟load事件。<br>4、如果没有设置src和srcdoc,或设置了不能解析，浏览上下文会保持在原始的about:blank页面。<br>5、sandbox属性值： allow-forms（重启表单）, allow-modals（重启模态对话框）, allow-orientation-lock（重启屏幕方向锁）, allow-pointer-lock（重启pointer lock API）, allow-popups（重启弹出框）, allow-popups-to-escape-sandbox（重新创建无沙箱的auxiliary浏览器上下文）, allow-presentation（重启presentation API）, allow-same-origin（使得内容被视为来自真实来源，而不是强制其进入唯一的来源）, allow-scripts（重启脚本）, allow-top-navigation（允许内容导航到顶级浏览器上下文）, allow-top-navigation-by-user-activation（只有当浏览器上下文的 active window短暂的激活时）, and allow-downloads。 allow-top-navigation 和allow-top-navigation-by-user-activation不能通知指定，否则只有前者起作用。</td></tr><tr><td align="center">embed</td><td>额外的程序或交互内容</td><td align="center">Flow content<br>Phrasing content<br>Embedded content<br>Interactive content<br>Palpable content</td><td align="left">embedded content</td><td align="center">无</td><td align="left">不可省略</td><td align="center">src — 资源地址<br>type —嵌套资源的类型<br>width — 宽度<br>height — 高度</td><td align="left">1、如果跳转到其他浏览器上下文，src属性不会改变<br>2、没有回退内容，子元素会被忽略。</td></tr><tr><td align="center">object</td><td>表示外部资源</td><td align="center">Flow content<br>Phrasing content<br>Embedded content<br>Interactive content（如果有usemap属性）<br>Listed and submittable form-associated element.<br>Palpable content.</td><td align="left">embedded content</td><td align="center">没有或多个param元素</td><td align="left">不可省略</td><td align="center">data — 资源地址<br>type —嵌套资源的类型<br>name — 名称<br>usemap —规定与对象一同使用的客户端图像映射的 URL<br>form — 规定对象所属的一个表单<br>width — 宽度<br>height — 高度</td><td align="left">可以插入HTML 文档中的对象的数据和参数，以及可用来显示和操作数据的代码。</td></tr><tr><td align="center">param</td><td>作为脚本，嵌套在object的参数</td><td align="center">None</td><td align="left">在flow content前面的object子元素</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">name —参数名称<br>value — 参数的值</td><td align="left">两个属性都必须存在。</td></tr><tr><td align="center">video</td><td>播放视频、电影，或带字幕的音频文件</td><td align="center">Flow content.<br>Phrasing content.<br>Embedded content.<br>Interactive content(如果有controls属性 )<br>Palpable content.</td><td align="left">embedded content</td><td align="center">如果有src属性：没有或多个track,并且是透明的，没有媒体子元素。<br>没有src属性：没有或多个source，接着没有或多个track,并且是透明的，没有媒体子元素。</td><td align="left">不可省略</td><td align="center">src — 资源地址<br>crossorigin — 如何处理跨域请求<br>poster — 播放前显示的画面url<br>preload—页面加载时视频也加载<br>autoplay—页面加载好后自动播放<br>playsinline —内联形式播放<br>loop —循环播放<br>muted —默认静音<br>controls —展示控件<br>width —宽<br>height — 高</td><td align="left">1、可以在video内插入文本，当浏览器不支持时，用于提供一些帮助信息。<br>2、字幕、手语、音频描述可以直接嵌入到视频，其中字幕也可以用track外引文件，音频描述可以以文本通过WebVTT 文件，track会将文本合成语音，WebVTT也可以提供章节信息。<br>3、视频中的每一帧对应哪个播放位置由视频流的格式决定。</td></tr><tr><td align="center">audio</td><td>音频</td><td align="center">Flow content.<br>Phrasing content.<br>Embedded content.<br>Interactive content、Palpable content(如果有controls属性 )</td><td align="left">embedded content</td><td align="center">如果有src属性：没有或多个track,并且是透明的，没有媒体子元素。<br>没有src属性：没有或多个source，接着没有或多个track,并且是透明的，没有媒体子元素。</td><td align="left">不可省略</td><td align="center">src — 资源地址<br>crossorigin — 如何处理跨域请求<br>preload—页面加载时音频也加载<br>autoplay—页面加载好后自动播放<br>loop —循环播放<br>muted —默认静音<br>controls —展示控件</td><td align="left">当字幕和手语视频可以使用时，video可以代替audio.</td></tr><tr><td align="center">track</td><td></td><td align="center">none</td><td align="left">在flow content前面的媒体子元素</td><td align="center">无</td><td align="left">没有结束标签</td><td align="center">kind — 轨道的文本类型<br>src — 资源地址<br>srclang — 轨道语言<br>label — 标签<br>default — 默认的轨道</td><td align="left">1、kind关键字（可以省略，缺失默认 subtitles ，无效默认 metadata）<br>captions：播放器中显示的简短说明<br>chapters：定义章节，用于导航媒介资源<br>descriptions：定描述，用于通过音频描述媒介的内容<br>metadata：定义脚本使用的内容<br>subtitles：定义字幕，用于在视频中显示字幕<br>2、媒体元素的最多有一个这样的track（kind属性除metadata以外，并且指定了default）<br>3、track的readstatus：<br>0：未加载<br>1：正在加载<br>2：加载完成<br>3：加载失败</td></tr><tr><td align="center">table</td><td>表格</td><td align="center">Flow content.<br>Palpable content.</td><td align="left">flow content</td><td align="center">顺序如下：caption（可选）、colgroup(0个或多个)、thead 、tbody 或tr（0个或多个）、tfoot0个或多个）、脚本支持元素（可选）</td><td align="left">不可省略</td><td align="center">Global attributes</td><td align="left">1、table不能用于布局的工具<br>2、如果一个表格不以第一行和第一列作为标题，或着其他特殊情况，应该引入介绍该表格的解释性信息。</td></tr><tr><td align="center">caption</td><td>表格标题</td><td align="center">none</td><td align="left">table内的第一个元素</td><td align="center">没有子代table元素的Flow content</td><td align="left">如果caption后没有紧跟空格或注释，则结束标签可以省略</td><td align="center">Global attributes</td><td align="left">1、当figure元素除了figurecaption以外，只有table元素，应该省略caption而使用figurecaption。<br>2、caption可以用来解释表格内容，使得其更容易理解</td></tr><tr><td align="center">colgroup</td><td>对表格中的列进行组合，以便对其进行格式化</td><td align="center">none</td><td align="left">table内，在caption后，在thead, tbody, tfoot或tr前.</td><td align="center">有span属性，nothing，否则，零个或多个col和template元素</td><td align="left">起始标签省略：colgroup内是一个元素col，或元素前面没有紧跟另一个已省略结束标签的colgroup，如元素为空，则不可省略<br>结束标签省略：colgroup后没有紧跟空格或注释</td><td align="center">Global attributes<br>span —列组应该横跨的列数</td><td align="left">1、colgroup内没有col,则应该在元素上设置span属性，值在1—1000之间。</td></tr><tr><td align="center">col</td><td>为表格中一个或多个列定义属性值</td><td align="center">none</td><td align="left">作为没有span属性的colgroup子元素</td><td align="center">nothing</td><td align="left">没有结束标签</td><td align="center">Global attributes<br>span —列组应该横跨的列数</td><td align="left"></td></tr><tr><td align="center">tbody</td><td>表格主体</td><td align="center">none</td><td align="left">table的子元素，在caption、colgroup和thead之后，但前提是没有作为table子元素的tr。</td><td align="center">零个或多个tr以及支持脚本的元素</td><td align="left">起始标签省略：tbody内的第一个元素是tr，或没有紧在省略了结束标签的tbody、thead、tfoot之前，元素内为空时不能省略。<br>结束标签省略：tbody后紧跟tbody、tfoot，或父元素没有内容</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">thead</td><td>表格的表头</td><td align="center">none</td><td align="left">table的子元素，在caption、colgroup之后，在tbody、tfoot之前，但前提是没有其他head。</td><td align="center">零个或多个tr以及支持脚本的元素</td><td align="left">如果thead元素后紧跟tbody或tfoot元素，结束标签可以省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">tfoot</td><td>表格的页脚</td><td align="center">none</td><td align="left">table的子元素，在caption、colgroup和thead、tbody、tr之后，但前提是没有其他tfoot。</td><td align="center">零个或多个tr以及支持脚本的元素</td><td align="left">父元素没有内容，可以省略结束标签</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">tr</td><td>表格中的行</td><td align="center">none</td><td align="left">thead的子元素.<br>tbody的子元素.<br>tfoot 的子元素.<br>table的子元素，在caption, colgroup,thead之后，前提是没有作为table子元素的tbody</td><td align="center">零个或多个 td, th，或支持脚本的元素</td><td align="left">tr后紧跟另一个tr，或父元素没有内容，结束标签可以省略</td><td align="center">Global attributes</td><td align="left"></td></tr><tr><td align="center">td</td><td>表格的标准单元格</td><td align="center">Sectioning root</td><td align="left">tr的子元素</td><td align="center">Flow content</td><td align="left">td后紧跟td或th，或父元素没有内容，结束标签可以省略</td><td align="center">colspan — 单元格可横跨的列数<br>rowspan — 单元格可横跨的行数<br>headers — 与单元格相关的表头</td><td align="left">用户代理，特别是在非可视环境中，或者在无法将表显示为2D网格的情况下，当呈现单元格的内容时，可能会提供单元格的用户上下文；例如，给出单元格在表模型中的位置，或列出单元格的标题单元格（由分配标题单元格的算法确定）。</td></tr><tr><td align="center">th</td><td>表头单元格</td><td align="center">none</td><td align="left">th的子元素</td><td align="center">Flow content,但没有header,footer,sectioning content,heading content后代</td><td align="left">th后紧跟td或th，或父元素没有内容，结束标签可以省略</td><td align="center">colspan — 单元格可横跨的列数<br>rowspan — 单元格可横跨的行数<br>headers — 与单元格相关的表头<br>scope — 表头数据与单元数据相关联的方法<br>abbr — 单元格中内容的缩写版本</td><td align="left">scope属性值字：<br>1、col   规定单元格是列的表头。<br>2、row    规定单元格是行的表头。<br>3、colgroup    规定单元格是列组的表头。<br>4、rowgroup    规定单元格是行组的表头。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;element&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;meaning&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;strong&gt;Categorie</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML standard" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/"/>
    
    <category term="The elements of HTML（一）" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/The-elements-of-HTML%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Semantics, structure, and APIs of HTML documents</title>
    <link href="http://example.com/2021/03/08/note/HTML%20Standard/Semantics_%20structure_%20and%20APIs%20of%20HTML%20documents/"/>
    <id>http://example.com/2021/03/08/note/HTML%20Standard/Semantics_%20structure_%20and%20APIs%20of%20HTML%20documents/</id>
    <published>2021-03-08T12:31:08.694Z</published>
    <updated>2021-03-08T12:56:18.253Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Document object</strong>:包含<strong>HTTPS state，</strong>代表传输数据的网络信道的安全属性，<strong>referrer policy、module ma、feature policy、CSP list</strong>包含了内容安全策略</p><p>Semantics ，元素、属性、属性值规范都定义了语义，不能用于定义语义以外的目的，不得使用规范以外的元素、属性、属性值。html具有描述进度条的progresss元素。</p><p><strong>Elements in the DOM，</strong>HTML元素必须实现规范列出的接口，并将这些接口expose to 脚本。</p><p><strong>Element definitions</strong>，每一个元素包含以下信息的定义：类别、Contexts in which this element can be used、内容模型、Tag omission in text/html、内容属性、Accessibility considerations、DOM 接口。</p><p><strong>Content models，</strong>每一个元素都内容模型，即对元素预期内容的描述，元素的内容是其dom中的子元素。元素之间允许有空格，元素之间的字符表示为Text，DOM节点，空Text节点和 Text仅由这些字符的序列组成的节点被视为 元素间空格。 在确定元素的内容是否与元素的内容模型匹配时，以及遵循定义文档和元素语义的算法时，必须忽略元素间空格，注释节点和处理指令节点（处理指令节点没懂）。HTML元素可以没有父节点。当元素的内容模型为空，该元素不包含任何Text节点（元素间空格除外）且不包含元素节点。</p><p><strong>Kinds of content，</strong>元素可以属于一个或者多个类别，甚至有些元素不属于任何特定类别，</p><ol><li><strong>Metadata content：</strong>设置其余内容的表示形式或行为、是指文档与其他文档的关系、传达其他 “out of band” 信息的内容。</li><li><strong>Flow content：</strong>大多元素都属于这个类别，常见的a、div、table……。</li><li><strong>Sectioning content：</strong>用于定义内容标题和页脚，比如article、aside、nav、section。</li><li><strong>Heading content：</strong>h1、h2…。</li><li><strong>Phrasing content：</strong>分类为Phrasing content的大多元素只能包含Phrasing content的元素。3.2.5.2.5后面一节暂未理解。</li><li><strong>Embedded content，</strong>将另一个资源导入文档中的内容，或来自插入到文档中的另一个词汇表中的内容，如audio、video,有些有 fallback content，比如外部资源的格式不支持所显示的内容</li><li><strong>Interactive content，</strong>a、button、input。。。。</li><li><strong>Palpable content，</strong>没理解</li><li><strong>Script-supporting elements，</strong>script、template</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Document object&lt;/strong&gt;:包含&lt;strong&gt;HTTPS state，&lt;/strong&gt;代表传输数据的网络信道的安全属性，&lt;strong&gt;referrer policy、module ma、feature policy、CSP lis</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML standard" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/"/>
    
    <category term="Semantics, structure, and APIs of HTML documents" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/Semantics-structure-and-APIs-of-HTML-documents/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Common infrastructure</title>
    <link href="http://example.com/2021/03/08/note/HTML%20Standard/Common%20infrastructure/"/>
    <id>http://example.com/2021/03/08/note/HTML%20Standard/Common%20infrastructure/</id>
    <published>2021-03-08T12:19:42.450Z</published>
    <updated>2021-03-08T12:36:08.666Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Parallelism</strong>并行性，指不同的进程可以同时进行，同时为了避免对相同的数据进行不同的操作，这里使用队列(先进先出)来解决。但所举的例子，没怎么懂。。</p><p><strong>Resources</strong>资源，资源能否被支持，取决于资源的格式，是否为critical资源由资源格式的规范来定义，对于CSS样式表，关键子资源是通过@import 规则导入的样式表及其间接导入的样式表。</p><p><strong>element type 元素类型，</strong>有local name 和 namespace命名空间，如果属性名称与XML中Name定义的生产匹配，且不包含：，则该属性名称能与XML兼容。</p><p><strong>DOM trees</strong>，当有些element和 attribute没有指定值时，会有默认值，比如div标签的display属性默认值就是block，有时呢格局需要我们又会设置为none。当一个node作为插入时的参数时，将连接 browsing-context，remove时，断开 browsing-context连接。<strong>browsing context</strong>是指呈现给用户的document对象内的一个环境。shadowroot 这个概念目前没怎么能理解到，查询得知是 DOM 子树的根节点</p><p><strong>Scripting</strong>，foo 更为精确的说应该是interface object</p><p><strong>Plugins</strong>，是content handlers 的 implementation-defined set</p><p><strong>Character encodings</strong>，字符编码， 是 byte streams 和 Unicode strings之间转换的方式，其中utf-16不兼容ASCII.</p><p><strong>Conformance classes</strong>，<strong>Conforming documents</strong>是指遵守 conformance criteria的文档，user agent 无权处理不符合标准的文档。用户代理可以分为Web browsers and other interactive 用户代理、Non-interactive presentation 用户代理、support the suggested default rendering 的Visual 用户代理、不支持 scripting 的用户代理，<strong>UA</strong>使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等</p><p><strong>Conformance checkers，</strong>在进行检查时，没有 browsing context和脚本的运行，<strong>conformance criteria</strong>分为三种：通过DTD，通过machine，通过人检查，conformance checker必须满足检查前两种。</p><p><strong>Data mining tools，</strong>处理HTML和XML文档的工具和程序<strong>，</strong>除了渲染文档和检查其符合性以外，还要根据其处理的文档语义进行处理。</p><p><strong>Authoring tools and markup generators，</strong>Authoring tools 分为两类。一种是 tools that work from structure or semantic data，还有一种tools that work on a WYSIWYG（所见即所得） media-specific editing basis，创作工具 应该能让用户能够创建结构良好，语义丰富，独立于媒体的内容， 规范描述了两种 authoring formats，一种基于XML,另一种， custom format inspired by SGML(标准通用标记语言)，也就是HTML。一些 conformance requirements是对元素、属性、方法、对象的要求，分为两类，一种是内容模型限制的要求（ documents and authoring tools），一种是实现行为的要求（UA） 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Parallelism&lt;/strong&gt;并行性，指不同的进程可以同时进行，同时为了避免对相同的数据进行不同的操作，这里使用队列(先进先出)来解决。但所举的例子，没怎么懂。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;资源，资源能否被支</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTML standard" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/"/>
    
    <category term="Common infrastructure" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML-standard/Common-infrastructure/"/>
    
    
    <category term="WHATWG" scheme="http://example.com/tags/WHATWG/"/>
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>21-日志记录与使用情况跟踪</title>
    <link href="http://example.com/2021/03/08/note/HTTP/21-%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E8%B7%9F%E8%B8%AA/"/>
    <id>http://example.com/2021/03/08/note/HTTP/21-%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E8%B7%9F%E8%B8%AA/</id>
    <published>2021-03-08T07:17:09.275Z</published>
    <updated>2021-03-08T07:19:40.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="21-1-记录内容"><a href="#21-1-记录内容" class="headerlink" title="21.1 记录内容"></a>21.1 记录内容</h2><p>日志的记录出于两种原因：查找服务器或代理中存在的问题，生成Web站点访问方式的统计信息,统计数据用于市场营销、计费和容量规划等。</p><h2 id="21-2-日志格式"><a href="#21-2-日志格式" class="headerlink" title="21.2 日志格式"></a>21.2 日志格式</h2><h3 id="21-2-1-常见日志格式"><a href="#21-2-1-常见日志格式" class="headerlink" title="21.2.1 常见日志格式"></a>21.2.1 常见日志格式</h3><p>很多服务器在默认情况下都会使用这种日志格式。表21-1按序列出了常用日志格式中的字段。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/xukbWo6RMaAL3fg.png"                      alt="image.png"                ></p><h3 id="21-2-2-组合日志格式"><a href="#21-2-2-组合日志格式" class="headerlink" title="21.2.2 组合日志格式"></a>21.2.2 组合日志格式</h3><p>另一种常用日志格式为组合日志格式（Combined Log Format）。实际上，它就是常用日志格式的基础上添加了两个字段。</p><ol><li><strong>User-Agent字段</strong>，用于说明是哪个HTTP客户端应用程序在发起已被记录的请求。</li><li><strong>Referer字段</strong>，则提供了更多与请求端在何处找到这个URL的有关信息。<h2 id="21-3-命中率测量"><a href="#21-3-命中率测量" class="headerlink" title="21.3 命中率测量"></a>21.3 命中率测量</h2></li></ol><p>由于缓存服务器的存在，在不访问原始服务器的情况下就能满足客户端的请求，服务器中没有客户端访问其内容的记录，导致日志文件中出现遗漏。</p><p>因此，内容提供者会对其最重要的页面进行缓存清除（cache bust），将某些内容设置为无法缓存，这样所有对此内容的请求都会被导向原始服务器。</p><p>由于代理缓存（以及一些客户端）都会保留自己的日志，所以如果服务器能够访问这些日志，就可以避免使用缓存清除。命中率测量协议是对HTTP的一种扩展，命中率测量协议要求缓存周期性地向原始服务器汇报缓存访问的统计数据。</p><h3 id="21-3-2-Meter首部"><a href="#21-3-2-Meter首部" class="headerlink" title="21.3.2 Meter首部"></a>21.3.2 Meter首部</h3><p>命中率测量扩展建议使用新增加的首部Meter，缓存和服务器可以通过它在相互间传输与用法和报告有关的指令，这与用来进行缓存指令交换的Cache-Control首部很类似。</p><p>表21-10列出了定义的各种指令和谁可以在Meter首部传输这些指令。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/aj7EQXtpW3odUwf.png"                      alt="image _1_.png"                ></h2><p>事务的第一部分就是客户端和代理缓存之间一个普通的HTTP事务，但在代理请求中，要注意有插入的Meter首部和来自服务器的响应。这里，代理正在通知服务器它可以进行命中率测量，作为回应，服务器则请求代理报告它的命中次数。</p><p>从客户端的角度看，请求正常结束了，代理开始代表服务器跟踪该请求资源的命中次数。稍后代理尝试与服务器再次验证资源，代理会在发送给服务器的条件请求中嵌入它跟踪记录的计量信息。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/TV3AS9Gt5NdgCkD.png"                      alt="image _2_.png"                ></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;21-1-记录内容&quot;&gt;&lt;a href=&quot;#21-1-记录内容&quot; class=&quot;headerlink&quot; title=&quot;21.1 记录内容&quot;&gt;&lt;/a&gt;21.1 记录内容&lt;/h2&gt;&lt;p&gt;日志的记录出于两种原因：查找服务器或代理中存在的问题，生成Web站点访问方式的统计信</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTTP权威指南" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    
    <category term="21-日志记录与使用情况跟踪" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/21-%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E8%B7%9F%E8%B8%AA/"/>
    
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>W3C阅读初体验</title>
    <link href="http://example.com/2021/03/07/tech/W3C/"/>
    <id>http://example.com/2021/03/07/tech/W3C/</id>
    <published>2021-03-07T08:21:25.649Z</published>
    <updated>2021-03-09T02:39:54.251Z</updated>
    
    <content type="html"><![CDATA[<p>对于technical report，一旦评审表明工作组满足了新标准的要求，进入Candidate Recommendation 阶段。W3C成员可以就规范是否适合作为W3C建议提供反馈，而工作组收集经验，以证明规范在实践中可行。下一阶段是Proposed Recommendation，以最终完成对W3C成员的评审。如果主管确定W3C成员评审支持其成为标准的规范，则将其发布为W3C Recommendation 。</p><p>流程：WD –&gt;CR–&gt;PR–&gt;REC</p><h4 id="成熟度级别："><a href="#成熟度级别：" class="headerlink" title="成熟度级别："></a>成熟度级别：</h4><p><strong>Working Draft (WD)：</strong>工作草案是W3C已发布以供社区（包括W3C成员，公众和其他技术组织）审查的文档。</p><p><strong>Candidate Recommendation (CR)：</strong>是指满足产生该建议书及其依存关系的工作组的技术要求，或对工作组未维护并已得到广泛审核的建议书进行实质性更正的文档。</p><p><strong>Proposed Recommendation（PR）：</strong>是W3C主任已接受的，具有足以成为REC的有质量的文件。</p><p><strong>W3C Recommendation (REC)：</strong>W3C建议书是在广泛建立共识之后得到W3C成员和主任认可的规范或准则或要求集。随着技术发展，REC可能会变成An Edited Recommendation、An Amended Recommendation、A Superseded Recommendation、An Obsolete Recommendation。</p><p><strong>技术报告的一般要求</strong>：</p><p>1、在技​​术报告开发过程中发布的每个文档都必须是公共文档；</p><p>2、每个文档都必须明确指出其成熟度，并且必须包含有关文档状态的信息；</p><p>3、每个技术报告均由小组主席任命的一名或多名编辑人员进行编辑；</p><p>4、不需要发布不符合团队发布规则（例如，命名、状态信息、样式和版权要求）的技术报告；</p><p>5、W3C技术报告的主要语言是英语，W3C鼓励将其技术报告翻译成其他语言。</p><p><strong>对规范更改的类别：</strong>No changes to text content 、Corrections that do not affect conformance 、Corrections that do not add new features  、New features，前两个被认为是 editorial changes, 后面两个是 substantive changes.</p><h4 id="修改W3C-Recommendation"><a href="#修改W3C-Recommendation" class="headerlink" title="修改W3C Recommendation"></a><strong>修改W3C Recommendation</strong></h4><p>Errata Management是很重要的一部分，对于读者和实施者报告的错误，工作组必须保留记录。工作组可以要求对REC进行重新发布，或者如果没有工作组授权维护REC，则W3C 可以重新发布该REC，以进行更正，而不会导致对规范文本的任何更改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于technical report，一旦评审表明工作组满足了新标准的要求，进入Candidate Recommendation 阶段。W3C成员可以就规范是否适合作为W3C建议提供反馈，而工作组收集经验，以证明规范在实践中可行。下一阶段是Proposed Recommen</summary>
      
    
    
    
    <category term="日记随笔" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/"/>
    
    <category term="W3C阅读初体验" scheme="http://example.com/categories/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/W3C%E9%98%85%E8%AF%BB%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="W3C" scheme="http://example.com/tags/W3C/"/>
    
  </entry>
  
  <entry>
    <title>Backgrounds and Borders Level 3</title>
    <link href="http://example.com/2021/03/07/note/W3C%20CSS/Backgrounds%20and%20Borders%20Level%203/"/>
    <id>http://example.com/2021/03/07/note/W3C%20CSS/Backgrounds%20and%20Borders%20Level%203/</id>
    <published>2021-03-07T08:21:21.773Z</published>
    <updated>2021-03-08T08:53:10.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>每一个盒有一个背景层，可以是透明的（默认）也可以以某个颜色或一个以上的图像填满。背景属性可以用来指定背景使用的颜色（background-color）与图像（background-image）及图像如何伸缩、定位、铺设等等。背景属性不继承。</p><h3 id="1-1-多个背景图像的层叠"><a href="#1-1-多个背景图像的层叠" class="headerlink" title="1.1 多个背景图像的层叠"></a>1.1 多个背景图像的层叠</h3><p>盒的背景可以有多个背景图像层，数目由 background-image 属性逗号分隔的取值数目而定。取值 none 也产生一个层。</p><p>每一个图像依照其他背景属性里相应的值伸缩、定位、层迭。各属性的列从第一个取值开始配对 ，不使用结尾多余的取值。若属性用逗号分隔的取值比背景图像层的数目还少，UA 必须以重复列里面的取值直到取值数足够的方式计算使用值。</p><h3 id="1-2-背景颜色-―-background-color-属性"><a href="#1-2-背景颜色-―-background-color-属性" class="headerlink" title="1.2 背景颜色 ― background-color 属性"></a>1.2 背景颜色 ― background-color 属性</h3><p>本属性决定元素的背景色。背景色在任何背景图像之下。初始值为transparent。</p><p>底色层依照最底层的背景图像层对应的 background-clip 值剪裁。</p><p>Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">background-color</span>: <span class="number">#F00</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-图像源-―-background-image-属性"><a href="#1-3-图像源-―-background-image-属性" class="headerlink" title="1.3 图像源 ― background-image 属性"></a>1.3 图像源 ― background-image 属性</h3><p>为一个元素设置一个或者多个背景图像</p><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">body &#123; background-image: url(&quot;marble.svg&quot;) &#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-图像铺成-―-background-repeat-属性"><a href="#1-4-图像铺成-―-background-repeat-属性" class="headerlink" title="1.4 图像铺成 ― background-repeat 属性"></a>1.4 图像铺成 ― background-repeat 属性</h3><p>在双值语法中, 第一个值表示水平重复行为, 第二个值表示垂直重复行为.</p><p>|单值|等价于双值|<br>|:—-:|:—-|:—-:|:—-|<br>|repeat-x（水平方向重复）|repeat no-repeat|<br>|repeat-y（垂直方向重复）|no-repeat repeat|<br>|repeat（图像会按需重复来覆盖整个背景图片所在的区域. 最后一个图像会被裁剪, 如果它的大小不合适的话）|repeat repeat|<br>|space（图像会尽可能得重复, 但是不会裁剪. 第一个和最后一个图像会被固定在元素(element)的相应的边上, 同时空白会均匀地分布在图像之间）|space space|<br>|round（随着允许的空间在尺寸上的增长, 被重复的图像将会伸展(没有空隙), 直到有足够的空间来添加一个图像.）|round round|<br>|no-repeat（图像不会被重复）|no-repeat no-repeat|</p><h3 id="1-5-图像固定-―-background-attachment-属性"><a href="#1-5-图像固定-―-background-attachment-属性" class="headerlink" title="1.5 图像固定 ― background-attachment 属性"></a>1.5 图像固定 ― background-attachment 属性</h3><p>决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。</p><table><thead><tr><th align="left">fixed</th><th align="left">背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动</th></tr></thead><tbody><tr><td align="left">local</td><td align="left">背景相对于元素的内容固定。如果一个元素拥有滚动机制，背景会随着元素的内容滚动， 并且背景的绘制区域和定位区域是相对于可滚动的区域而不是包含他们的边框。</td></tr><tr><td align="left">scroll</td><td align="left">表示背景相对于元素本身固定， 而不是随着它的内容滚动（对元素边框是有效的）</td></tr></tbody></table><h3 id="1-6-图像定位-―-background-position-属性"><a href="#1-6-图像定位-―-background-position-属性" class="headerlink" title="1.6 图像定位 ― background-position 属性"></a>1.6 图像定位 ― background-position 属性</h3><p>若指定了背景图像，本属性可以用来指定图像（伸缩之后）在对应的背景定位区域的初始位置。</p><p>|center|居中背景图片|<br>|:—-:|:—-|:—-:|:—-|<br>|top, left, bottom, right|如果是单个值，图片在指定边缘的中间位置，|<br>|百分比|(容器宽 - 图片宽) * (position x%) = x方向偏移值<br>(容器高 - 图片高) * (position y%) = y方向偏移值|<br>|长度值|长度值是元素向指定边缘偏移|</p><p>Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">top</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">left</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: 25% 75%;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">bottom</span> 50<span class="selector-tag">px</span> <span class="selector-tag">right</span> 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background-position</span>: <span class="selector-tag">right</span> 35% <span class="selector-tag">bottom</span> 45%;</span><br></pre></td></tr></table></figure><h3 id="1-7-描绘区域-―-background-clip-属性"><a href="#1-7-描绘区域-―-background-clip-属性" class="headerlink" title="1.7 描绘区域 ― background-clip 属性"></a>1.7 描绘区域 ― background-clip 属性</h3><p>元素的背景（背景图片或颜色）是否延伸到边框、内边距盒子、内容盒子下面。</p><p>|border-box<br>|背景延伸至边框外沿（但是在边框下层）|<br>|:—-:|:—-|:—-:|:—-|<br>|padding-box|背景延伸至内边距（padding）外沿。不会绘制到边框处|<br>|content-box|背景被裁剪至内容区（content box）外沿|</p><h3 id="1-8-定位区域-―-background-origin-属性"><a href="#1-8-定位区域-―-background-origin-属性" class="headerlink" title="1.8 定位区域 ― background-origin 属性"></a>1.8 定位区域 ― background-origin 属性</h3><p>指定背景图片background-image 属性的原点位置的背景相对区域。</p><p>|border-box|背景图片的摆放以border区域为参考|<br>|:—-:|:—-|:—-:|:—-|<br>|padding-box（默认值）|背景图片的摆放以padding区域为参考|<br>|content-box|背景图片的摆放以content区域为参考|</p><h3 id="1-9-图像伸缩-―-background-sizing-属性"><a href="#1-9-图像伸缩-―-background-sizing-属性" class="headerlink" title="1.9 图像伸缩 ― background-sizing 属性"></a>1.9 图像伸缩 ― background-sizing 属性</h3><p>设置背景图片大小。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。</p><p>|length|设置背景图像的高度和宽度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。|<br>|:—-:|:—-|:—-:|:—-|<br>|百分比|以父元素的百分比来设置背景图像的宽度和高度。第一个值设置宽度，第二个值设置高度。如果只设置一个值，则第二个值会被设置为 “auto”。|<br>|cover|把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。|<br>|contain|把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。|</p><h3 id="1-10-背景缩写-―-background-属性"><a href="#1-10-背景缩写-―-background-属性" class="headerlink" title="1.10 背景缩写 ― background 属性"></a>1.10 背景缩写 ― background 属性</h3><p>一次性集中定义各种背景属性，包括 color, image, origin 与 size, repeat 方式等等。对于所有简写属性，任何没有被指定的值都会被设定为它们的 初始值。</p><p>background-color 只能在background的最后一个属性上定义。background-size 必须紧跟在 background-position后面，并用“/”分隔。</p><h3 id="1-11-特殊元素的背景"><a href="#1-11-特殊元素的背景" class="headerlink" title="1.11 特殊元素的背景"></a>1.11 特殊元素的背景</h3><p>当html标签没有设置背景色时，我们看见的是作用在浏览器画布上的背景色，不是body上的；</p><p>当html标签被设置了背景色时，我们看见的是真正作用在body上的背景色。</p><p>CSS根据根元素（html/body）给文档画布渲染背景颜色，同时背景色的定位区域就是根元素的区域；</p><p>根元素不再绘制该背景色，即根元素背景的使用值是透明的</p><h2 id="2-边框"><a href="#2-边框" class="headerlink" title="2 边框"></a>2 边框</h2><h3 id="2-1-边框颜色-―-border-color-属性"><a href="#2-1-边框颜色-―-border-color-属性" class="headerlink" title="2.1 边框颜色 ― border-color 属性"></a>2.1 边框颜色 ― border-color 属性</h3><p>border-color 是一个用于设置元素四个边框颜色的快捷属性： border-top-color, border-right-color, border-bottom-color, border-left-color</p><h3 id="2-2-边框样式-―-border-style-属性"><a href="#2-2-边框样式-―-border-style-属性" class="headerlink" title="2.2 边框样式 ―  border-style 属性"></a>2.2 边框样式 ―  border-style 属性</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/q9he18OyK3IpLMf.png"                      alt="ChxDSvz4EdQEY2sF__thumbnail.png"                ></p><h3 id="2-3-边框宽度-―-border-width-属性"><a href="#2-3-边框宽度-―-border-width-属性" class="headerlink" title="2.3 边框宽度 ― border-width 属性"></a>2.3 边框宽度 ― border-width 属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当给定一个宽度时，该宽度作用于选定元素的所有边框 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line"><span class="comment">/* 当给定两个宽度时，该宽度分别依次作用于选定元素的横边与纵边 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 2<span class="selector-tag">px</span> 1.5<span class="selector-tag">em</span>;</span><br><span class="line"><span class="comment">/* 当给定三个宽度时，该宽度分别依次作用于选定元素的上横边、纵边、下横边 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 1<span class="selector-tag">px</span> 2<span class="selector-tag">em</span> 1.5<span class="selector-tag">cm</span>;</span><br><span class="line"><span class="comment">/* 当给定四个宽度时，该宽度分别依次作用于选定元素的上横边、右纵边、下横边、左纵边 （即按顺时针依次作用） */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: 1<span class="selector-tag">px</span> 2<span class="selector-tag">em</span> 0 4<span class="selector-tag">rem</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可以使用的全局关键字有：inherit(继承),initial（初始值）,unset（不设置） */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="comment">/* 使用作用于 border-width 的关键字 */</span></span><br><span class="line"><span class="selector-tag">border-width</span>: <span class="selector-tag">thin</span>;</span><br><span class="line"><span class="selector-tag">border-width</span>: <span class="selector-tag">medium</span>;</span><br><span class="line"><span class="selector-tag">border-width</span>: <span class="selector-tag">thick</span>;</span><br></pre></td></tr></table></figure><h3 id="2-4-边框缩写属性"><a href="#2-4-边框缩写属性" class="headerlink" title="2.4 边框缩写属性"></a>2.4 边框缩写属性</h3><p>用于设置各种单独的边界属性的简写属性。border可以用于设置一个或多个以下属性的值： border-width, border-style, border-color ,无顺序，只接受三个参数，分别是宽度、风格和颜色，所以这样会使得四条边的边框相同。</p><h2 id="3-圆角"><a href="#3-圆角" class="headerlink" title="3 圆角"></a>3 圆角</h2><h3 id="3-1-曲线半径-―-border-radius-属性"><a href="#3-1-曲线半径-―-border-radius-属性" class="headerlink" title="3.1 曲线半径 ― border-radius 属性"></a>3.1 曲线半径 ― border-radius 属性</h3><p>border-*-radius 属性的两个长度或百分比值决定了作为边框外边形状的四分之一椭圆的半径。第一个取值是水平半径，第二个是垂直半径。若没有第二个取值，和第一个值相同。若其中一个长度为零，则角落垂直，不是圆角。</p><p>作为水平半径的百分比值，取值相对于边框盒的宽度，作为垂直半径的百分比值，取值相对于边框盒的高度。</p><p>border-radius’缩写可以用来设定四个 ‘border-*-radius’。若指定的值包含斜线，则斜线前面的取值会设定水平半径，斜线后面的取值会设定垂直半径，若没有斜线，则取值同时用来设定两个半径。</p><p>每个半径的四个值按照左上、右上、右下、左下的顺序，若没有左下取值则使用右上取值，若没有右下取值则使用左上取值，若没有右上取值则使用左上取值。<img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/rMPEAo5hlJaORH3.png"                      alt="frIxaJtah6iUhkL6__thumbnail.png"                ></p><h3 id="3-2-Corner-Shaping"><a href="#3-2-Corner-Shaping" class="headerlink" title="3.2 Corner Shaping"></a>3.2 Corner Shaping</h3><p>边距边（内边框）的半径是外边框半径减掉对应的边框粗细的结果。若这个结果是负值，内半径为零。（在这种情况下边距边的圆心可能不与外边框曲线的圆心重叠。）同样地，内容边半径是边距边半径减掉对应边距，或是零（前面结果为负值的情形）。使用者代理透过插值计算在曲线区域中边框与边距的粗细，也因此当相邻边框的粗细不同的时候，角落会是粗细边框之间的平滑转场。</p><p>如果外曲线超过了相邻角落的边距边，内曲线可能不是完整的四分之一椭圆。</p><p>所有边框样式（‘solid’ 、‘dotted’ 、‘inset’ 等等）跟者边框的曲线走。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/YF2eBGnv1amVl9A.png"                      alt="wne9FIO17lzvrUbe__thumbnail.png"                ></p><p>当圆角连接的两个边框的粗细不同时圆角的效果（左）与边框宽度比角落半径还粗的时候的圆角效果（右）</p><h3 id="3-3-Corner-Clipping"><a href="#3-3-Corner-Clipping" class="headerlink" title="3.3 Corner Clipping"></a>3.3 Corner Clipping</h3><p>使用者代理使用适当的曲线（以 ‘background-clip’ 决定）剪裁一个盒的背景（但不剪裁边框图像）。其他使用边框边或边距边（像是 ‘overflow’ 属性 ‘visible’ 以外的值）剪裁达到的效果也必须改用曲线剪裁。使用者代理总是用内容边曲线修剪置换元素。</p><p>边框边的曲线外的区域不接受以该元素为目标的pointer事件。</p><h3 id="3-4-Color-and-Style-Transitions"><a href="#3-4-Color-and-Style-Transitions" class="headerlink" title="3.4 Color and Style Transitions"></a>3.4 Color and Style Transitions</h3><p>颜色与样式变化必须发生在同时包含边框半径与内曲线中心（如果边框半径小于边框宽度，这是指边距边角落的点）的最小长方形与边框相交的片段。</p><p>若其中一个边框的宽度为零，则另一个边框的颜色与样式会佔满整个变化区域。不然，相邻边框间的颜色与样式转场的中心点必须正比于边框宽度的比例，使得中心点的位置函数是这个比例的连续函数。然而，本规范没有定义转场的长相或是「正比」如何对应到曲线上的点。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/fwurvComZgIl5jL.png"                      alt="mVbdbNd2w1ZiqJNy__thumbnail.png"                ></p><p>在这些角落的图形中，颜色与样式转场必须发生在绿色的区域。D 例中边框半径决定的长方形不包括内曲线（是个直角）的中心，因此转场范围扩张到角落之处。转场可发生在整个转场区域之中，但是本规范没有这样的要求：举例来说，两个实心边框之间的渐层颜色转场可能只发生在由外半径的尖端内半径的尖端包源的区域（在 D 例中以深绿色表示）。</p><h3 id="3-5-Overlapping-Curves"><a href="#3-5-Overlapping-Curves" class="headerlink" title="3.5 Overlapping Curves"></a>3.5 Overlapping Curves</h3><p>圆角曲线不能重叠：当任两个相邻边的半径和超过边框合的大小时，UA 必须以同样比例收缩所有边框半径直到曲线彼此不重叠。半径的收缩演算法如下：</p><p>设 f = min(Li/Si)，其中 i ∈ {顶, 右, 底, 左}，Si 是在 i 边的两个角的对应的两个半径的和，L顶 = L底 = 盒的宽度，L左 = L右 = 盒的高度。若 f &lt; 1，则所有角落半径同乘 f。</p><p>这个公式确保在收缩之后，四分之一圆形还是四分之一圆形、大的半径还是比小的大。但是这个作法可能收缩本来就很小的角落，让附近应该看起来一样的元素看起来不一样。</p><p>若曲线干扰到捲轴等等的 UI 元素，UA 在有必要的限度内（不得超过）可再缩小受影响的边框半径（只限受影响的边框半径）。</p><p>盒的渲染结果必须和以缩小的圆角值当作指定值一样。</p><h3 id="3-6-表格上的效果"><a href="#3-6-表格上的效果" class="headerlink" title="3.6 表格上的效果"></a>3.6 表格上的效果</h3><p>‘border-radius’ 属性适用于 ‘table’ 与 ‘inline-table’ 元素。当 ‘border-collapse’ 为 ‘collapse’，border-radius 属性不会被应用到表格。</p><h2 id="4-图像边框"><a href="#4-图像边框" class="headerlink" title="4 图像边框"></a>4 图像边框</h2><h3 id="4-1-图像源-―-border-image-source-属性"><a href="#4-1-图像源-―-border-image-source-属性" class="headerlink" title="4.1 图像源 ― border-image-source 属性"></a>4.1 图像源 ― border-image-source 属性</h3><p>元素的边框图片（border-image）的资源</p><p>Example:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-image-source: url(&#x27;/media/examples/border-diamonds.png&#x27;);</span><br></pre></td></tr></table></figure><h3 id="4-2-图像分割-―-border-image-slice-属性"><a href="#4-2-图像分割-―-border-image-slice-属性" class="headerlink" title="4.2 图像分割 ― border-image-slice 属性"></a>4.2 图像分割 ― border-image-slice 属性</h3><p>border-image-slice属性会将图片分割为9个区域：图像被分割为九个区域：四个角、四条边以及一个中间区域。除非使用了关键词 fill，否则中间的图像部分会被丢弃。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/T9UILsbuPq276f5.png"                      alt="XV72AIIGYEUs0q2Y__thumbnail.png"                ></p><p>|number|数字值，代表图像中像素）或矢量坐标|<br>|:—-:|:—-|:—-:|:—-|<br>|%|相对于图像尺寸的百分比值：图像的宽度影响水平偏移，高度影响垂直偏移|<br>|fill|保留边框图像的中间部分|</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 所有的边 */</span></span><br><span class="line"><span class="selector-tag">border-image-slice</span>: 30%; </span><br><span class="line"><span class="comment">/* 垂直方向 | 水平方向 */</span></span><br><span class="line"><span class="selector-tag">border-image-slice</span>: 10% 30%;</span><br><span class="line"><span class="comment">/* 顶部 | 水平方向 | 底部 */</span></span><br><span class="line"><span class="selector-tag">border-image-slice</span>: 30 30% 45;</span><br><span class="line"><span class="comment">/* 上 右 下 左 */</span></span><br><span class="line"><span class="selector-tag">border-image-slice</span>: 7 12 14 5; </span><br><span class="line"><span class="comment">/* 使用fill（fill可以放在任意位置） */</span></span><br><span class="line"><span class="selector-tag">border-image-slice</span>: 10% <span class="selector-tag">fill</span> 7 12;</span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">border-image-slice</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">border-image-slice</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">border-image-slice</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure><h3 id="4-3-绘制区域-―-border-image-width-属性"><a href="#4-3-绘制区域-―-border-image-width-属性" class="headerlink" title="4.3 绘制区域 ― border-image-width 属性"></a>4.3 绘制区域 ― border-image-width 属性</h3><p>规定图像边框的宽度</p><p>|<em>length</em>|    |<br>|:—-:|:—-|:—-:|:—-|<br>|number|代表对应的 border-width 倍数|<br>|%|区域的高度影响水平偏移，宽度影响垂直偏移|<br>|auto|如果规定该属性，则宽度为对应的图像切片的固有宽度|</p><h3 id="4-4-边扩展-―-border-image-outset-属性"><a href="#4-4-边扩展-―-border-image-outset-属性" class="headerlink" title="4.4 边扩展 ― border-image-outset 属性"></a>4.4 边扩展 ― border-image-outset 属性</h3><p>规定边框图像超出边框盒的量。在上、右、下、左侧。如果忽略第四个值，则与第二个值相同。如果省略第三个值，则与第一个值相同。如果省略第二个值，则与第一个值相同。不允许任何负值作为 border-image-outset 值。</p><p>|length|    |<br>|:—-:|:—-|:—-:|:—-|<br>|number|代表对应的 border-width 的倍数|</p><h3 id="4-5-图像铺成-―-background-image-repeat-属性"><a href="#4-5-图像铺成-―-background-image-repeat-属性" class="headerlink" title="4.5 图像铺成 ― background-image-repeat 属性"></a>4.5 图像铺成 ― background-image-repeat 属性</h3><p>定图像边框是否应该被重复（repeated）、拉伸（stretched）或铺满（rounded）。</p><p>|stretch|拉伸图像来填充区域|<br>|:—-:|:—-|:—-:|:—-|<br>|repeat|平铺（重复）图像来填充区域|<br>|round|类似 repeat 值。如果无法完整平铺所有图像，则对图像进行缩放以适应区域|</p><h3 id="4-6-图像边框缩写-―-border-image-属性"><a href="#4-6-图像边框缩写-―-border-image-属性" class="headerlink" title="4.6 图像边框缩写 ― border-image 属性"></a>4.6 图像边框缩写 ― border-image 属性</h3><p>border-image 属性是一个简写属性，用于设置以下属性：</p><p>|border-image-source|用在边框的图片的路径。|<br>|:—-:|:—-|:—-:|:—-|<br>|border-image-slice|图片边框向内偏移。|<br>|border-image-width|图片边框的宽度。|<br>|border-image-outset|边框图像区域超出边框的量。|<br>|border-image-repeat|图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。|</p><h2 id="5-Drop-Shadows-the-box-shadow-property"><a href="#5-Drop-Shadows-the-box-shadow-property" class="headerlink" title="5 Drop Shadows: the box-shadow property"></a>5 Drop Shadows: the box-shadow property</h2><p>在元素的框架上添加阴影效果，可以在同一个元素上设置多个阴影效果，并用逗号将他们分隔开。该属性可设置的值包括阴影的X轴偏移量、Y轴偏移量、模糊半径、扩散半径和颜色。</p><p>如果只给出两个值, 那么这两个值将会被当作 <offset-x><offset-y> 来解释。</p><p>如果给出了第三个值, 那么第三个值将会被当作<blur-radius>解释。</p><p>如果给出了第四个值, 那么第四个值将会被当作<spread-radius>来解释。</p><p>|<em>h-shadow</em>|必需。水平阴影的位置。允许负值。|<br>|:—-:|:—-|:—-:|:—-|<br>|<em>v-shadow</em>|必需。垂直阴影的位置。允许负值。|<br>|<em>blur</em>|可选。模糊距离。|<br>|<em>spread</em>|可选。阴影的尺寸。|<br>|<em>color</em>|可选。阴影的颜色。|<br>|inset|可选。将外部阴影 (outset) 改为内部阴影。|</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/vWIH2DkhayP94Lq.png"                      alt="iGP0Sj73DZ5MyOkG__thumbnail.png"                ></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* x偏移量 | y偏移量 | 阴影颜色 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 60<span class="selector-tag">px</span> <span class="selector-tag">-16px</span> <span class="selector-tag">teal</span>;</span><br><span class="line"><span class="comment">/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影颜色 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 10<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">black</span>;</span><br><span class="line"><span class="comment">/* x偏移量 | y偏移量 | 阴影模糊半径 | 阴影扩散半径 | 阴影颜色 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0.2);</span><br><span class="line"><span class="comment">/* 插页(阴影向内) | x偏移量 | y偏移量 | 阴影颜色 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 5<span class="selector-tag">em</span> 1<span class="selector-tag">em</span> <span class="selector-tag">gold</span>;</span><br><span class="line"><span class="comment">/* 任意数量的阴影，以逗号分隔 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">red</span>, <span class="selector-tag">-1em</span> 0 0.4<span class="selector-tag">em</span> <span class="selector-tag">olive</span>;</span><br><span class="line"><span class="comment">/* 全局关键字 */</span></span><br><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1 背景&quot;&gt;&lt;/a&gt;1 背景&lt;/h2&gt;&lt;p&gt;每一个盒有一个背景层，可以是透明的（默认）也可以以某个颜色或一个以上的图像填满。背景属性可以用来指定背景使用的颜色（back</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="W3C CSS" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/"/>
    
    <category term="Backgrounds and Borders Level 3" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/Backgrounds-and-Borders-Level-3/"/>
    
    
    <category term="W3C" scheme="http://example.com/tags/W3C/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Flexible Box Layout Module Level 1</title>
    <link href="http://example.com/2021/03/07/note/W3C%20CSS/Flexible%20Box%20Layout%20Module%20Level%201/"/>
    <id>http://example.com/2021/03/07/note/W3C%20CSS/Flexible%20Box%20Layout%20Module%20Level%201/</id>
    <published>2021-03-07T08:21:17.277Z</published>
    <updated>2021-03-08T08:56:06.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-伸缩布局盒模型和术语"><a href="#1-伸缩布局盒模型和术语" class="headerlink" title="1 伸缩布局盒模型和术语"></a>1 伸缩布局盒模型和术语</h2><p>一个设有display:flex或display:inline-flex的元素是叫做flex容器 ，flex容器的子元素被称为 flex items，这些子元素使用伸缩布局模型来排版。</p><p>块布局与行内布局的布局计算偏向使用书写模式方向，伸缩布局偏向使用flex directions。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/KfP81wsm5OzxFrL.png"                      alt="4uiZCCmxjzPvhtDD__thumbnail.png"                ></p><p><strong>main axis（主轴）main dimension（主轴方向）</strong></p><p><strong>main-start（主轴起点）main-end（主轴终点）</strong></p><p><strong>main size（主轴长度）main size property（主轴长度属性）</strong></p><p><strong>cross axis（侧轴）cross dimension（侧轴方向）</strong></p><p><strong>cross-start（侧轴起点）cross-end（侧轴长度）</strong></p><p><strong>cross size（侧轴长度）cross size property（侧轴长度属性）</strong></p><h2 id="2-flex容器-―display的flex、inline-flex值"><a href="#2-flex容器-―display的flex、inline-flex值" class="headerlink" title="2 flex容器 ―display的flex、inline-flex值"></a>2 flex容器 ―display的flex、inline-flex值</h2><p>flex   元素产生块级flex容器盒。inline-flex  元素产生行内级flex容器盒。</p><p>flex容器会为其内容建立新的<strong>伸缩格式化上下文</strong>(flex formatting context)。 浮动不会闯入flex容器，且flex容器的边界不与其内容的边界叠加。flex容器不是block容器，因此有些用来控制block布局的属性，在伸缩布局中不适用。如：</p><ol><li>多栏(column)的所有column-*属性；</li><li>float与clear；（“float”属性仍然会影响flex容器子容器上的“display”的计算值)</li><li>vertical-align。</li><li>::first-line 和::first-letter，且flex container元素也不会成为它祖先的::first-line和::first-letter。</li></ol><p>若元素display的值是inline-flex且元素是一个浮动或绝对定位元素，则display的计算值是flex。</p><h2 id="3-flex-item"><a href="#3-flex-item" class="headerlink" title="3 flex item"></a>3 flex item</h2><p>一个flex容器的内容具有零个以上的flex item ，flex容器的每一个子元素都会成为一个flex item，且在flex容器里的连续文字块会被包起来成为匿名的block container flex item，若匿名flex item仅包含空白，则该flex item不会渲染，如同视为display: none。</p><p>匿名的item box是不能设置style的，因为没有元素去设置，它只能从flex container继承styles。</p><p>一个flex item为它的内容建立了一个独立的格式化上下文。然而flex items它本身是一个flex-level盒子，而不是block-level盒子：它们参与的是flex格式化上下文，而不是块级格式化上下文。</p><p>一些display值通常会在原始盒子周围创建匿名的盒子，但对于flex item来说，它首先被块级化，所以不会创建匿名盒子，例如两个连续的flex items的display值被设置为table-cell将会创建两个分开的块级flex items,而不是被包装为一个单独的匿名table。</p><p>对于display值被指定为table的flex item，表格包装盒子成为一个flex item，order和align-self适用于它，任何标题框的内容都有助于计算表格盒子的最小和最大宽度。</p><p>对于width和height采用以下规则计算：flex items的最终尺寸是在执行布局的时候计算的，就好像表格盒子和表格内容的间隔是表格盒子的border+padding区域一样。</p><h3 id="3-1-绝对定位的伸缩子元素"><a href="#3-1-绝对定位的伸缩子元素" class="headerlink" title="3.1 绝对定位的伸缩子元素"></a>3.1 绝对定位的伸缩子元素</h3><p>因为它脱离了文档流，所以绝对定位的child不参与flex布局。</p><p>flex container中的绝对定位元素的位置被计算就好像它是flex container中仅有的唯一元素一样，并且假设flexcontainer和flex item都是固定大小的尺寸。所以为了此目的，automargin被视为0。换句话说，flex容器中的定位元素是相对于flex容器的contentbox定位的。</p><p>如果对flex container中的绝对定位的元素设置align-self: center;,自动offset将会让它在flex容器的cross axis居中。然而因为一个绝对定位的flex item是固定尺寸的，stretch属性被视为和flex start相同。</p><h3 id="3-2-Flex-itemMargins-and-Paddings"><a href="#3-2-Flex-itemMargins-and-Paddings" class="headerlink" title="3.2 Flex itemMargins and Paddings"></a>3.2 Flex itemMargins and Paddings</h3><p>相邻flex items的margins不会合并。</p><p>百分比的margins和paddings和block boxes一样，相对于它们的containing block计算。</p><p>auto margins会扩展去吸收相应区域额外的空间，它们被用于对齐或者使相邻的flex items分离。</p><h3 id="3-3-Flex-Item-Z-Ordering"><a href="#3-3-Flex-Item-Z-Ordering" class="headerlink" title="3.3 Flex Item Z-Ordering"></a>3.3 Flex Item Z-Ordering</h3><p>flex items的渲染和inline block类似，除了order属性会改变源文档的顺序，不是auto值的z-index会创建一个堆叠上下文，甚至是position被设置static的时候也一样（表现的好像是position是relative一样）。</p><p>位于flex item外部的后代仍然参与flex item建立的的任何堆叠上下文。</p><h3 id="3-4-Collapsed-Items"><a href="#3-4-Collapsed-Items" class="headerlink" title="3.4 Collapsed Items"></a>3.4 Collapsed Items</h3><p>在flex item上指定visibility:collapse会引发它成为一个折叠flex item，产生一种类似在table-row或table-column上设置visibility:collapse的效果：折叠的flex item完全从渲染中移除，但是留下一个桩来保持flex line的cross size的稳定。因此，如果一个flex容器只有一个flex line，动态折叠或者不折叠items可能会改变flex容器的main size，但是不会对它的cross size产生影响，也不会导致页面其余部分“摇晃”，然而flex line的换行是折叠之后重做的，所以具有多line的flex容器的cross size可能会也可能不会改变。</p><p>尽管折叠flex item没有被渲染，但它确实出现在formatting structure，因此不像设置了display: none的items。依赖于formatting structure的盒子的效果（例如递增计数器，运行动画或者过渡）仍然对折叠items产生作用。</p><h3 id="3-5-flex-item的自动最小尺寸"><a href="#3-5-flex-item的自动最小尺寸" class="headerlink" title="3.5 flex item的自动最小尺寸"></a>3.5 flex item的自动最小尺寸</h3><p>为了为flex items提供一个更加合理的默认最小尺寸，对于一个不是滚动容器的主轴中的flex items的最小尺寸的值就是它的基于内容的最小尺寸，对于滚动容器，自动最小尺寸通常是0。</p><p>通常来说，flex items的基于内容的最小尺寸是content size suggestion和specified size suggestion中的较小值。然而，如果一个盒子具有宽高比但是没有specified size，它的基于内容的最小尺寸就是content size suggestion和transferred size suggestion中的较小值。如果盒子既没有specified size suggestion也没有宽高比，它的基于内容的最小尺寸就是content size suggestion。</p><p><strong>specified size suggestion</strong></p><p>如果item的计算main size property是有定义的，specified size suggestion就是该大小（如果它是被定义的，则由其最大main size property限制），否则是undefined。</p><p><strong>transferred size suggestion</strong></p><p>如果item具有固有的宽高比并且它的计算的cross size property是有定义的，transferred size suggestion就是那个大小（如果它们是有定义的，则由其最小和最大cross size properties限制），通过宽高比转化，否则是undefined。</p><p><strong>content size suggestion</strong></p><p>content size suggestion就是主轴上的最小内容大小，如果它具有宽高比，通过任何定义的min and max cross peoperties转化宽高比，那么它是受限制的，然后进一步受限制如果它定义了max main size property.</p><p>为了计算盒子的固有大小（例如盒子的最小内容大小），基于内容的最小大小使得该轴中盒子的大小变得不确定（即使例如其宽度属性指定了确定的大小），这意味着根据此大小计算的百分比将表现为auto。</p><h2 id="4-顺序与方向"><a href="#4-顺序与方向" class="headerlink" title="4 顺序与方向"></a>4 顺序与方向</h2><p>flex container的内容可以沿着任意方向和任意顺序布局，这个功能通过使用flex-direction,flex-wrap和order属性实现。</p><h3 id="4-1-flex流的方向：flex-direction属性"><a href="#4-1-flex流的方向：flex-direction属性" class="headerlink" title="4.1 flex流的方向：flex-direction属性"></a>4.1 flex流的方向：flex-direction属性</h3><p>|flex-direction属性值|flex-direction决定了flex items在主轴上沿着什么方向布局|<br>|:—-:|:—-|:—-:|:—-|<br>|row（默认）|主轴的方向和inline axis相同，main-start和main-end分别和inline-start和inline-end方向相同|<br>|row-reverse|和row相似，但main-start和main-end调转过来|<br>|column|主轴的方向和block axis一致，main-start和main-end分别和block-start和block-end方向相同|<br>|column-reverse|和column相似，但main-start和main-end调转过来|</p><h3 id="4-2-flex行换行-：flex-wrap属性"><a href="#4-2-flex行换行-：flex-wrap属性" class="headerlink" title="4.2 flex行换行 ：flex-wrap属性"></a>4.2 flex行换行 ：flex-wrap属性</h3><p>|flex-wrap属性值|flex wrap属性控制flex containers是单行的还是多行的，以及侧轴的方向。侧轴的方向决定了新行被叠加的方向。|<br>|:—-:|:—-|:—-:|:—-|<br>|nowrap（默认）|flex containers是单行的|<br>|wrap|flex containers是多行的。|<br>|wrap-reverse|和wrap一样，不过方向相反。|</p><h3 id="4-3-flex方向与换行-：flex-flow缩写"><a href="#4-3-flex方向与换行-：flex-flow缩写" class="headerlink" title="4.3 flex方向与换行 ：flex-flow缩写"></a>4.3 flex方向与换行 ：flex-flow缩写</h3><p>flex-flow是flex-directive和flex-wrap的简写形式，定义了flex container的主轴和侧轴。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/G87MglOH1UqaeSr.png"                      alt="7w6xAn53Yd7j7pwQ__thumbnail.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/IY4lrixyNtMsP89.png"                      alt="HdIWBm2MS37XVzeN__thumbnail.png"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/JPRzlABt3qQxY8g.png"                      alt="oOMZpxlmZTIx2Vn3__thumbnail.png"                ></p><p>flex-flow是和writing mode相关的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/7zfqoyTVSUYLA9R.png"                      alt="d7uQWKnXZubXdt5O__thumbnail.png"                ></p><h3 id="4-4-display顺序-order属性"><a href="#4-4-display顺序-order属性" class="headerlink" title="4.4 display顺序 :order属性"></a>4.4 display顺序 :order属性</h3><p>flex item默认的展示顺序和源文档一样，order属性可以改变这种顺序。</p><p>order接受一个整数值，从最低的值开始排列，值相同的按源文档的顺序排序，绝对布局的flex items被视为order: 0。</p><p>order仅仅影响视觉上的顺序，而不会影响逻辑源代码的顺序和非视觉媒体或者不支持css的设备的顺序。</p><h2 id="5-FlexLines"><a href="#5-FlexLines" class="headerlink" title="5 FlexLines"></a>5 FlexLines</h2><p>flex items在flex容器中排列在flex lines中。一个flex container可以是单行的或者多行的，这取决于flex-wrap属性。</p><p>single-line flex容器：（设置了flex-wrap: nowrap），所有的item布局在一个单行，即使会引起内容溢出。</p><p>multi-line flex容器：（设置了flex-wrap: wrap或者flex-wrap: wrap-reverse），分割它的flex items成为多line。当额外的line被创建，它们在容器的侧轴上按照flex-wrap属性的值堆叠，每一个line至少包含一个item，除非容器是空的。</p><p>一旦内容被分割为多行，每一行就是独立布局的，弹性长度和justify-content,align-self属性一次只考虑在一行中的items。</p><p>在一个多行的flex container中（甚至只有一行），每行的侧轴尺寸就是能够包含下该行的items的最小尺寸（通过align-self属性排列后），行在flex container中的排列使用align-content属性设置。在单行的flex container中，行的侧轴尺寸就是flex container的侧轴尺寸，align-content没有效果。每一行的主轴的尺寸总是和flex container内容盒子的主轴尺寸相同的。</p><h2 id="6-伸缩性"><a href="#6-伸缩性" class="headerlink" title="6 伸缩性"></a>6 伸缩性</h2><p>flex布局的定义方面是能够使flex items弹性，改变它们的宽度/高度去填充main dimension剩余的空间，这可以通过flex属性实现。flex container分配剩余空间给它的items（通过设置flex-grow ）来填充填充容器，或者收缩它们（通过设置flex-shrink）来阻止溢出。</p><p>如果flex item的flex-grow和flex-shrink都是0，是完全没有弹性的，否则是伸缩的。</p><h3 id="6-1-flex缩写"><a href="#6-1-flex缩写" class="headerlink" title="6.1 flex缩写"></a>6.1 flex缩写</h3><p>flex属性规定了flex元素如何伸长或缩短以适应flex容器中的可用空间。这是一个简写属性，用来设置 flex-grow, flex-shrink 与 flex-basis。</p><ol><li><strong>flex-grow</strong></li></ol><p>指定了flex的增长因子，当有正的剩余空间的时候，增长因子决定了flex item相对于容器中其他的flex items的增长程度，默认值为1。当line上的flex值之和小于1时，它们将占用小于100％的可用空间。</p><ol start="2"><li><strong>flex-shrink</strong></li></ol><p>决定了flex item相对于容器中其他的flex items的收缩程度，默认值为1，不能为负数。仅在默认宽度之和大于容器的时候才会发生收缩。</p><ol start="3"><li><strong>flex-basis</strong></li></ol><p>指定了 flex 元素在主轴方向上的初始大小。flex-basis接受和width,height一样的值（除了auto被视为不同的），以及content关键字。</p><pre><code>1. auto</code></pre><p>当在flex item使用该值时，auto关键字将item的main size property设为它的flex-basis。若那个值是也是auto，就使用值就是content。<br>    2. content<br>表示基于flex item内容的自动尺寸</p><h3 id="6-2-flex的常见值"><a href="#6-2-flex的常见值" class="headerlink" title="6.2 flex的常见值"></a>6.2 flex的常见值</h3><ol><li><strong>flex: initial</strong></li></ol><p>等效于flex: 0 1 auto，基于它的width/height来设置它的尺寸（若item的main size property被设置为auto,它的尺寸将会基于它的内容），在正的剩余空间的时候flex item没有弹性，但是没有充足空间的时候会收缩到它的最小尺寸，alignment abilities或者auto margin在主轴上排列flex items。</p><ol start="2"><li><strong>flex: auto</strong></li></ol><p>等效于flex: 1 1 auto,基于它的width/height来设置它的尺寸，并且使它完全弹性的，它会吸收任何多余的空间。</p><ol start="3"><li><strong>flex: none</strong></li></ol><p>等效于flex: 0 0 auto, 基于它的width/height来设置它的尺寸，并且使它完全不可弹性的。甚至在溢出的情况也不会收缩。</p><ol start="4"><li><strong>flex: positive-number</strong></li></ol><p>等效于flex: <positive-number> 1 0，使flex item弹性的，并且设置flex basis为0。</p><p>默认情况下flex items并不会缩减到它的最小尺寸以下（最大的text长度或者固定尺寸的元素），改变这个可以通过设置min-width或者min-height属性</p><h2 id="7-对齐"><a href="#7-对齐" class="headerlink" title="7 对齐"></a>7 对齐</h2><h3 id="7-1-auto-margin对齐"><a href="#7-1-auto-margin对齐" class="headerlink" title="7.1 auto margin对齐"></a>7.1 auto margin对齐</h3><p>flex item 和 block流的auto margin非常类似：</p><ol><li>在计算flex bases和伸缩长度的时候，auto margin被视为0</li><li>优先于通过justify-content和align-self设置的对齐属性，在那个区域的任何正的空间的都被分配给auto margin。</li><li>溢出的盒子会忽略它们的auto margin，并且在end方向溢出<h3 id="7-2-主轴对齐-justify-content属性"><a href="#7-2-主轴对齐-justify-content属性" class="headerlink" title="7.2 主轴对齐 :justify-content属性"></a>7.2 主轴对齐 :justify-content属性</h3></li></ol><table><thead><tr><th align="left">justify-content属性值</th><th align="left">定义了项目在主轴上的对齐方式</th></tr></thead><tbody><tr><td align="left">flex-start（默认）</td><td align="left"></td></tr><tr><td align="left">flex-end</td><td align="left"></td></tr><tr><td align="left">center</td><td align="left"></td></tr><tr><td align="left">space-between</td><td align="left"></td></tr><tr><td align="left">space-around</td><td align="left"></td></tr></tbody></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/Q6k15IzBNuJGbvn.png"                      alt="HGyMlU07TRUL0xu2__thumbnail.png"                ></p><h3 id="7-3-侧轴对齐-align-items与align-self属性"><a href="#7-3-侧轴对齐-align-items与align-self属性" class="headerlink" title="7.3 侧轴对齐 :align-items与align-self属性"></a>7.3 侧轴对齐 :align-items与align-self属性</h3><p>flex items可以在当前容器的当前行的侧轴上对齐，align-items设置flex容器中所有项的默认对齐方式，包括匿名flex items，align-self为单个flex items设置对齐方式，会覆盖它的默认对齐方式，对于匿名的flex items，align-self始终匹配它们相关联的flex容器的align-items值。</p><p>如果任何flex-items的margin的值为auto。则align-self无效。</p><p>如果flex容器的高度受到约束，stretch值可能导致flex item的内容溢出item</p><table><thead><tr><th align="left">align-items和align-self属性值</th><th align="left">定义了项目在主轴上的对齐方式</th></tr></thead><tbody><tr><td align="left">auto（align-self的属性值，且默认）</td><td align="left"></td></tr><tr><td align="left">flex-start</td><td align="left"></td></tr><tr><td align="left">flex-end</td><td align="left"></td></tr><tr><td align="left">center</td><td align="left"></td></tr><tr><td align="left">baseline</td><td align="left"></td></tr><tr><td align="left">stretch</td><td align="left"></td></tr></tbody></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/FRKW1quDNZtfUzM.png"                      alt="kmOo5IYgu9TesAUd__thumbnail.png"                ></p><h3 id="7-4-堆栈伸缩行-：align-content属性"><a href="#7-4-堆栈伸缩行-：align-content属性" class="headerlink" title="7.4 堆栈伸缩行 ：align-content属性"></a>7.4 堆栈伸缩行 ：align-content属性</h3><p>当cross-axis有额外空间的时候，align-content排列flex容器中的lines，类似justity-content在主轴排列单独的item，这个属性对于单行的flex容器没有效果。单行flex容器的line会自动拉伸填充空间。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/oGZzPy8RMfkYTtC.png"                      alt="H98ydaeN2I2CiLn8__thumbnail.png"                ></p><h2 id="8-Flex容器基线"><a href="#8-Flex容器基线" class="headerlink" title="8 Flex容器基线"></a>8 Flex容器基线</h2><p>为了使flex容器本身参与基线对齐（例如，当flex容器本身是外部flex容器的flex item时），它需要提交最能代表其内容的基线位置。为此，flex容器基线的位置被决定如下（使用order重排后并将flex-direction考虑在内）：</p><p><strong>first/last 主轴基线集</strong></p><p>当flex容器的inline axis匹配它的main axis，它的基线被决定如下：</p><ol><li>如果flex容器的最开始/最末尾的flex line中的任何flex items参与基线对齐，flex容器的first/last主轴基线集则从那些flex items的共享对齐基线生成。</li><li>否则，如果flex容器至少有一个flex item，则flex容器的first/last基线集是从最开始/最末尾的flex item的对齐基线生成。（如果该item没有与flex容器主轴平行的对齐基线，则首先从其边界边缘合成一个）。</li><li>否则，flex容器没有first/last主轴基线集，并且根据其对齐上下文规则在需要时合成一个。</li></ol><p><strong>first/last侧轴基线集</strong></p><p>当flex容器的inline axis匹配它的cross axis，它的基线被决定如下：</p><ol><li>如果flex容器至少有一个flex item，则flex容器的first/last基线集是从最开始/最末尾的flex item的对齐基线生成。（如果该item没有与flex容器交叉轴平行的对齐基线，则首先从其边界边缘合成一个）。</li><li>否则，flex容器没有first/last主轴基线集，并且根据其对齐上下文规则在需要时合成一个。</li></ol><p>根据上述规则计算基线时，如果贡献基线的框具有允许滚动的overflow值，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-伸缩布局盒模型和术语&quot;&gt;&lt;a href=&quot;#1-伸缩布局盒模型和术语&quot; class=&quot;headerlink&quot; title=&quot;1 伸缩布局盒模型和术语&quot;&gt;&lt;/a&gt;1 伸缩布局盒模型和术语&lt;/h2&gt;&lt;p&gt;一个设有display:flex或display:inlin</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="W3C CSS" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/"/>
    
    <category term="Flexible Box Layout Module Level 1" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/Flexible-Box-Layout-Module-Level-1/"/>
    
    
    <category term="W3C" scheme="http://example.com/tags/W3C/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Positioned Layout Module Level 3</title>
    <link href="http://example.com/2021/03/07/note/W3C%20CSS/Positioned%20Layout%20Module%20Level%203/"/>
    <id>http://example.com/2021/03/07/note/W3C%20CSS/Positioned%20Layout%20Module%20Level%203/</id>
    <published>2021-03-07T08:21:14.897Z</published>
    <updated>2021-03-08T08:09:30.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p>|name|postion|<br>|:—-:|:—-|:—-:|:—-|<br>|Value:|static<a class="link"   href="https://www.w3.org/TR/css-values-4/#comb-one" >|<i class="fas fa-external-link-alt"></i></a>relative | absolute | sticky | fixed|<br>|Initial:|static|<br>|Applies to:|除了table-column-group 和table-column以外的所有元素|<br>|Inherited:|不继承|</p><h1 id="2-static-定位"><a href="#2-static-定位" class="headerlink" title="2 static 定位"></a>2 static 定位</h1><p>HTML 元素的默认值，即没有定位，遵循正常的文档流对象。</p><p>静态定位的元素不会受到 top, bottom, left, right影响。</p><h1 id="3-relative-定位"><a href="#3-relative-定位" class="headerlink" title="3 relative 定位"></a>3 relative 定位</h1><p>相对定位元素的定位是相对其正常位置。</p><h1 id="4-absolute-定位"><a href="#4-absolute-定位" class="headerlink" title="4 absolute 定位"></a>4 absolute 定位</h1><p>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>:</p><h1 id="5-sticky-定位"><a href="#5-sticky-定位" class="headerlink" title="5 sticky 定位"></a>5 sticky 定位</h1><p>sticky 英文字面意思是粘，粘贴，所以可以把它称之为粘性定位。</p><p>position: sticky; 基于用户的滚动位置来定位。</p><p>粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。</p><p>它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。</p><p>元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p><p>这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p><h1 id="6-fixed-定位"><a href="#6-fixed-定位" class="headerlink" title="6 fixed 定位"></a>6 fixed 定位</h1><p>元素的位置相对于浏览器窗口是固定位置。</p><p>即使窗口是滚动的它也不会移动：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1 Introduction&quot;&gt;&lt;/a&gt;1 Introduction&lt;/h1&gt;&lt;p&gt;|name|postion|&lt;br&gt;|:—-</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="W3C CSS" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/"/>
    
    <category term="Positioned Layout Module Level 3" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/Positioned-Layout-Module-Level-3/"/>
    
    
    <category term="W3C" scheme="http://example.com/tags/W3C/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Selectors Level 3</title>
    <link href="http://example.com/2021/03/07/note/W3C%20CSS/Selectors%20Level%203/"/>
    <id>http://example.com/2021/03/07/note/W3C%20CSS/Selectors%20Level%203/</id>
    <published>2021-03-07T08:21:11.952Z</published>
    <updated>2021-03-08T08:09:35.491Z</updated>
    
    <content type="html"><![CDATA[<p>**CSS(层叠样式表)**是一个描述HTML和XML文档在屏幕等上呈现的语言。CSS使用选择器将样式属性绑定到文档中的元素，选择器是与树中的元素相匹配的模式，在语法上不区分大小写，</p><h2 id="1-选择器介绍"><a href="#1-选择器介绍" class="headerlink" title="1 选择器介绍"></a>1 选择器介绍</h2><table><thead><tr><th align="center">Pattern</th><th align="left">Represents</th><th align="center">Description</th><th align="left">Level</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">所有元素</td><td align="center">通用选择器</td><td align="left">2</td></tr><tr><td align="center">E</td><td align="left">所有E元素</td><td align="center">类型选择器</td><td align="left">1</td></tr><tr><td align="center">E[foo]</td><td align="left">定义了 “foo”属性的E元素</td><td align="center">属性选择器</td><td align="left">2</td></tr><tr><td align="center">E[foo=”bar”]</td><td align="left">定义了”foo”属性且值为”bar”的E元素</td><td align="center">属性选择器</td><td align="left">2</td></tr><tr><td align="center">E[foo~=”bar”]</td><td align="left">定义了”foo”属性且属性值是一个以空格分隔的列表，其中一个列表的值为”bar”。</td><td align="center">属性选择器</td><td align="left">2</td></tr><tr><td align="center">E[foo^=”bar”]</td><td align="left">定义了“foo”属性且值以“bar”开头的E元素</td><td align="center">属性选择器</td><td align="left">3</td></tr><tr><td align="center">E[foo$=”bar”]</td><td align="left">定义了“foo”属性且值以“bar”结尾的E元素</td><td align="center">属性选择器</td><td align="left">3</td></tr><tr><td align="center">E[foo*=”bar”]</td><td align="left">定义了“foo”属性且值包含“bar”的E元素</td><td align="center">属性选择器</td><td align="left">3</td></tr><tr><td align="center">E[foo|=”en”]</td><td align="left">定义了“foo”属性且属性值是用连字符（-）分隔的列表，值开头的字符为”en”的E元素</td><td align="center">属性选择器</td><td align="left">2</td></tr><tr><td align="center">E:root</td><td align="left">文档的根元素，对于HTML文档就是HTML元素</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:nth-child(n)</td><td align="left">E元素的父元素中的第n个子元素</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:nth-last-child(n)</td><td align="left">E元素的父元素中的倒数第n个子元素（只匹配同种的E元素）</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:nth-of-type(n)</td><td align="left">E元素的父元素中的第n个子代E元素</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:nth-last-of-type(n)</td><td align="left">E元素的父元素中的倒数第n个子元素（只匹配同种的E元素）</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:first-child</td><td align="left">E元素的父元素中的第一个子代E元素</td><td align="center">结构伪类</td><td align="left">2</td></tr><tr><td align="center">E:last-child</td><td align="left">E元素的父元素中的最后一个子代E元素</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:first-of-type</td><td align="left">E元素的父元素中的第一个子代E元素（只匹配相同的E元素）</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:last-of-type</td><td align="left">E元素的父元素中的最后一个子代E元素（只匹配相同的E元素）</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:only-child</td><td align="left">匹配父元素仅有的这个E元素</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:only-of-type</td><td align="left">匹配父元素仅有一个的E元素（只匹配相同的E元素）</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:empty</td><td align="left">匹配一个不包含任何元素的元素（文本结点也被看做子元素）</td><td align="center">结构伪类</td><td align="left">3</td></tr><tr><td align="center">E:link<br>E:visited</td><td align="left">作为超链接的E元素，其目标尚未访问（：link）或已访问（：visited）</td><td align="center">链接伪类</td><td align="left">1</td></tr><tr><td align="center"></td><td align="left"></td><td align="center"></td><td align="left"></td></tr><tr><td align="center">E:active<br>E:hover<br>E:focus</td><td align="left">在某些用户操作期间的E元素</td><td align="center">用户操作伪类</td><td align="left">1 and 2</td></tr><tr><td align="center">E:target</td><td align="left">相关URL指向的E元素</td><td align="center">目标伪类</td><td align="left">3</td></tr><tr><td align="center">E:lang(fr)</td><td align="left">语言为”fr”的E元素</td><td align="center">:lang() 伪类</td><td align="left">2</td></tr><tr><td align="center">E:enabled<br>E:disabled</td><td align="left">用户界面上处于可用或禁用状态的E元素</td><td align="center">UI元素声明伪类</td><td align="left">3</td></tr><tr><td align="center"></td><td align="left"></td><td align="center"></td><td align="left"></td></tr><tr><td align="center">E:checked</td><td align="left">用户界面上处于选中状态的E元素(用于input type为radio与checkbox时)</td><td align="center">UI元素声明伪类</td><td align="left">3</td></tr><tr><td align="center">E::first-line</td><td align="left">设置E元素内的第一行样式</td><td align="center">::first-line伪元素</td><td align="left">1</td></tr><tr><td align="center">E::first-letter</td><td align="left">设置E元素内的第一个字符</td><td align="center">::first-letter伪元素</td><td align="left">1</td></tr><tr><td align="center">E::before</td><td align="left">设置在对象前发生的内容</td><td align="center">::before伪元素</td><td align="left">2</td></tr><tr><td align="center">E::after</td><td align="left">设置在对象后发生的内容</td><td align="center">after伪元素</td><td align="left">2</td></tr><tr><td align="center">E.warning</td><td align="left">class属性值为warning的E元素</td><td align="center">类选择器</td><td align="left">1</td></tr><tr><td align="center">E#myid</td><td align="left">ID为”myid”的E元素</td><td align="center">ID选择器</td><td align="left">1</td></tr><tr><td align="center">E:not(s)</td><td align="left">不含有S选择器的元素</td><td align="center">相反伪类</td><td align="left">3</td></tr><tr><td align="center">E F</td><td align="left">所有属于E元素后代F元素</td><td align="center">后代组合器</td><td align="left">1</td></tr><tr><td align="center">E &gt; F</td><td align="left">所有属于E元素的子代F元素</td><td align="center">子代组合器</td><td align="left">2</td></tr><tr><td align="center">E + F</td><td align="left">紧贴在E元素之后的F元素</td><td align="center">相邻兄弟组合器</td><td align="left">2</td></tr><tr><td align="center">E ~ F</td><td align="left">在E元素之后的F元素</td><td align="center">兄弟组合器</td><td align="left">3</td></tr></tbody></table><h2 id="2-选择器语法"><a href="#2-选择器语法" class="headerlink" title="2 选择器语法"></a><strong>2 选择器语法</strong></h2><p><strong>选择器</strong>是由一个或多个简单选择器序列组成并由组合器分隔的链。一个伪元素可以附加到选择器中的最后一个简单选择器序。</p><p><strong>简单选择器序列</strong>是不被组合器分割的简单选择器链，它总是以类型选择器或通用选择器开始，序列中不允许使用其他类型选择器或通用选择器。</p><p><strong>简单选择器</strong>：类型选择器，通用选择器、属性选择器、类选择器、ID选择器、伪类选择器。</p><p><strong>组合器</strong>有：空格、“&gt;”（greater-than sign）、“+”（plus sign）和“~”（tilde）。组合器和它周围的简单选择器之间可以出现空白。空白中只能出现“空格”、“制表符”、“换行符”、“回车符”和“换页符”。其他类似空格的字符，例如“em space”（全角空格）和“ideographic space”（表意空格），都不是空白的一部分。</p><p>由选择器表示的文档树的元素是选择器的主题。由单个简单选择器序列组成的选择器表示满足其要求的任何元素。将另一个简单选择器序列和一个组合器添加到一个简单选择器序列前，会产生额外的匹配约束，因此选择器的主题始终是最后一个简单选择器序列所表示的元素的子集。</p><p><strong>空选择器</strong>（不包含简单选择器序列和伪元素）是无效的选择器。</p><p>选择器中的字符可以用反斜杠转义。</p><p>某些选择器支持命名空间前缀。声明命名空间前缀的机制应该由使用选择器的语言指定。如果没有指定，则不声明前缀。在CSS中，命名空间前缀使用@namespace规则声明。</p><h2 id="3-选择器组"><a href="#3-选择器组" class="headerlink" title="3 选择器组"></a>3 选择器组</h2><p>一个由逗号分隔的选择器列表表示列表中每个单独的选择器所选择的所有元素的联合，它们共享相同的声明。注意：如果其中一个选择器无效，则整个选择器组都将无效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h1, h2, h3 &#123; font-family: sans-serif &#125;</span><br></pre></td></tr></table></figure><h2 id="4-类型选择器"><a href="#4-类型选择器" class="headerlink" title="4 类型选择器"></a>4 类型选择器</h2><p>类型选择器匹配文档语言元素类型的名称。类型选择器匹配文档树中该元素类型的每一个实例。如果命名空间前缀没有提前声明，此类型选择器是无效的。</p><p>|<strong>ns|E</strong>|表示命名空间 ns 中的 E 元素|<br>|:—-:|:—-|:—-:|:—-|<br>|*<strong>|E</strong>|表示任何命名空间中的 E 元素(包括没有命名空间的元素)|<br>|<strong>|E</strong>|若有默认命名空间，表示默认命名空间中的 E 元素，否则表示没有命名空间的 E 元素|<br>|<strong>E</strong>|如果没有默认命名空间的情况下，等同于<strong>|E</strong>，否则等同于 ns|E|</p><p>CSS examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@namespace</span> foo url(<span class="attribute">http:</span>//www.example.com);</span><br><span class="line"> </span><br><span class="line">foo|h1 &#123;color: blue&#125;/* 只匹配在命名空间&quot;http://www.example.com&quot;中的 h1 元素 */</span><br><span class="line">foo|* &#123;color: yellow&#125;/* 匹配在命名空间&quot;http://www.example.com&quot;中的所有元素 */</span><br><span class="line">|h1 &#123; color: red &#125; /* 匹配没有命名空间的 h1 元素 */</span><br><span class="line">*|h1 &#123; color: green &#125;/* 匹配所有命名空间（包括没有命名空间）的 h1 元素 */ </span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: green &#125;<span class="comment">/* 因为没有默认命名空间，所以同上 */</span></span><br></pre></td></tr></table></figure><h2 id="5-通用选择器"><a href="#5-通用选择器" class="headerlink" title="5 通用选择器"></a>5 通用选择器</h2><p>如果没有为选择器指定默认名称空间，则它表示文档树中任何名称空间(包括没有名称空间的元素)中的任何元素。如果命名空间前缀没有提前声明，此通用选择器是无效的</p><p>如果通用选择器后面还有其他简单选择器，或者紧跟着一个伪元素，那么*可能被省略，并且暗示了通用选择器的存在。</p><p>不要省略 *，因为可以减少两者之间的混淆，比如 div  :first-child 和 div:first-child，在这里，div *:first-child 更具可读性。</p><p>Examples:</p><ul><li><code>*[hreflang|=en]</code>and<code>[hreflang|=en]</code>are equivalent,</li><li><code>*.warning</code>and<code>.warning</code>are equivalent,</li><li><code>*#myid</code>and<code>#myid</code>are equivalent.</li></ul><p>通用选择器允许有命名空间。使用如下:</p><p>|<strong>ns|**<em>|表示命名空间 ns 中的所有元素|<br>|:—-:|:—-|:—-:|:—-|<br>|</em></strong>|<strong><em>|任何元素|<br>|**|</em></strong>|如果有默认命名空间，表示默认命名空间中的任何元素，如果有，则表示没有命名空间的任何元素|<br>|<strong>**<em>|如果没有默认命名空间的情况下，等同于</em></strong>|**<em>，否则等同于 ns|</em>|</p><h2 id="6-属性选择器"><a href="#6-属性选择器" class="headerlink" title="6 属性选择器"></a>6 属性选择器</h2><p>根据元素的属性和属性值来匹配元素。通用语法由方括号[ ] 组成，其中包含属性名称，后跟可选条件以匹配属性的值。</p><p>|<strong>[att]</strong>|表示定义了att属性的元素，无论属性值是什么|<br>|:—-:|:—-|:—-:|:—-|<br>|<strong>[att=val]</strong>|表示定义了att属性且属性值是val的元素|<br>|<strong>[att~=val]</strong>|表示定义了att属性且属性值在一个以空格分隔的列表中的值为val的元素,如果val中有空格或为空字符串，则不代表任何元素|<br>|<strong>[att|=val]</strong>|表示定义了att属性且值在以连字符（-）分隔的列表中以val开头或就是val|<br>|<strong>[att^=val]</strong>|表示定义了att属性且值以val开头的元素,如果val为空字符串，则不代表任何元素|<br>|<strong>[att$=val]</strong>|表示定义了att属性且值以val结尾的元素,如果val为空字符串，则不代表任何元素|<br>|*<em>[att</em>=val]**|表示定义了att属性且值含有val的元素,如果val为空字符串，则不代表任何元素|</p><p>属性选择器中的属性名是一个CSS限定名:之前声明的命名空间前缀可以被前置到属性名前，默认名称空间不适用于属性，因此没有名称空间组件的属性选择器只适用于没有名称空间的属性(相当于“|attr”)。如果命名空间前缀没有提前声明，此属性选择器是无效的</p><p>CSS examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@namespace</span> foo <span class="string">&quot;http://www.example.com&quot;</span>;</span><br><span class="line"><span class="selector-attr">[foo|att=val]</span>&#123;<span class="attribute">color</span>:blue&#125;<span class="comment">/* 匹配定义的att属性在&quot;http://www.example.</span></span><br><span class="line"><span class="comment">com&quot;命名空间值中，且其值为val的元素 */</span></span><br><span class="line"><span class="selector-attr">[*|att]</span> &#123;<span class="attribute">color</span>: yellow&#125;<span class="comment">/* 只匹配定义了att属性的元素 */</span></span><br><span class="line"><span class="selector-attr">[|att]</span> &#123;<span class="attribute">color</span>: green&#125;<span class="comment">/* 匹配属性没有命名空间的元素 */</span></span><br><span class="line"><span class="selector-attr">[att]</span> &#123;<span class="attribute">color</span>: green&#125;<span class="comment">/* 同上 */</span></span><br></pre></td></tr></table></figure><h3 id="6-1-DTD文档中属性默认值"><a href="#6-1-DTD文档中属性默认值" class="headerlink" title="6.1 DTD文档中属性默认值"></a>6.1 DTD文档中属性默认值</h3><p>在某些文档格式中，默认属性值可以在DTD或其他地方定义，如果他们存在于文档树中，只能被属性选择器选中。</p><p>例如，XML UA需要在文档的“内部子集”中查找默认属性值。根据UA的不同，在DTD的外部子集中定义的默认属性值可能会也可能不会出现在文档树中。</p><p>Example:</p><p>一个定义了radix属性，且默认属性值为”decimal”的EXAMPLE元素，DTD片段如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ATTLIST <span class="meta-keyword">EXAMPLE</span> <span class="meta-keyword">radix</span> (<span class="meta-keyword">decimal</span>,<span class="meta-keyword">octal</span>) <span class="meta-string">&quot;decimal&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果样式表包含规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">EXAMPLE</span><span class="selector-attr">[radix=decimal]</span> &#123; <span class="comment">/*... default property settings ...*/</span> &#125;</span><br><span class="line"><span class="selector-tag">EXAMPLE</span><span class="selector-attr">[radix=octal]</span>   &#123; <span class="comment">/*... other settings...*/</span> &#125;</span><br></pre></td></tr></table></figure><p>第一条规则可能不会匹配radix属性为默认值的元素，也就是没有被明确设置。为了应对所有情形，对默认属性的属性选择器必须被取消掉：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">EXAMPLE</span>                &#123; <span class="comment">/*... default property settings ...*/</span> &#125;</span><br><span class="line"><span class="selector-tag">EXAMPLE</span><span class="selector-attr">[radix=octal]</span>   &#123; <span class="comment">/*... other settings...*/</span> &#125;</span><br></pre></td></tr></table></figure><p>这里，因为选择器EXAMPLE[radix=octal]更加具体，第二条规则的样式声明会覆盖第一条规则。注意所有针对默认情况的属性声明都会被非默认情况下的样式规则覆盖。</p><h2 id="7-类选择器"><a href="#7-类选择器" class="headerlink" title="7 类选择器"></a>7 类选择器</h2><p>类选择器允许以一种独立于文档元素的方式来指定样式。通过，可以代替“~=”  符号来表示，    该属性值必须紧跟在“.”符号后面。</p><p>CSS examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-class">.pastoral</span> &#123; <span class="attribute">color</span>: green  &#125;<span class="comment">/* all elements with class~=pastoral */</span></span><br><span class="line"><span class="selector-class">.pastoral</span> &#123; <span class="attribute">color</span>: green &#125;  <span class="comment">/* all elements with class~=pastoral */</span></span><br><span class="line"><span class="selector-tag">H1</span><span class="selector-class">.pastoral</span> &#123; <span class="attribute">color</span>: green &#125;  <span class="comment">/* H1 elements with class~=pastoral */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.pastoral</span><span class="selector-class">.marine</span> &#123; <span class="attribute">color</span>: green &#125; <span class="selector-tag">l</span><span class="comment">/* class属性值同时有pastoral和marine且以空格隔开 */</span></span><br></pre></td></tr></table></figure><h2 id="8-ID选择器"><a href="#8-ID选择器" class="headerlink" title="8 ID选择器"></a>8 ID选择器</h2><p>ID选择器表示具有与ID选择器中的标识符匹配的标识符的元素实例。选择器不会指定UA如何知道元素的ID类型属性。ID属性在同一文档中是唯一的</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#chapter1</span> <span class="comment">/* 表示一个h1元素，其ID类型属性值为“chapter1” */</span></span><br><span class="line"><span class="selector-id">#chapter1</span> <span class="comment">/* 表示ID类型属性值为“chapter1”的任何元素 */</span></span><br><span class="line">*<span class="selector-id">#z98y</span> <span class="comment">/* 表示其ID类型属性值为“z98y”的任何元 */</span></span><br></pre></td></tr></table></figure><h2 id="9-伪类"><a href="#9-伪类" class="headerlink" title="9 伪类"></a>9 伪类</h2><p>伪类的概念被引入以允许选择位于该文档树以外或者使用其他简单选择器不能表达的信息。</p><p>伪类允许出现在选择器中的所有简单选择器序列中。伪类可以出现在简单选择器序列的任何地方。伪类的名字是不区分大小写的。一些伪类是互相排斥的，伪类可能是动态的，当用户操作文档时一个元素可能获得或失去一个伪类。</p><h3 id="9-1-动态伪类"><a href="#9-1-动态伪类" class="headerlink" title="9.1 动态伪类"></a>9.1 动态伪类</h3><p>动态伪类根据元素特征分类，不同于他们的名称、属性和内容，原则上特征不能从文档树得出，动态伪类不会出现在文档源或文档树中。</p><h4 id="9-1-1-链接伪类-link-和-visited"><a href="#9-1-1-链接伪类-link-和-visited" class="headerlink" title="9.1.1 链接伪类*:link 和:visited*"></a>9.1.1 链接伪类*:link 和:visited*</h4><p>用户代理一般将已访问过的链接和未访问的链接分开表示。选择器提供伪类:link 和 :visited来区分他们。</p><p><strong>:link</strong>伪类表示还没有访问过的链接</p><p><strong>:visited</strong>伪类表示已经访问过的链接</p><p>经过一定的时间，用户代理可能选择返回一个访问过的链接为:link状态。这两种状态是互斥的 。</p><p>这可能让样式表开发者在未经用户同意的情况下探测用户已经访问过哪些网站。UA可能因此将所有链接设置为未访问，或实现其他策略去避免用户隐私泄露。</p><h4 id="9-1-2-用户动作伪类-hover-active-focus"><a href="#9-1-2-用户动作伪类-hover-active-focus" class="headerlink" title="9.1.2 用户动作伪类 :hover, :active,:focus"></a>9.1.2 用户动作伪类 :hover, :active,:focus</h4><p>交互性用户代理时有会改变渲染以响应用户操作。选择器提供三个伪类来响应用户操作。</p><p><strong>:hover伪类</strong>：当用户通过指针设备指定一个元素，但不一定激活它。例如，当光标（鼠标指针）停在元素上方时可视化用户代理可以激活这个伪类。不支持交互式媒体的用户代理不必支持这个伪类。</p><p><strong>:active伪类</strong>：用户激活元素时激活这个伪类。例如用户在元素上单击鼠标。</p><p><strong>:focus伪类</strong>：当元素获取焦点时这个伪类被激活（从键盘或鼠标或其他设备获取输入）。</p><p>文档语言或特殊实现会限制某些元素能够捕获:active或:focus。这些伪类不是互相排斥的。一个元素可能同时匹配到多个伪类。</p><p>当一个元素处于:active或:hover时，选择器没有定义其父元素是否也处于同样的状态。如果一个元素处于:hover作用是因为它的子元素被指针设备所指向，这时这个父元素可能并没有被指针元素所指向。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>    <span class="comment">/* 未访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> <span class="comment">/* 已访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>   <span class="comment">/* 用户悬停 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>  <span class="comment">/* 活动中的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>   <span class="comment">/* 获取焦点 */</span> </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span><span class="selector-pseudo">:hover</span> <span class="comment">/* 动态伪类的组合 */</span></span><br><span class="line"><span class="comment">/* 一个元素可以同时处在:visited和:active（或 :link 和 :active) */</span></span><br></pre></td></tr></table></figure><h3 id="9-2-目标伪类-target"><a href="#9-2-目标伪类-target" class="headerlink" title="9.2 目标伪类:target"></a>9.2 目标伪类:target</h3><p>有些URI引用一个资源中的一个地址。这类URI以井号（#）结束并跟着一个锚标识符（被称作片段标识符 fragment identifier）。</p><p>具有片段标识符的URI链接到文档内的某一个元素，就是目标元素。例如这个URI指向HTML文档内叫做section_2的锚点：<a href="http://example.com/html/top.html#section_2">http://example.com/html/top.html#section_2</a></p><p>一个目标元素可以被:target伪类表示。如果文档的URI没有片段标识符，那么文档不存在目标元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.note</span><span class="selector-pseudo">:target</span> <span class="comment">/* 一个做为文档目标元素且class为note的p元素 */</span></span><br><span class="line"><span class="comment">/* 下面，:target伪类用来将目标元素变成红色并且在它之前放置一个图像： */</span></span><br><span class="line">*<span class="selector-pseudo">:target</span> &#123; <span class="attribute">color </span>: red &#125;</span><br><span class="line">*<span class="selector-pseudo">:target</span><span class="selector-pseudo">::before</span> &#123; <span class="attribute">content </span>: <span class="built_in">url</span>(target.png) &#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-语言伪类-lang"><a href="#9-3-语言伪类-lang" class="headerlink" title="9.3 语言伪类:lang"></a>9.3 语言伪类:lang</h3><p>如果文档语言描述了如何确定一个元素的自然语言，那么将有可能实现一个表示特定语言的元素的选择器。例如，在HTML中语言可以被lang属性和meta元素中的可能存在的一些信息组合表示或在协议中（例如HTTP头部）表示。XML使用叫做xml:lang的属性，并且其他文档语言可能使用其他方法来确定语言。</p><p>伪类**:lang(C)**表示一个使用语言C的元素。无论元素的语言值等于C，或是以C开头跟随“ - ”都将被匹配。    对C和元素语言值的匹配是不区分大小写的。C不必是一个有效的语言名。</p><p>C必须是一个有效的CSS标识符并且不可以为空，否则，选择器是无效的。</p><p>Examples:</p><p>前两个选择器表示一个应用Belgian French 或 German语言的HTML文档。后两个选择器表示任意Belgian French 或 German语言元素中的q元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html:lang(fr-be)</span><br><span class="line">html:lang(de)</span><br><span class="line">:lang(fr-be) &gt; q</span><br><span class="line">:lang(de) &gt; </span><br></pre></td></tr></table></figure><p>:lang(C)与 |= 操作符的区别在于： |= 操作符仅仅表示对元素指定属性的比较，而:lang(C)伪类使用UA的知识在文档语义上进行比较。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/*仅仅body匹配[lang|=fr]（因为它具有LANG属性）但是body和P都匹配:lang(fr)（因为他们都使用法语）。P不匹配[lang|=fr]因为它没有LANG属性：*/</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">lang</span>=<span class="string">fr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Je suis français.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-4-UI元素状态伪类"><a href="#9-4-UI元素状态伪类" class="headerlink" title="9.4 UI元素状态伪类"></a>9.4 UI元素状态伪类</h3><h4 id="9-4-1-enabled和-disabled伪类"><a href="#9-4-1-enabled和-disabled伪类" class="headerlink" title="9.4.1 :enabled和:disabled伪类"></a>9.4.1 :enabled和:disabled伪类</h4><p><strong>:enabled</strong>伪类表示处在可用状态下的用户接口元素。这些元素具有与不可用相对的状态。</p><p>:<strong>disabled</strong>伪类表示用户接口元素在不可用状态。这些元素具有与可用相对的状态。</p><p>用户接口元素、可用与不可用的状态是依赖于语言的。在一个典型的文档中大多数元素既不是:enabled也不是:disabled的。（常用于input、textarea）</p><p>CSS中可能影响用户与UI元素交互的属性不会影响:enabled或:disabled的匹配。例如display和visibility属性不会影响元素的enabled/disabled状态。</p><h4 id="9-4-2-checked伪类"><a href="#9-4-2-checked伪类" class="headerlink" title="9.4.2 :checked伪类"></a>9.4.2 :checked伪类</h4><p>单选和多选元素可以被用户开关。一些菜单项目在用户选择他们时会处在选中状态。例如:checked伪类最初匹配HTML4中具有selected和checked的元素。:checked伪类本质上是动态的，他们随着用户操作而改，。因为它可以以文档中存在的语义属性作为依据，所以它可以匹配所有的媒体。用户可以关闭(toggle “off”)这些元素，这将使:checked伪类不再匹配。（常用于    checkbox    、radio、option ）</p><h4 id="9-4-3-indeterminate伪类"><a href="#9-4-3-indeterminate伪类" class="headerlink" title="9.4.3 :indeterminate伪类"></a>9.4.3 :indeterminate伪类</h4><p>单选和多选元素可以被用户开关，但一些时候它们处在不确定状态，既不是选中也不是非选中。元素属性和DOM操作可能导致这种情况。</p><h3 id="9-5-结构伪类"><a href="#9-5-结构伪类" class="headerlink" title="9.5 结构伪类"></a>9.5 结构伪类</h3><p>选择器通过结构化伪类的概念来进行基于文档中额外信息的不能被其他简单选择器或组合器表示的匹配。</p><p>在计算元素位于其父元素的子元素列表中的位置时，独立的文字或其他非元素节点是不被计算的且索引是从1开始的。</p><h4 id="9-5-1-root伪类"><a href="#9-5-1-root伪类" class="headerlink" title="9.5.1 :root伪类"></a>9.5.1 :root伪类</h4><p>:root伪类表示作为文档根的元素。在HTML 4中总是HTML元素。</p><h4 id="9-5-2-nth-child-伪类"><a href="#9-5-2-nth-child-伪类" class="headerlink" title="9.5.2 :nth-child()伪类"></a>9.5.2 :nth-child()伪类</h4><p>:nth-child(an+b)伪类表示一个元素它在文档树中有an+b-1个前兄弟节点，n可以为任何正数或0，并且有一个父元素。a和b要大于0。这有效的将子元素按a个元素进行分组（最后一组包含余数个元素），并且选择每一组的第b个元素。a和b必须为整数（正数，负数或0）。第一个子元素的索引是1。</p><p>:nth-child()可以用odd和even作为参数。odd相当于2n+1，even相当于2n。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(2n+1)</span> <span class="comment">/* 表示HTML中table的奇数行 */</span></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(odd)</span>  <span class="comment">/* 同上 */</span></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(2n+0)</span> <span class="comment">/* 表示HTML中table的偶数行 */</span></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(even)</span> <span class="comment">/* 同上 */</span></span><br><span class="line"><span class="comment">/* 通过CSS修改段落颜色 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(4n+1)</span> &#123; <span class="attribute">color</span>: navy; &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(4n+2)</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(4n+3)</span> &#123; <span class="attribute">color</span>: maroon; &#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(4n+4)</span> &#123; <span class="attribute">color</span>: purple; &#125;</span><br></pre></td></tr></table></figure><p>当b前面存在负号，那么正号必须被移除，也就是说被负号替代以表示b是个负数。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:nth-child(10n-1)</span>  <span class="comment">/* 表示第9，第19，第29以此类推的元素 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child(10n+9)</span>  <span class="comment">/* 同上 */</span></span><br><span class="line"><span class="selector-pseudo">:nth-child(10n+-1)</span> <span class="comment">/* 无效的语法，会被忽略 */</span></span><br></pre></td></tr></table></figure><p>当a=0时ab部分应被忽略（除非b部分已经被忽略了）。当an不存在并且b是非负数，b前的正号（当存在时）可以被忽略。这类似于:nth-child(b)。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">foo</span><span class="selector-pseudo">:nth-child(0n+5)</span>   <span class="comment">/* 表示一个处在第五个的foo元素 */</span></span><br><span class="line"><span class="selector-tag">foo</span><span class="selector-pseudo">:nth-child(5)</span>      <span class="comment">/* 同上 */</span></span><br></pre></td></tr></table></figure><p>当a=1或a=-1，这个数字可以被省略。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面的选择器等价: */</span></span><br><span class="line"><span class="selector-tag">bar</span><span class="selector-pseudo">:nth-child(1n+0)</span>   <span class="comment">/* 选择所有bar元素, 优先级 (0,1,1) */</span></span><br><span class="line"><span class="selector-tag">bar</span><span class="selector-pseudo">:nth-child(n+0)</span>    <span class="comment">/* 同上 */</span></span><br><span class="line"><span class="selector-tag">bar</span><span class="selector-pseudo">:nth-child(n)</span>      <span class="comment">/* 同上 */</span></span><br><span class="line"><span class="selector-tag">bar</span>                   <span class="comment">/* 同上，但是优先级更低 (0,0,1) */</span></span><br></pre></td></tr></table></figure><p>如果b=0，那么每一个第a个元素被选取。这种情况下，+b(或-b)部分可能被省略除非a部分已经被省略了。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(2n+0)</span> <span class="comment">/* 示HTML中table的每一个偶数行 */</span></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child(2n)</span> <span class="comment">/* 同上 */</span></span><br></pre></td></tr></table></figure><p>空白符被允许出现在 左括号“(” 后和右括号 “)” 前，并且当an和b同时出现时空白符可以出现在“+”或“-”的两边。</p><p>Valid Examples with white space:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:nth-child(</span> 3<span class="selector-tag">n</span> + 1 )</span><br><span class="line"><span class="selector-pseudo">:nth-child(</span> +3<span class="selector-tag">n</span> <span class="selector-tag">-</span> 2 )</span><br><span class="line"><span class="selector-pseudo">:nth-child(</span> <span class="selector-tag">-n</span>+ 6)</span><br><span class="line"><span class="selector-pseudo">:nth-child(</span> +6 )</span><br></pre></td></tr></table></figure><p>Invalid Examples with white space:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:nth-child(3</span> <span class="selector-tag">n</span>)</span><br><span class="line"><span class="selector-pseudo">:nth-child(+</span> 2<span class="selector-tag">n</span>)</span><br><span class="line"><span class="selector-pseudo">:nth-child(+</span> 2)</span><br></pre></td></tr></table></figure><p>a和b都为0时，这个伪类不表示文档树中的任何元素。</p><p>a可以是负数，但是an+b只能是正数，对于n&gt;=0，可能表示文档树中的一个元素。</p><p>Example:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html|tr:nth-child(-n+6)  /* 表示XHTML中table的前6行 */</span><br></pre></td></tr></table></figure><h4 id="9-5-3-nth-last-child-伪类"><a href="#9-5-3-nth-last-child-伪类" class="headerlink" title="9.5.3 :nth-last-child() 伪类"></a>9.5.3 :nth-last-child() 伪类</h4><p>:nth-of-type(an+b)伪类表示一个元素在文档树中在这个元素之前具有an+b-1个和此元素相同元素名的兄弟元素，n可以为任何正数或0，并且具有父元素。 参数的定义参照:nth-child()。同样可以接受odd和even作为参数。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-last-child(-n+2)</span>  <span class="comment">/* 表示HTML中table的最后2行 */</span></span><br><span class="line"><span class="selector-tag">foo</span><span class="selector-pseudo">:nth-last-child(odd)</span>  <span class="comment">/* 表示父元素中的所有奇数元素，从后往前计算 */</span></span><br></pre></td></tr></table></figure><h4 id="9-5-4-nth-of-type-伪类"><a href="#9-5-4-nth-of-type-伪类" class="headerlink" title="9.5.4 :nth-of-type() 伪类"></a>9.5.4 :nth-of-type() 伪类</h4><p>:nth-of-type(an+b)伪类表示一个元素在文档树中在这个元素之前具有an+b-1个和此元素相同元素名的兄弟元素，n可以为任何正数或0，并且具有父元素。 参数的定义参照:nth-child()。同样可以接受odd和even作为参数。</p><p>CSS example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:nth-of-type(2n+1)</span> &#123; <span class="attribute">float</span>: right; &#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:nth-of-type(2n)</span> &#123; <span class="attribute">float</span>: left; &#125;</span><br></pre></td></tr></table></figure><h4 id="9-5-5-nth-last-of-type-伪类"><a href="#9-5-5-nth-last-of-type-伪类" class="headerlink" title="9.5.5 :nth-last-of-type()伪类"></a>9.5.5 :nth-last-of-type()伪类</h4><p>:nth-last-of-type(an+b)伪类表示一个元素在文档树中在这个元素之后具有an+b-1个和此元素相同元素名的兄弟元素，n可以为任何正数或0，并且具有父元素。 参数的定义参照:nth-child()。同样可以接受odd和even作为参数。</p><p>Example:</p><p>表示body中所有h2元素，除了第一个和最后一个</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">h2</span><span class="selector-pseudo">:nth-of-type(n+2)</span><span class="selector-pseudo">:nth-last-of-type(n+2)</span></span><br></pre></td></tr></table></figure><p>在这个示例中，用样可以使用:not(),虽然选择器是一样长的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &gt; <span class="selector-tag">h2</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-of-type)</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-of-type)</span></span><br></pre></td></tr></table></figure><h4 id="9-5-6-first-child伪类"><a href="#9-5-6-first-child伪类" class="headerlink" title="9.5.6 :first-child伪类"></a>9.5.6 :first-child伪类</h4><p>与:nth-child(1)相同。:first-child表示第一个子元素。</p><p>Examples:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span><span class="comment">/*表示div元素中的p元素，且这个p元素是第一个子元素 */</span></span><br></pre></td></tr></table></figure><p>这个选择器表示下面片段中div中的p元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt; <span class="selector-tag">The</span> <span class="selector-tag">last</span> <span class="selector-tag">P</span> <span class="selector-tag">before</span> <span class="selector-tag">the</span> <span class="selector-tag">note</span>.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;div class=&quot;note&quot;&gt;</span><br><span class="line">   &lt;<span class="selector-tag">p</span>&gt; <span class="selector-tag">The</span> <span class="selector-tag">first</span> <span class="selector-tag">P</span> <span class="selector-tag">inside</span> <span class="selector-tag">the</span> <span class="selector-tag">note</span>.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>但是不表示下面片段中的第二个p元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span>&gt; <span class="selector-tag">The</span> <span class="selector-tag">last</span> <span class="selector-tag">P</span> <span class="selector-tag">before</span> <span class="selector-tag">the</span> <span class="selector-tag">note</span>.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;div class=&quot;note&quot;&gt;</span><br><span class="line">   &lt;<span class="selector-tag">h2</span>&gt; <span class="selector-tag">Note</span> &lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">   &lt;<span class="selector-tag">p</span>&gt; <span class="selector-tag">The</span> <span class="selector-tag">first</span> <span class="selector-tag">P</span> <span class="selector-tag">inside</span> <span class="selector-tag">the</span> <span class="selector-tag">note</span>.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>下面的两个选择器一般是等价的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:first-child</span> <span class="comment">/* a是任何元素的第一个子元素 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:first-child</span> <span class="comment">/* 当a不是根元素时同上 */</span></span><br></pre></td></tr></table></figure><h4 id="9-5-7-last-child伪类"><a href="#9-5-7-last-child伪类" class="headerlink" title="9.5.7 :last-child伪类"></a>9.5.7 :last-child伪类</h4><p>同:nth-last-child(1)。:last-child表示一个元素中的最后一个子元素。</p><p>Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ol</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> <span class="comment">/* 表示一个有序列表ol中的最后一个条目li */</span> </span><br></pre></td></tr></table></figure><h4 id="9-5-8-first-of-type-伪类"><a href="#9-5-8-first-of-type-伪类" class="headerlink" title="9.5.8 :first-of-type 伪类"></a>9.5.8 :first-of-type 伪类</h4><p>同:nth-of-type(1)。:first-of-type伪类表示具有相同元素类型的兄弟节点中的第一个节点。</p><p>Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示一个在列表dl中的标题dt，这个dt是与它相同类型的兄弟节点中的第一个节点： */</span></span><br><span class="line"><span class="selector-tag">dl</span> <span class="selector-tag">dt</span><span class="selector-pseudo">:first-of-type</span></span><br></pre></td></tr></table></figure><p>这表示了下面的头两个dt元素，但不能表示第三个dt元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dt</span>&gt;</span>gigogne<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>fusée<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>multistage rocket<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dt</span>&gt;</span>table<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>   /* 不能被表示到 */</span><br><span class="line">   <span class="tag">&lt;<span class="name">dd</span>&gt;</span>nest of tables<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-5-9-last-of-type"><a href="#9-5-9-last-of-type" class="headerlink" title="9.5.9 :last-of-type"></a>9.5.9 :last-of-type</h4><p>同:nth-last-of-type(1)。:last-of-type伪类表示具有相同元素类型的兄弟节点中的最后一个节点。</p><p>Example:</p><p>下面的选择器表示table行tr中的最后一个数据单元td：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tr</span> &gt; <span class="selector-tag">td</span><span class="selector-pseudo">:last-of-type</span></span><br></pre></td></tr></table></figure><h4 id="9-5-10-only-child伪类"><a href="#9-5-10-only-child伪类" class="headerlink" title="9.5.10 :only-child伪类"></a>9.5.10 :only-child伪类</h4><p>表示某个是其父元素中的唯一元素的元素。同:first-child:last-child 或 :nth-child(1):nth-last-child(1), 但是具有更低的优先级。</p><h4 id="9-5-11-only-of-type伪类"><a href="#9-5-11-only-of-type伪类" class="headerlink" title="9.5.11 :only-of-type伪类"></a>9.5.11 :only-of-type伪类</h4><p>表示某个父元素中子元素，父元素不存在与此子元素同类的子元素。同:first-of-type:last-of-type 或 :nth-of-type(1):nth-last-of-type(1)，但是具有更低的优先级。</p><h4 id="9-5-12-empty伪类"><a href="#9-5-12-empty伪类" class="headerlink" title="9.5.12 :empty伪类"></a>9.5.12 :empty伪类</h4><p>:empty伪类表示一个元素根本没有子元素。在文档树中，仅仅元素节点和内容节点具有非0长度的数据时，会影响是否为空。注释，处理指令和其他节点不会产生影响。</p><p>Examples:</p><p>p:empty 对下面的片段是有效的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>foo:empty 对下面的片段是无效的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="tag">&lt;<span class="name">bar</span>&gt;</span>bla<span class="tag">&lt;/<span class="name">bar</span>&gt;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span>this is not <span class="tag">&lt;<span class="name">bar</span>&gt;</span>:empty<span class="tag">&lt;/<span class="name">bar</span>&gt;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-空白"><a href="#9-6-空白" class="headerlink" title="9.6 空白"></a>9.6 空白</h3><p>这一节是故意留白的，之前是:contains()伪类。</p><h3 id="9-7-否定伪类"><a href="#9-7-否定伪类" class="headerlink" title="9.7 否定伪类"></a>9.7 否定伪类</h3><p>否定伪类:not(X)是一个将简单选择器作为参数的功能符。它表示不是它的参数所表示的元素。</p><p>否定伪类不可嵌套，:not(:not(…))是无效的。注意因为伪元素不是简单选择器，所以他们不可以作为:not()的参数。</p><p>Examples:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[DISABLED]</span>) <span class="comment">/* 表示不是disabled状态以外的所有button */</span></span><br><span class="line">*<span class="selector-pseudo">:not(FOO)</span><span class="comment">/* 表示不是FOO元素以外的所有元素 */</span></span><br><span class="line">html|*:not(:link):not(:visited) /* 表示除了链接以外所有HTML元素 */</span><br></pre></td></tr></table></figure><p>默认命名空间声明不会影响否定伪类的参数，除非参数是个全局选择器或一个类型选择器。<br>Examples:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 如果默认命名空间是&quot;http://example.com/&quot;，下面的选择器表示所有不在这个命名空间中的元素 */</span></span><br><span class="line">*|*:not(*)</span><br><span class="line"><span class="comment">/* 下面的选择器匹配任何没有被指向的元素，不管它的命名空间是什么 */</span></span><br><span class="line">*|*:not(:hover)</span><br></pre></td></tr></table></figure><p>:not()伪类允许表示没有价值的选择器，例如:not(<em>|</em>)，这不表示任何元素，或者foo:not(bar)，这等价于foo但是具有更高优先级。</p><h2 id="10-伪元素"><a href="#10-伪元素" class="headerlink" title="10 伪元素"></a>10 伪元素</h2><p>伪元素创建超越文档语言定义的文档树的抽象概念。伪元素允许开发者访问这些原本难以访问的信息，以及访问源文档中不存在内容。</p><p>伪元素由两个冒号::及紧跟伪元素的名字组成。 为了兼容性，单冒号也被允许。伪元素必须在简单选择器序列的最后。</p><h3 id="10-1-first-line伪元素"><a href="#10-1-first-line伪元素" class="headerlink" title="10.1 ::first-line伪元素"></a>10.1 ::first-line伪元素</h3><p><strong>::first-line</strong>伪元素表示元素中的第一个格式化行 .</p><p>选择器P::first-line不匹配任何真正的文档元素。用户代理会添加虚拟标签序列（fictional tag sequence）到文档中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;P&gt;&lt;P::first-line&gt; This is a somewhat long HTML paragraph that &lt;&#x2F;P::first-line&gt; will be broken into several lines. The first line will be identified by a fictional tag sequence.&lt;&#x2F;P&gt;</span><br></pre></td></tr></table></figure><h4 id="10-1-1-CSS中定义的第一个格式化行"><a href="#10-1-1-CSS中定义的第一个格式化行" class="headerlink" title="10.1.1 CSS中定义的第一个格式化行"></a>10.1.1 CSS中定义的第一个格式化行</h4><p>在CSS中，::first-line伪元素在块容器时才有效。元素的第一个格式化行可能出现在块级后代中。例如，<DIV><P>This line…</P></DIV>中DIV的第一行就是P的第一行（假定P和DIV都是块级）。</p><p>table-cell或 inline-block不能作为祖先元素的第一个格式化行。因此，<DIV><P STYLE="display: inline-block">Hello<BR>Goodbye</P> etcetera</DIV>中DIV的第一个格式化行不是“Hello”，而是 etcetera。</p><p>在片段<p><br>First…中p的第一个格式化行不包含任何字母（假定使用HTML4中br的默认样式），因为由br的存在。</p><p>UA应该将::first-line的虚拟开始标签嵌套于最内部的闭合块级元素中。 （只是应该而已，因为css1和css2没有要求）</p><p>例如，下面段落</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;DIV&gt;</span><br><span class="line">  &lt;P&gt;First paragraph&lt;&#x2F;P&gt;</span><br><span class="line">  &lt;P&gt;Second paragraph&lt;&#x2F;P&gt;</span><br><span class="line">&lt;&#x2F;DIV&gt;</span><br></pre></td></tr></table></figure><p>虚拟标签序列是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;DIV&gt;</span><br><span class="line">  &lt;P&gt;&lt;DIV::first-line&gt;&lt;P::first-line&gt;First paragraph&lt;&#x2F;P::first-line&gt;&lt;&#x2F;DIV::first-line&gt;&lt;&#x2F;P&gt;</span><br><span class="line">  &lt;P&gt;&lt;P::first-line&gt;Second paragraph&lt;&#x2F;P::first-line&gt;&lt;&#x2F;P&gt;</span><br><span class="line">&lt;&#x2F;DIV&gt;</span><br></pre></td></tr></table></figure><p>::first-line伪元素类似于一个 inline-level元素，但是具有一些约束。下面的CSS属性可以作用于一个::first-line伪元素：字体属性，颜色属性，背景属性，word-spacing, letter-spacing, text-decoration, vertical-align, text-transform, line-height。UA可能实现其他属性。<br>在CSS继承中，出现在第一行的子元素的某些部分仅从::first-line伪元素继承适用于::first-line伪元素的属性。其他属性继承于第一行伪元素的非伪元素父元素。（子元素的不出现在第一行的部分总是继承于父元素）。这里太绕了。。。</p><h3 id="10-2-first-letter伪元素"><a href="#10-2-first-letter伪元素" class="headerlink" title="10.2 :first-letter伪元素"></a>10.2 :first-letter伪元素</h3><p>::first-letter伪元素，如果在这行上它前面没有任何其他内容（例如图片和 inline tables），表示元素的第一个字母，::first-letter伪元素通常被用于开头字母大写和首字下沉这些通用的印刷效果。</p><p>如果标点符号出现在在首字母之前或之后也应该被包括进去，数字也同样生效。</p><p>如果组成::first-letter的字母不在一个元素中，例如<p>‘<em>T…中的“’T”，UA可能为其中一个或两个字母创建::first-letter伪元素，或都不创建。</p><p>首字母必须出现在第一个格式化行上。例如，在<p><br>First…第一行不包含任何字母并且::first-letter不匹配任何东西。</p><h4 id="10-2-1-CSS中的应用"><a href="#10-2-1-CSS中的应用" class="headerlink" title="10.2.1 CSS中的应用"></a>10.2.1 CSS中的应用</h4><p>在CSS中，::first-letter伪元素在 block-like 容器中生效，例如block，list-item，table-cell，table-caption和inline-block元素。</p><p>在CSS中t，able-cell或inline-block的第一个字母不能作为祖先元素的第一个字母。</p><p>如果元素是list item (‘display: list-item’), ::first-letter 应用在主体盒子标记后的第一个字母。    用户代理将忽略该列表项的    ::first-letter。如果元素有::b=efore和::after内容，::first-letter应用的时候应该包含它们的内容。比如，在p::before {content: “Note: “}生效时， p::first-letter 匹配“Note”中的“N”。</p><p>在CSS中,当float属性是none时::first-line伪元素相当于一个inline-level元素 ,否则它是浮动元素。</p><h3 id="10-3-before-和-after伪类"><a href="#10-3-before-和-after伪类" class="headerlink" title="10.3 ::before 和 ::after伪类"></a>10.3 ::before 和 ::after伪类</h3><p><strong>::before</strong>和**::after**伪类用来描述在元素内容之前或之后生成内容。</p><p>当::first-letter和::first-line被用在包含::before或::after生成元素的对象时，第一个字母或第一行包含这些生成内容。</p><h2 id="11-组合器"><a href="#11-组合器" class="headerlink" title="11 组合器"></a>11 组合器</h2><h3 id="11-1-后代组合器"><a href="#11-1-后代组合器" class="headerlink" title="11.1 后代组合器"></a>11.1 后代组合器</h3><p>选择器“A B”表示一个元素B是祖先A的任意后代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div * p</span><br></pre></td></tr></table></figure><p>表示了p元素是div元素之后的第二代或更多代元素。*两侧的空白符不属于全局选择器。空白符是一个组合器表示div是某个元素的祖先，并且这个元素是p的祖先。<br>表示一个元素具有href属性并且是p的后代，p在div之中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div p *[href]</span><br></pre></td></tr></table></figure><h3 id="11-2-子代组合器"><a href="#11-2-子代组合器" class="headerlink" title="11.2 子代组合器"></a>11.2 子代组合器</h3><p>子代组合器描述了两个元素间的父子关系。</p><h3 id="11-3-兄弟选择器"><a href="#11-3-兄弟选择器" class="headerlink" title="11.3 兄弟选择器"></a>11.3 兄弟选择器</h3><p>有两个兄弟组合器：next-sibling combinator和subsequent-sibling combinator。他们都会忽略非元素节点（例如元素间的文字）。</p><h4 id="11-4-相邻兄弟组合器"><a href="#11-4-相邻兄弟组合器" class="headerlink" title="11.4 相邻兄弟组合器"></a>11.4 相邻兄弟组合器</h4><p>相邻兄弟组合器用“+”表示，它分割两个简单选择器序列。在文档树中这两个序列具有相同的父节点并且第一个序列表示的元素紧紧在第二个序列表示的元素前。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">math</span> + <span class="selector-tag">p</span>  <span class="comment">/* 表示跟在一个math元素后的p元素 */</span></span><br></pre></td></tr></table></figure><h4 id="11-5-一般兄弟选择器"><a href="#11-5-一般兄弟选择器" class="headerlink" title="11.5 一般兄弟选择器"></a>11.5 一般兄弟选择器</h4><p>一般兄弟选择器通过“~”表示，它分割两个简单选择器序列。两个序列表示的元素要在同一个父元素下并且第一个序列表示的元素要在第二个序列表示的元素前（但不必是紧紧挨着）。</p><h2 id="12-选择器优先级计算"><a href="#12-选择器优先级计算" class="headerlink" title="12 选择器优先级计算"></a>12 选择器优先级计算</h2><p>规则如下：</p><pre><code>    1. ID选择器的数量 (= a)    2. 类选择器、属性选择器和伪类的数量 (= b)    3. 类型选择器和伪元素的数量(= c)</code></pre><p>忽略通用选择器，否定伪类参与计算，但不当做伪类计算。把三个数字连起来a-b-c（在具有大基数的数字系统中）作为优先级。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;**CSS(层叠样式表)**是一个描述HTML和XML文档在屏幕等上呈现的语言。CSS使用选择器将样式属性绑定到文档中的元素，选择器是与树中的元素相匹配的模式，在语法上不区分大小写，&lt;/p&gt;
&lt;h2 id=&quot;1-选择器介绍&quot;&gt;&lt;a href=&quot;#1-选择器介绍&quot; class</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="W3C CSS" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/"/>
    
    <category term="Selectors Level 3" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/W3C-CSS/Selectors-Level-3/"/>
    
    
    <category term="W3C" scheme="http://example.com/tags/W3C/"/>
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>20-重定向与负载均衡</title>
    <link href="http://example.com/2021/03/05/note/HTTP/20-%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://example.com/2021/03/05/note/HTTP/20-%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2021-03-05T04:04:27.183Z</published>
    <updated>2021-03-08T03:03:37.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="20-1-为什么要重定向"><a href="#20-1-为什么要重定向" class="headerlink" title="20.1 为什么要重定向"></a>20.1 为什么要重定向</h2><p>由于HTTP应用程序需要可靠地执行HTTP事务、最小化时延、节约网络带宽，Web内容通常分布在很多地方。可以将重定向当作一组有助于找到“最佳”分布式内容的技术。</p><p>多数重定向部署都包含了某些形式的负载均衡。也就是它们可以将输入报文的负载分摊到一组服务器中去。反之，因为输入报文一定会在分担负荷的服务器之间进行某种分布，所以任意形式的负载均衡中都包含了重定向。</p><h2 id="20-2-重定向到何地"><a href="#20-2-重定向到何地" class="headerlink" title="20.2 重定向到何地"></a>20.2 重定向到何地</h2><p>从很多重定向技术都可用于服务器、代理、缓存和网关。一些重定向技术是专门为特定类型的端点设计的，没有通用性。</p><p>Web服务器会根据每个IP来处理请求，把对某特定URL的每条请求都发送到最佳的Web服务器上去（最靠近客户端的、或负载最轻的或采用其他优化策略选择的服务器）。</p><h2 id="20-3-重定向协议概览"><a href="#20-3-重定向协议概览" class="headerlink" title="20.3 重定向协议概览"></a>20.3 重定向协议概览</h2><p>重定向的目标是尽快地将HTTP报文发送到最佳的Web服务器上去。HTTP报文传输的方向会受到HTTP应用程序和报文经由的路由设备的影响，浏览器配置、DNS，TCP/P路由以及HTTP都提供了重定向报文的机制。比如。</p><ol><li>配置创建客户端报文的浏览器应用程序，使其将报文发送给代理服务器。</li><li>DNS解析程序会选择用于报文寻址的IP地址。</li><li>报文经过网络传输时，会被划分为一些带有地址的分组，交换机和路由器会检查分组中的TCP/IP地址，并据此来确定分组的发送路线。</li><li>Web服务器可以通过HTTP重定向将请求反弹给不同的Web服务器。</li></ol><p>20.4 通用的重定向方法</p><h3 id="20-4-1-HTTP重定向"><a href="#20-4-1-HTTP重定向" class="headerlink" title="20.4.1 HTTP重定向"></a>20.4.1 HTTP重定向</h3><p>处理重定向的服务器（重定向服务器）找到可用的负载最小的内容服务器，并将浏览器重定向到那台服务器上去。HTTP重定向的优点之一就是重定向服务器知道客户端的IP地址；理论上来讲，它可以做出更合理的选择。</p><p>HTTP重定向可以在服务器间导引请求，但它有以下几个缺点。</p><ol><li>需要原始服务器进行大量处理来判断要重定向到哪台服务器上去。</li><li>增加了用户时延，因为访问页面时要进行两次往返。</li><li>如果重定向服务器出故障，站点就会瘫痪。</li></ol><p>由于存在这些弱点，HTTP重定向通常都会与其他一种或多种重定向技术结合使用。</p><h3 id="20-4-2-DNS重定向"><a href="#20-4-2-DNS重定向" class="headerlink" title="20.4.2 DNS重定向"></a>20.4.2 DNS重定向</h3><p>DNS允许将几个IP地址关联到一个域中，可以配置DNS解析程序，以返回可变的IP地址。</p><p><strong>DNS轮转</strong>:DNS服务器都会在每次完成查询之后对地址进行轮转。由于大多数DNS客户端只会使用多地址集中的第一个地址，所以DNS轮转可以在多台服务器间提供负载均衡。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/Al9KaUwCZBNSx7G.png"                      alt="image.png"                ></p><p>DNS局限性：没有考虑任何与客户端和服务器的相对位置，或者服务器当前负载有关的因素。其次很多Web浏览器或操作系统都会进行DNS缓存，以减少DNS查找的开销。DNS轮转通常都不会平衡单个客户端的负载。</p><p>因此有些增强的DNS服务器会使用其他一些技术来选择地址的顺序。</p><ol><li><strong>负载均衡算法。</strong>使DNS服务器跟踪服务器上的负载，将最佳Web服务器放在列表最前面。</li><li><strong>邻接路由算法。</strong>使DNS服务器尝试着将用户导向最近的服务器。</li><li><strong>故障屏蔽算法。</strong>使DNS服务器监视网络状况，将请求绕过出现服务中断或其他故障的地方。</li></ol><p>通常，运行复杂服务器跟踪算法的DNS服务器就是在内容提供者控制之下的一个权威服务器。</p><p>但是，对于那些要查找附近服务器的服务来说，缺点就是权威DNS服务器只能用本地DNS服务器的IP地址决定，而非客户端的IP地址。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/2Il5cpGM38WotJH.png"                      alt="image _1_.png"                ></p><h3 id="20-4-3-任播寻址"><a href="#20-4-3-任播寻址" class="headerlink" title="20.4.3 任播寻址"></a>20.4.3 任播寻址</h3><p>在任播寻址中，几个地理上分散的服务器拥有完全相同的IP地址，而且会通过骨干路由器的“最短路径”路由功能将客户端的请求发送给离它最近的服务器。这种方法需要，每台服务器都要向邻近的骨干路由器广告，服务器会通过路由器通信协议与其邻近的骨干路由器通信。骨干路由器收到发送给任播地址的分组时，会像平常一样寻找接受那个IP地址的最近的“路由器”。由于服务器是将自己作为那个地址的路由器广告出去的，所以骨干路由器会将分组发送给服务器。</p><p>任播寻址仍是项实验性技术。要使用分布式任播技术，服务器须使用“路由器语言”，且路由器必须能够处理可能出现的地址冲突，因为因特网地址基本都是假定一台服务器只有一个地址的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/Nrh85dgCUJTPGFI.png"                      alt="image _2_.png"                ></p><h3 id="20-4-4IP-MAC转发"><a href="#20-4-4IP-MAC转发" class="headerlink" title="20.4.4IP MAC转发"></a>20.4.4IP MAC转发</h3><p>在以太网中，HTTP报文都是以携带地址的数据分组的形式发送的。每个分组有一个的MAC地址，这是第二层设备（通常是交换机和HUB）会接收具有特定输入MAC地址的分组，然后将其转发到特定的输出MAC地址上去。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/VEoGWqiDmRNaLZB.png"                      alt="image _3_.png"                ></p><p>通常，如果缓存中没有请求需要的HTTP内容，代理缓存就会代表客户端向此内容的原始服务器发送一条HTTP请求。交换机会将端口80的请求从代理（MAC6）发送给因特网网关（MAC5）</p><p>支持MAC转发的第四层交换机通常会将请求转发给几个代理缓存，并在它们之间平衡负载。因为MAC地址转发只是点对点的，所以服务器或代理只能位于离交换机一跳远的地方。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/2TdyikbQZLY1IWJ.png"                      alt="QQ截图20210304204846.png"                ></p><h3 id="20-4-5-IP地址转发"><a href="#20-4-5-IP地址转发" class="headerlink" title="20.4.5 IP地址转发"></a>20.4.5 IP地址转发</h3><p>在IP地址转发中，交换机或其他第四层设备会检测输入分组中的TCP/IP地址，并通过修改目的IP地址，对分组进行相应的转发。与MAC转发相比，优点是目标服务器只要位于交换机的上游就行，而非一跳远的地方，而且通常第三层的端到端因特网路由都会将分组传送到正确的地方。</p><p>这种类型的转发也称为NAT（Network Address Translation，网络地址转换）。</p><p>缺点在于，因为从客户端接受输入TCP连接的交换机管理着连接，交换机必须通过那条TCP连接将响应回送给客户端。这样，所有来自目标服务器或代理的响应都必须返回给交换机。服务器或代理可能看不到真正的客户端IP地址。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/pyioQk2YVaBXsEc.png"                      alt="image _4_.png"                ></p><p>有以下两种方式可以控制响应的返回路径。</p><ol><li>将分组的源IP地址改成交换机的IP地址。这种方式被称为完全NAT（full NAT），其中的IP转发设备会对目的IP地址和源IP地址都进行转换。缺点是服务器不知道客户端的IP地址（当涉及到认证和计费），因为从客户端接受输入TCP连接的交换机管理着连接，交换机必须通过那条TCP连接将响应回送给客户端，所有来自目标服务器或代理的响应都必须返回给交换机。</li><li>如果源IP地址仍然是客户端的IP地址，就要确保没有从服务器到客户端的直接路由（绕过交换机的）。这种方式被称为半NAT（half NAT），这种方法的优点是服务器知道客户端的IP地址，但缺点是要对客户端和服务器之间的整个网络都有某种程度的控制。<h3 id="20-4-6-网元控制协议"><a href="#20-4-6-网元控制协议" class="headerlink" title="20.4.6 网元控制协议"></a>20.4.6 网元控制协议</h3></li></ol><p>NECP（Network Element Control Protocol，网元控制协议）允许网元（NE，路由器和交换机等负责转发IP分组的设备）与服务器元素（SE，web服务器和代理缓存等提供应用层请求的设备）进行交互。NECP并未显式提供对负载均衡的支持；它只是为SE提供了一种发送负载均衡信息给NE的方式，这样NE就可以在它认为合适的情况下进行负载均衡了。与WCCP一样，NECP也提供了几种转发分组的方式：MAC转发、GRE封装和NAT.</p><p>NECP支持例外。SE可以决定它不能为某些特定的源IP地址提供服务，并将这些地址发送给NE，然后，NE可以将来自这些IP地址的请求转发给原始服务器。</p><h2 id="20-5-代理的重定向方法"><a href="#20-5-代理的重定向方法" class="headerlink" title="20.5 代理的重定向方法"></a>20.5 代理的重定向方法</h2><p>客户端如何知道要连接到某个代理，可以用3种方法来判断：显式的浏览器配置，动态自动配置以及透明拦截。</p><h3 id="20-5-1-显式浏览器配置"><a href="#20-5-1-显式浏览器配置" class="headerlink" title="20.5.1 显式浏览器配置"></a>20.5.1 显式浏览器配置</h3><p>用户可以在大多数浏览器中输入代理的名字或IP地址以及端口号。但有些服务提供商不允许用户配置普通浏览器来使用代理，它们会要求用户下载事先配置好的浏览器。</p><p>显式浏览器配置有以下两个主要的缺点。</p><ol><li>在代理无法响应的情况下或浏览器配置代理错误，也不会去联系原始服务器。</li><li>如果代理出现网络架构方面的变动，用户都要修改浏览器代理设置。<h3 id="20-5-2-代理自动配置"><a href="#20-5-2-代理自动配置" class="headerlink" title="20.5.2 代理自动配置"></a>20.5.2 代理自动配置</h3></li></ol><p>代理自动配置（PAC）协议：自动的动态配置浏览器，连接到正确的代理服务器，可以解决上面提出的问题。PAC的基本思想是让浏览器去获取一个称为PAC的特殊文件，这个文件说明了每个URL所关联的代理。缺点是必须要对浏览器进行配置，让它知道要从哪个服务器获取PAC文件。</p><h2 id="20-5-3-Web代理自动发现协议（略）"><a href="#20-5-3-Web代理自动发现协议（略）" class="headerlink" title="20.5.3 Web代理自动发现协议（略）"></a>20.5.3 Web代理自动发现协议（略）</h2><p>WPAD（Web代理自动发现协议）的目标是在不要求终端用户手工配置代理设置，而且不依赖透明流量拦截的情况下，为Web浏览器提供一种发现并使用附近代理的方式。</p><p>实现WPAD协议的HTTP客户端：用WPAD找到PAC文件的配置URL（CURL），根据这个CURL获取PAC文件，执行PAC文件来确定代理服务器，向那个代理服务器发送HTTP请求。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/FOXqjtdfATC1lBo.png"                      alt="image _5_.png"                ></p><h2 id="20-6-缓存重定向方法"><a href="#20-6-缓存重定向方法" class="headerlink" title="20.6 缓存重定向方法"></a>20.6 缓存重定向方法</h2><p>WCCP协议可以使路由器将Web流量重定向到代理缓存中去。WCCP负责路由器和缓存服务器之间的通信，这样路由器就可以对缓存进行验证（确保启动且运行），在缓存之间进行负载均衡，并将特定类型的流量发送给特定的缓存了。</p><p>下面是WCCP重定向在HTTP上工作过程的概述。</p><ol><li>启动包含了一些支持WCCP的路由器和缓存的网络，这些路由器和缓存之间可以相互通信。</li><li>一组路由器及其目标缓存构成一个WCCP服务组。服务组的配置说明了要将何种流量发往何处、流量是如何发送的以及如何在服务组的缓存之间进行负载均衡。</li><li>若服务组配置为重定向HTTP流量，服务组中路由器就将HTTP请求发送给服务组中的缓存。</li><li>HTTP请求抵达服务组中的路由器时，路由器会（根据对请求IP地址的散列，或者“掩码/值”的配对策略）选择服务组中的某个缓存为请求提供服务。</li><li>路由器向缓存发送请求分组，可以用缓存的IP地址来封装分组，也可通过IP MAC转发实现。</li><li>如果缓存无法为请求提供服务，就将分组返回给路由器进行普通的转发。</li><li>服务组中的成员会互相交换心跳报文，不断验证对方的可用性。<h2 id="20-7-因特网缓存协议"><a href="#20-7-因特网缓存协议" class="headerlink" title="20.7 因特网缓存协议"></a>20.7 因特网缓存协议</h2></li></ol><p>ICP（因特网缓存协议）允许缓存在自身没有请求的内容的情况下，在其兄弟缓存中查找命中内容，以避免查询原始服务器而带来的更多开销。</p><p>ICP会同时去询问附近的多个缓存，看看它们的缓存中是否有特定的URL，附近的缓存如果有就会返回一个简短的报文HIT，否则返回MISS。缓存就可以打开一条到拥有此对象的邻居缓存的HTTP连接。但ICP请求内容时只使用了URL，所以会降低缓存命中率。</p><p>ICP报文是一个以网络字节序表示的32位封装结构，为提高效率，可由UDP数据报承载其报文。但UDP是一种不可靠的因特网协议，因此使用ICP的程序要具有超时功能，以检测丢失的数据报。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/54XhGHIWUtJS1cz.png"                      alt="image _6_.png"                ></p><h2 id="20-8-缓存阵列路由协议"><a href="#20-8-缓存阵列路由协议" class="headerlink" title="20.8 缓存阵列路由协议"></a>20.8 缓存阵列路由协议</h2><p>通过CARP（缓存阵列路由协议）协议来管理一组代理服务器，多个代理服务器的负载分散到一组服务器上。CARP是ICP的一个替代品。它们都允许管理者通过使用多个代理服务器来提高性能。</p><p>通过ICP协议连接起来的每个代理服务器都是将内容进行了冗余镜像的独立缓存服务器，在不同的代理服务器之间复制Web对象条目是可行的。相反，用CARP连接起来的一组服务器会被当作一个大型的缓存服务器，其中每个组件服务器都只包含全部缓存文档中的一部分。</p><p>通过对某个Web对象的URL应用散列函数，CARP就可以将此对象映射到特定的代理服务器上去，所以可以通过单次查找确定对象的位置，无须去查询集合中配置的每个代理服务器。</p><p>但CARP的缺点是，如果某个代理服务器不可用了，就要重新修改散列表，而且必须重新配置现存代理服务器上的内容。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://i.loli.net/2021/03/08/GYDefJaBXAbCdS4.png"                      alt="image _7_.png"                ></p><h2 id="20-9-超文本缓存协议（略）"><a href="#20-9-超文本缓存协议（略）" class="headerlink" title="20.9 超文本缓存协议（略）"></a>20.9 超文本缓存协议（略）</h2><p>HTCP（超文本缓存协议）允许兄弟缓存之间通过URL和所有的请求及响应首部来相互查询文档是否存在，以降低错误命中的可能。而且HTCP允许兄弟缓存监视或请求在对方的缓存中添加或删除所选中的文档，并修改对方已缓存文档的缓存策略。ICP和HTCP事务之间的区别体现在请求和响应细节上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;20-1-为什么要重定向&quot;&gt;&lt;a href=&quot;#20-1-为什么要重定向&quot; class=&quot;headerlink&quot; title=&quot;20.1 为什么要重定向&quot;&gt;&lt;/a&gt;20.1 为什么要重定向&lt;/h2&gt;&lt;p&gt;由于HTTP应用程序需要可靠地执行HTTP事务、最小化时延、</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTTP权威指南" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/"/>
    
    <category term="20-重定向与负载均衡" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTTP%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/20-%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
    <category term="HTTP" scheme="http://example.com/tags/HTTP/"/>
    
  </entry>
  
</feed>
